/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */


«REM»DOCUMENTATION: PapyrusGencode«ENDREM»
«REM»This template has been modify to allow the drag and drop«ENDREM»
«REM»and  install the mecanism of "filters views..." view for subelements«ENDREM»

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE constructor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
«ENDDEFINE»

«DEFINE createDefaultEditPoliciesBody FOR gmfgen::GenDiagram-»
	super.createDefaultEditPolicies();
	«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
	«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
	«REM»BEGIN: PapyrusGenCode«ENDREM»
	«REM»Code to install editpolicy in chage of drag and drop «ENDREM»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE, new org.eclipse.papyrus.diagram.common.edit.policies.DiagramDragDropEditPolicy(resolver));
	«REM»END: PapyrusGenCode«ENDREM»
	«IF shouldGenerateDiagramViewmap()-»
		// diagram figure does layout; need to install child editpolicy to show selection feedback
		installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, new org.eclipse.gef.editpolicies.LayoutEditPolicy() {
			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				final org.eclipse.gef.editpolicies.NonResizableEditPolicy p = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				p.setDragAllowed(false);
				return p;
			}
			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
				return null;
			}
			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		});
	«ENDIF-»
	«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.POPUPBAR_ROLE);
«ENDDEFINE»

«DEFINE createFigure FOR gmfgen::GenDiagram-»
	«IF shouldGenerateDiagramViewmap()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.draw2d.IFigure createFigure() {
			org.eclipse.draw2d.FreeformLayer l = new org.eclipse.draw2d.FreeformLayer();
			l.setBorder(new org.eclipse.draw2d.MarginBorder(50));
			«EXPAND initLayout("lm") FOR viewmap.layoutType-»
			l.setLayoutManager(lm);
			return l;
		}
	«ENDIF»
«ENDDEFINE»

«DEFINE initLayout(String varName) FOR gmfgen::ViewmapLayoutType-»
	«IF value == gmfgen::ViewmapLayoutType::TOOLBAR_LAYOUT.value-»
		org.eclipse.draw2d.ToolbarLayout «varName» = new org.eclipse.draw2d.ToolbarLayout();
		«varName».setSpacing(10);
	«ELSEIF value == gmfgen::ViewmapLayoutType::FLOW_LAYOUT.value-»
		org.eclipse.draw2d.FlowLayout «varName» = new org.eclipse.draw2d.FlowLayout();
		«varName».setMajorSpacing(10);
		«varName».setMinorSpacing(10);
	«ELSE-»
		org.eclipse.draw2d.LayoutManager «varName» = null; /*FIXME - unknown layout type*/
	«ENDIF-»
«ENDDEFINE»

«REM»BEGIN: PapyrusGenCode«ENDREM»
«REM»Code to define the adapter to view Info«ENDREM»
«DEFINE viewResolver FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment-»
	private org.eclipse.papyrus.diagram.common.edit.policies.ViewAndFeatureResolver resolver = new org.eclipse.papyrus.diagram.common.edit.policies.ViewAndFeatureResolver() {

		public boolean isEObjectNode(org.eclipse.emf.ecore.EObject element) {
			if («editorGen.editor.packageName».«visualIDRegistryClassName».getNodeVisualID(getNotationView(),
					element) > -1) {
				return true;
			}
			return false;
		}

		public boolean isEObjectLink(org.eclipse.emf.ecore.EObject element) {
			if («editorGen.editor.packageName».«visualIDRegistryClassName».getLinkWithClassVisualID(element) > -1) {
				return true;
			}
			return false;
		}
		
		public int getEObjectSemanticHint(org.eclipse.emf.ecore.EObject element) {
			if (element != null) {
				return «editorGen.editor.packageName».«visualIDRegistryClassName».getNodeVisualID(getNotationView(),
					element);
			}
			return -1;
		}
		
		public org.eclipse.emf.ecore.EStructuralFeature getEStructuralFeatureForEClass(org.eclipse.emf.ecore.EClass class1) {
			«FOREACH topLevelNodes AS childNode-»
			«EXPAND featureForMetaclass FOR childNode-»
			«ENDFOREACH-»
			return null;
		}
 	};
«ENDDEFINE»

«DEFINE getAdapter FOR gmfgen::GenDiagram»
«EXPAND xpt::Common::generatedMemberComment»
	public Object getAdapter(Class adapter) {
		if (adapter != null && adapter.equals(org.eclipse.papyrus.diagram.common.edit.policies.ViewAndFeatureResolver.class)) {
			return this.resolver;
		}
		«REM» [ViewInfo] return a ViewInfo with info about the views in this diagram «ENDREM»
		if (adapter != null && adapter.equals(org.eclipse.papyrus.diagram.common.providers.ViewInfo.class)) {
			return «editorGen.editor.packageName».«visualIDRegistryClassName».getDiagramViewInfo();
		}
		return super.getAdapter(adapter);
	}
«ENDDEFINE»

«DEFINE featureForMetaclass FOR gmfgen::GenNode-»
		if («EXPAND MetaModel::MetaClass FOR modelFacet.metaClass».equals(class1)) {
			return «EXPAND MetaModel::MetaFeature FOR modelFacet.containmentMetaFeature»;
		}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»
«EXPAND xpt::Common::generatedMemberComment-»
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification event) {
	«REM»[ViewInfo] to update the diagram when filtering Views by type «ENDREM»
		super.handleNotificationEvent(event);
		if (event.getNotifier() instanceof org.eclipse.emf.ecore.EAnnotation) {
			org.eclipse.emf.ecore.EAnnotation eAnnotation = (org.eclipse.emf.ecore.EAnnotation) event.getNotifier();
			if (eAnnotation.getSource() != null
					&& eAnnotation.getSource().equals(
							org.eclipse.papyrus.diagram.common.util.MDTUtil.FilterViewAndLabelsSource)) {
				//modification form MOSKitt approach, canonical policies are not called
				org.eclipse.papyrus.diagram.common.util.MDTUtil.filterDiagramViews(this.getDiagramView());
			}
		}
	}
	
	«EXPAND getAdapter FOR this»
	
«ENDDEFINE»
«REM»END: PapyrusGenCode«ENDREM»
