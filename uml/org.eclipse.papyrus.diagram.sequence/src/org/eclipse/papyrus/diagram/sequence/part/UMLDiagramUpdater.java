/***************************************************************************
 * Copyright (c) 2007 Conselleria de Infraestructuras y Transporte,
 * Generalitat de la Comunitat Valenciana . All rights reserved. This program
 * and the accompanying materials are made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors: Gabriel Merin Cubero (Prodevelop) â€“ Sequence Diagram implementation
 *
 ******************************************************************************/
package org.eclipse.papyrus.diagram.sequence.part;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.papyrus.diagram.common.util.BasicEcoreSwitch;
import org.eclipse.papyrus.diagram.sequence.edit.parts.BehaviorExecutionSpecificationEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.CombinedFragmentEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.CommentAnnotatedElementEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.CommentEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.ElementOwnedCommentEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.Interaction2EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.InteractionEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.InteractionInteractionCompartment2EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.InteractionInteractionCompartmentEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.LifelineEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.Message2EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.Message3EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.Message4EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.Message5EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.Message6EditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.MessageEditPart;
import org.eclipse.papyrus.diagram.sequence.edit.parts.PackageEditPart;
import org.eclipse.papyrus.diagram.sequence.providers.UMLElementTypes;
import org.eclipse.papyrus.diagram.sequence.util.MessageCommonUtil;
import org.eclipse.uml2.uml.BehaviorExecutionSpecification;
import org.eclipse.uml2.uml.CombinedFragment;
import org.eclipse.uml2.uml.Comment;
import org.eclipse.uml2.uml.Element;
import org.eclipse.uml2.uml.Interaction;
import org.eclipse.uml2.uml.InteractionFragment;
import org.eclipse.uml2.uml.Lifeline;
import org.eclipse.uml2.uml.Message;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.PackageableElement;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.uml2.uml.util.UMLSwitch;


/**
 * @generated
 */
@SuppressWarnings("unchecked")
public class UMLDiagramUpdater {

	/**
	 * @generated
	 */
	public static boolean isShortcutOrphaned(View view) {
		return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
	}

	/**
	 * @generated
	 */
	public static List getSemanticChildren(View view) {
		switch (UMLVisualIDRegistry.getVisualID(view)) {
		case LifelineEditPart.VISUAL_ID:
			return getLifeline_2002SemanticChildren(view);
		case InteractionInteractionCompartmentEditPart.VISUAL_ID:
			return getInteractionInteractionCompartment_5001SemanticChildren(view);
		case InteractionInteractionCompartment2EditPart.VISUAL_ID:
			return getInteractionInteractionCompartment_5002SemanticChildren(view);
		case PackageEditPart.VISUAL_ID:
			return getPackage_79SemanticChildren(view);
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated NOT
	 */
	public static List getLifeline_2002SemanticChildren(View view) {
		if (!view.isSetElement()) {
			return Collections.EMPTY_LIST;
		}
		Lifeline modelElement = (Lifeline) view.getElement();
		List result = new LinkedList();

		// Added code
		if (modelElement instanceof Lifeline) {
			if ((modelElement).getCoveredBys().size() > 0) {
				Interaction interaction = modelElement.getInteraction();

				for (Iterator values = interaction.getFragments().iterator(); values.hasNext();) {
					EObject nextValue = (EObject) values.next();
					int visualID = UMLVisualIDRegistry.getNodeVisualID(view, nextValue);
					if (BehaviorExecutionSpecificationEditPart.VISUAL_ID == visualID) {
						BehaviorExecutionSpecification be = (BehaviorExecutionSpecification) nextValue;
						if (be.getCovereds().size() > 0 && be.getCovereds().get(0) == modelElement) {
							// result.add(nextValue);
							result.add(new UMLNodeDescriptor(nextValue, visualID));
						}
					}
				}
			}
		}

		// Autogenerated code not valid
		// for (Iterator it = modelElement.getFragments().iterator();
		// it.hasNext();) {
		// InteractionFragment childElement = (InteractionFragment) it.next();
		// int visualID = UMLVisualIDRegistry.getNodeVisualID(view,
		// childElement);
		// if (visualID == BehaviorExecutionSpecificationEditPart.VISUAL_ID) {
		// result.add(new UMLNodeDescriptor(childElement, visualID));
		// continue;
		// }
		// }

		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteractionInteractionCompartment_5001SemanticChildren(View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.EMPTY_LIST;
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.EMPTY_LIST;
		}
		Interaction modelElement = (Interaction) containerView.getElement();
		List result = new LinkedList();
		for (Iterator it = modelElement.getFragments().iterator(); it.hasNext();) {
			InteractionFragment childElement = (InteractionFragment) it.next();
			int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == Interaction2EditPart.VISUAL_ID) {
				result.add(new UMLNodeDescriptor(childElement, visualID));
				continue;
			}
			if (visualID == CombinedFragmentEditPart.VISUAL_ID) {
				result.add(new UMLNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		for (Iterator it = modelElement.getLifelines().iterator(); it.hasNext();) {
			Lifeline childElement = (Lifeline) it.next();
			int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == LifelineEditPart.VISUAL_ID) {
				result.add(new UMLNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteractionInteractionCompartment_5002SemanticChildren(View view) {
		if (false == view.eContainer() instanceof View) {
			return Collections.EMPTY_LIST;
		}
		View containerView = (View) view.eContainer();
		if (!containerView.isSetElement()) {
			return Collections.EMPTY_LIST;
		}
		Interaction modelElement = (Interaction) containerView.getElement();
		List result = new LinkedList();
		for (Iterator it = modelElement.getFragments().iterator(); it.hasNext();) {
			InteractionFragment childElement = (InteractionFragment) it.next();
			int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == Interaction2EditPart.VISUAL_ID) {
				result.add(new UMLNodeDescriptor(childElement, visualID));
				continue;
			}
			if (visualID == CombinedFragmentEditPart.VISUAL_ID) {
				result.add(new UMLNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		for (Iterator it = modelElement.getLifelines().iterator(); it.hasNext();) {
			Lifeline childElement = (Lifeline) it.next();
			int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == LifelineEditPart.VISUAL_ID) {
				result.add(new UMLNodeDescriptor(childElement, visualID));
				continue;
			}
		}
		return result;
	}

	/**
	 * @generated NOT
	 * 
	 *            modified to handle an Interaction as canvas element.
	 */
	static class ThisDiagramUpdaterSwitch extends BasicEcoreSwitch<List<UMLNodeDescriptor>, View> {

		@Override
		public List<UMLNodeDescriptor> doSwitch(EObject modelElement) {

			final View view = getInfo();
			if (view == null) {
				return Collections.EMPTY_LIST;
			}

			UMLSwitch<List<UMLNodeDescriptor>> aSwitch = new UMLSwitch<List<UMLNodeDescriptor>>() {

				@Override
				public List<UMLNodeDescriptor> casePackage(Package modelElement) {
					List<UMLNodeDescriptor> result = new LinkedList<UMLNodeDescriptor>();
					for (Iterator it = modelElement.getPackagedElements().iterator(); it.hasNext();) {
						PackageableElement childElement = (PackageableElement) it.next();
						int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
						if (visualID == InteractionEditPart.VISUAL_ID) {
							result.add(new UMLNodeDescriptor(childElement, visualID));
							continue;
						}
					}
					for (Iterator it = modelElement.getOwnedComments().iterator(); it.hasNext();) {
						Comment childElement = (Comment) it.next();
						int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
						if (visualID == CommentEditPart.VISUAL_ID) {
							result.add(new UMLNodeDescriptor(childElement, visualID));
							continue;
						}
					}
					return result;
				}

				@Override
				public List<UMLNodeDescriptor> caseInteraction(Interaction modelElement) {
					List<UMLNodeDescriptor> result = new LinkedList<UMLNodeDescriptor>();
					for (Iterator it = modelElement.getOwnedComments().iterator(); it.hasNext();) {
						Comment childElement = (Comment) it.next();
						int visualID = UMLVisualIDRegistry.getNodeVisualID(view, childElement);
						if (visualID == CommentEditPart.VISUAL_ID) {
							result.add(new UMLNodeDescriptor(childElement, visualID));
							continue;
						}
					}
					result.add(new UMLNodeDescriptor(modelElement, InteractionEditPart.VISUAL_ID));
					return result;
				}

			};
			return aSwitch.doSwitch(modelElement);
		}
	}

	/**
	 * @generated
	 */
	private static ThisDiagramUpdaterSwitch aSwitch = new ThisDiagramUpdaterSwitch();

	/**
	 * @generated
	 */
	public static List getPackage_79SemanticChildren(View view) {
		if (!view.isSetElement()) {
			return Collections.EMPTY_LIST;
		}
		EObject modelElement = view.getElement();
		aSwitch.setInfo(view);
		List<UMLNodeDescriptor> result = aSwitch.doSwitch(modelElement);
		if (result == null || result.size() <= 0) {
			return Collections.EMPTY_LIST;
		}
		return result;
	}

	/**
	 * @generated
	 */
	public static List getContainedLinks(View view) {
		switch (UMLVisualIDRegistry.getVisualID(view)) {
		case PackageEditPart.VISUAL_ID:
			return getPackage_79ContainedLinks(view);
		case InteractionEditPart.VISUAL_ID:
			return getInteraction_1001ContainedLinks(view);
		case CommentEditPart.VISUAL_ID:
			return getComment_2005ContainedLinks(view);
		case Interaction2EditPart.VISUAL_ID:
			return getInteraction_2001ContainedLinks(view);
		case LifelineEditPart.VISUAL_ID:
			return getLifeline_2002ContainedLinks(view);
		case BehaviorExecutionSpecificationEditPart.VISUAL_ID:
			return getBehaviorExecutionSpecification_2003ContainedLinks(view);
		case CombinedFragmentEditPart.VISUAL_ID:
			return getCombinedFragment_2004ContainedLinks(view);
		case MessageEditPart.VISUAL_ID:
			return getMessage_3001ContainedLinks(view);
		case Message2EditPart.VISUAL_ID:
			return getMessage_3002ContainedLinks(view);
		case Message3EditPart.VISUAL_ID:
			return getMessage_3003ContainedLinks(view);
		case Message4EditPart.VISUAL_ID:
			return getMessage_3004ContainedLinks(view);
		case Message5EditPart.VISUAL_ID:
			return getMessage_3005ContainedLinks(view);
		case Message6EditPart.VISUAL_ID:
			return getMessage_3006ContainedLinks(view);
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public static List getIncomingLinks(View view) {
		switch (UMLVisualIDRegistry.getVisualID(view)) {
		case InteractionEditPart.VISUAL_ID:
			return getInteraction_1001IncomingLinks(view);
		case CommentEditPart.VISUAL_ID:
			return getComment_2005IncomingLinks(view);
		case Interaction2EditPart.VISUAL_ID:
			return getInteraction_2001IncomingLinks(view);
		case LifelineEditPart.VISUAL_ID:
			return getLifeline_2002IncomingLinks(view);
		case BehaviorExecutionSpecificationEditPart.VISUAL_ID:
			return getBehaviorExecutionSpecification_2003IncomingLinks(view);
		case CombinedFragmentEditPart.VISUAL_ID:
			return getCombinedFragment_2004IncomingLinks(view);
		case MessageEditPart.VISUAL_ID:
			return getMessage_3001IncomingLinks(view);
		case Message2EditPart.VISUAL_ID:
			return getMessage_3002IncomingLinks(view);
		case Message3EditPart.VISUAL_ID:
			return getMessage_3003IncomingLinks(view);
		case Message4EditPart.VISUAL_ID:
			return getMessage_3004IncomingLinks(view);
		case Message5EditPart.VISUAL_ID:
			return getMessage_3005IncomingLinks(view);
		case Message6EditPart.VISUAL_ID:
			return getMessage_3006IncomingLinks(view);
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public static List getOutgoingLinks(View view) {
		switch (UMLVisualIDRegistry.getVisualID(view)) {
		case InteractionEditPart.VISUAL_ID:
			return getInteraction_1001OutgoingLinks(view);
		case CommentEditPart.VISUAL_ID:
			return getComment_2005OutgoingLinks(view);
		case Interaction2EditPart.VISUAL_ID:
			return getInteraction_2001OutgoingLinks(view);
		case LifelineEditPart.VISUAL_ID:
			return getLifeline_2002OutgoingLinks(view);
		case BehaviorExecutionSpecificationEditPart.VISUAL_ID:
			return getBehaviorExecutionSpecification_2003OutgoingLinks(view);
		case CombinedFragmentEditPart.VISUAL_ID:
			return getCombinedFragment_2004OutgoingLinks(view);
		case MessageEditPart.VISUAL_ID:
			return getMessage_3001OutgoingLinks(view);
		case Message2EditPart.VISUAL_ID:
			return getMessage_3002OutgoingLinks(view);
		case Message3EditPart.VISUAL_ID:
			return getMessage_3003OutgoingLinks(view);
		case Message4EditPart.VISUAL_ID:
			return getMessage_3004OutgoingLinks(view);
		case Message5EditPart.VISUAL_ID:
			return getMessage_3005OutgoingLinks(view);
		case Message6EditPart.VISUAL_ID:
			return getMessage_3006OutgoingLinks(view);
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated NOT
	 * 
	 *            Modified to handle an Interaction as canvas element.
	 */
	public static List getPackage_79ContainedLinks(View view) {
		EObject eObject = view.getElement();
		if (eObject instanceof Element) {
			List result = new LinkedList();
			result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007((Element) eObject));
			return result;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @generated
	 */
	public static List getInteraction_1001ContainedLinks(View view) {
		Interaction modelElement = (Interaction) view.getElement();
		List result = new LinkedList();
		result.addAll(getContainedTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteraction_2001ContainedLinks(View view) {
		Interaction modelElement = (Interaction) view.getElement();
		List result = new LinkedList();
		result.addAll(getContainedTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getContainedTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getLifeline_2002ContainedLinks(View view) {
		Lifeline modelElement = (Lifeline) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getBehaviorExecutionSpecification_2003ContainedLinks(View view) {
		BehaviorExecutionSpecification modelElement = (BehaviorExecutionSpecification) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getCombinedFragment_2004ContainedLinks(View view) {
		CombinedFragment modelElement = (CombinedFragment) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getComment_2005ContainedLinks(View view) {
		Comment modelElement = (Comment) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement));
		return result;
	}

	/**
	 * @generated not
	 */
	public static List getMessage_3001ContainedLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated not
	 */
	public static List getMessage_3002ContainedLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated not
	 */
	public static List getMessage_3003ContainedLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated not
	 */
	public static List getMessage_3004ContainedLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated not
	 */
	public static List getMessage_3005ContainedLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated not
	 */
	public static List getMessage_3006ContainedLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteraction_1001IncomingLinks(View view) {
		Interaction modelElement = (Interaction) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteraction_2001IncomingLinks(View view) {
		Interaction modelElement = (Interaction) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getLifeline_2002IncomingLinks(View view) {
		Lifeline modelElement = (Lifeline) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getBehaviorExecutionSpecification_2003IncomingLinks(View view) {
		BehaviorExecutionSpecification modelElement = (BehaviorExecutionSpecification) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getCombinedFragment_2004IncomingLinks(View view) {
		CombinedFragment modelElement = (CombinedFragment) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getComment_2005IncomingLinks(View view) {
		Comment modelElement = (Comment) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3001IncomingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3002IncomingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3003IncomingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3004IncomingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3005IncomingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3006IncomingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		List result = new LinkedList();
		result.addAll(getIncomingTypeModelFacetLinks_Message_3001(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3002(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3003(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3004(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3005(modelElement, crossReferences));
		result.addAll(getIncomingTypeModelFacetLinks_Message_3006(modelElement, crossReferences));
		result.addAll(getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement, crossReferences));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteraction_1001OutgoingLinks(View view) {
		Interaction modelElement = (Interaction) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getInteraction_2001OutgoingLinks(View view) {
		Interaction modelElement = (Interaction) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getLifeline_2002OutgoingLinks(View view) {
		Lifeline modelElement = (Lifeline) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getBehaviorExecutionSpecification_2003OutgoingLinks(View view) {
		BehaviorExecutionSpecification modelElement = (BehaviorExecutionSpecification) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getCombinedFragment_2004OutgoingLinks(View view) {
		CombinedFragment modelElement = (CombinedFragment) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getComment_2005OutgoingLinks(View view) {
		Comment modelElement = (Comment) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3001OutgoingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3002OutgoingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3003OutgoingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3004OutgoingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3005OutgoingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated
	 */
	public static List getMessage_3006OutgoingLinks(View view) {
		Message modelElement = (Message) view.getElement();
		List result = new LinkedList();
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3001(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3002(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3003(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3004(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3005(modelElement));
		result.addAll(getOutgoingTypeModelFacetLinks_Message_3006(modelElement));
		result.addAll(getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(modelElement));
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getContainedTypeModelFacetLinks_Message_3001(Interaction container) {
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (MessageEditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);
			if (dst == null || src == null) {
				continue;
			}

			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3001, MessageEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getContainedTypeModelFacetLinks_Message_3002(Interaction container) {
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message2EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);
			if (dst == null || src == null) {
				continue;
			}

			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3002, Message2EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getContainedTypeModelFacetLinks_Message_3003(Interaction container) {
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message3EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);
			if (dst == null || src == null) {
				continue;
			}

			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3003, Message3EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getContainedTypeModelFacetLinks_Message_3004(Interaction container) {
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message4EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);
			if (dst == null || src == null) {
				continue;
			}

			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3004, Message4EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getContainedTypeModelFacetLinks_Message_3005(Interaction container) {
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message5EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);
			if (dst == null || src == null) {
				continue;
			}

			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3005, Message5EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getContainedTypeModelFacetLinks_Message_3006(Interaction container) {
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message6EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);
			if (dst == null || src == null) {
				continue;
			}

			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3006, Message6EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getIncomingTypeModelFacetLinks_Message_3001(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() != UMLPackage.eINSTANCE.getElement_OwnedElement() || false == setting.getEObject() instanceof Message) {
				continue;
			}
			Message link = (Message) setting.getEObject();
			if (MessageEditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// Element src = link.getOwner();

			// New code
			Element src = MessageCommonUtil.getMessageSrc(link);

			result.add(new UMLLinkDescriptor(src, target, link, UMLElementTypes.Message_3001, MessageEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getIncomingTypeModelFacetLinks_Message_3002(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() != UMLPackage.eINSTANCE.getElement_OwnedElement() || false == setting.getEObject() instanceof Message) {
				continue;
			}
			Message link = (Message) setting.getEObject();
			if (Message2EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// Element src = link.getOwner();

			// New code
			Element src = MessageCommonUtil.getMessageSrc(link);

			result.add(new UMLLinkDescriptor(src, target, link, UMLElementTypes.Message_3002, Message2EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getIncomingTypeModelFacetLinks_Message_3003(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() != UMLPackage.eINSTANCE.getElement_OwnedElement() || false == setting.getEObject() instanceof Message) {
				continue;
			}
			Message link = (Message) setting.getEObject();
			if (Message3EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// Element src = link.getOwner();

			// New code
			Element src = MessageCommonUtil.getMessageSrc(link);

			result.add(new UMLLinkDescriptor(src, target, link, UMLElementTypes.Message_3003, Message3EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getIncomingTypeModelFacetLinks_Message_3004(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() != UMLPackage.eINSTANCE.getElement_OwnedElement() || false == setting.getEObject() instanceof Message) {
				continue;
			}
			Message link = (Message) setting.getEObject();
			if (Message4EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// Element src = link.getOwner();

			// New code
			Element src = MessageCommonUtil.getMessageSrc(link);

			result.add(new UMLLinkDescriptor(src, target, link, UMLElementTypes.Message_3004, Message4EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getIncomingTypeModelFacetLinks_Message_3005(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() != UMLPackage.eINSTANCE.getElement_OwnedElement() || false == setting.getEObject() instanceof Message) {
				continue;
			}
			Message link = (Message) setting.getEObject();
			if (Message5EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// Element src = link.getOwner();

			// New code
			Element src = MessageCommonUtil.getMessageSrc(link);

			result.add(new UMLLinkDescriptor(src, target, link, UMLElementTypes.Message_3005, Message5EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getIncomingTypeModelFacetLinks_Message_3006(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() != UMLPackage.eINSTANCE.getElement_OwnedElement() || false == setting.getEObject() instanceof Message) {
				continue;
			}
			Message link = (Message) setting.getEObject();
			if (Message6EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Original code
			// Element src = link.getOwner();

			// New code
			Element src = MessageCommonUtil.getMessageSrc(link);

			result.add(new UMLLinkDescriptor(src, target, link, UMLElementTypes.Message_3006, Message6EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection getIncomingFeatureModelFacetLinks_Element_OwnedComment_3007(Comment target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() == UMLPackage.eINSTANCE.getElement_OwnedComment()) {
				result.add(new org.eclipse.papyrus.diagram.sequence.part.UMLLinkDescriptor(setting.getEObject(), target, UMLElementTypes.ElementOwnedComment_3007,
						ElementOwnedCommentEditPart.VISUAL_ID));
			}
		}
		return result;
	}

	/**
	 * @generated
	 */
	private static Collection getIncomingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(Element target, Map crossReferences) {
		Collection result = new LinkedList();
		Collection settings = (Collection) crossReferences.get(target);
		for (Iterator it = settings.iterator(); it.hasNext();) {
			EStructuralFeature.Setting setting = (EStructuralFeature.Setting) it.next();
			if (setting.getEStructuralFeature() == UMLPackage.eINSTANCE.getComment_AnnotatedElement()) {
				result.add(new org.eclipse.papyrus.diagram.sequence.part.UMLLinkDescriptor(setting.getEObject(), target, UMLElementTypes.CommentAnnotatedElement_3008,
						CommentAnnotatedElementEditPart.VISUAL_ID));
			}
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getOutgoingTypeModelFacetLinks_Message_3001(Element source) {
		Interaction container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
			if (element instanceof Interaction) {
				container = (Interaction) element;
			}
		}
		if (container == null) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (MessageEditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Generated code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);

			// Generated code
			// if (src != source) {
			// continue;
			// }
			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3001, MessageEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getOutgoingTypeModelFacetLinks_Message_3002(Element source) {
		Interaction container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
			if (element instanceof Interaction) {
				container = (Interaction) element;
			}
		}
		if (container == null) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message2EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			// Generated code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);

			// Generated code
			// if (src != source) {
			// continue;
			// }
			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3002, Message2EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getOutgoingTypeModelFacetLinks_Message_3003(Element source) {
		Interaction container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
			if (element instanceof Interaction) {
				container = (Interaction) element;
			}
		}
		if (container == null) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message3EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			List targets = link.getOwnedElements();
			Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			if (false == theTarget instanceof Element) {
				continue;
			}
			// Generated code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);

			// Generated code
			// if (src != source) {
			// continue;
			// }
			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3003, Message3EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getOutgoingTypeModelFacetLinks_Message_3004(Element source) {
		Interaction container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
			if (element instanceof Interaction) {
				container = (Interaction) element;
			}
		}
		if (container == null) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message4EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			List targets = link.getOwnedElements();
			Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			if (false == theTarget instanceof Element) {
				continue;
			}
			// Generated code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);

			// Generated code
			// if (src != source) {
			// continue;
			// }
			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3004, Message4EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getOutgoingTypeModelFacetLinks_Message_3005(Element source) {
		Interaction container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
			if (element instanceof Interaction) {
				container = (Interaction) element;
			}
		}
		if (container == null) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message5EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			List targets = link.getOwnedElements();
			Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			if (false == theTarget instanceof Element) {
				continue;
			}
			// Generated code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);

			// Generated code
			// if (src != source) {
			// continue;
			// }
			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3005, Message5EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	private static Collection getOutgoingTypeModelFacetLinks_Message_3006(Element source) {
		Interaction container = null;
		// Find container element for the link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (EObject element = source; element != null && container == null; element = element.eContainer()) {
			if (element instanceof Interaction) {
				container = (Interaction) element;
			}
		}
		if (container == null) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		for (Iterator links = container.getMessages().iterator(); links.hasNext();) {
			Object linkObject = links.next();
			if (false == linkObject instanceof Message) {
				continue;
			}
			Message link = (Message) linkObject;
			if (Message6EditPart.VISUAL_ID != UMLVisualIDRegistry.getLinkWithClassVisualID(link)) {
				continue;
			}
			List targets = link.getOwnedElements();
			Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			if (false == theTarget instanceof Element) {
				continue;
			}
			// Generated code
			// List targets = link.getOwnedElements();
			// Object theTarget = targets.size() == 1 ? targets.get(0) : null;
			// if (false == theTarget instanceof Element) {
			// continue;
			// }
			// Element dst = (Element) theTarget;
			// Element src = link.getOwner();

			// New code
			Element dst = MessageCommonUtil.getMessageDst(link);
			Element src = MessageCommonUtil.getMessageSrc(link);

			// Generated code
			// if (src != source) {
			// continue;
			// }
			result.add(new UMLLinkDescriptor(src, dst, link, UMLElementTypes.Message_3006, Message6EditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated not
	 */
	private static Collection getOutgoingFeatureModelFacetLinks_Element_OwnedComment_3007(Element source) {
		return new LinkedList();
	}

	/**
	 * @generated
	 */
	private static Collection getOutgoingFeatureModelFacetLinks_Comment_AnnotatedElement_3008(Comment source) {
		Collection result = new LinkedList();
		for (Iterator destinations = source.getAnnotatedElements().iterator(); destinations.hasNext();) {
			Element destination = (Element) destinations.next();
			result.add(new org.eclipse.papyrus.diagram.sequence.part.UMLLinkDescriptor(source, destination, UMLElementTypes.CommentAnnotatedElement_3008, CommentAnnotatedElementEditPart.VISUAL_ID));
		}
		return result;
	}

	/**
	 * @generated NOT
	 */
	public static UMLLinkDescriptor createLinkDescriptorFromModelElement(EObject eObject) {
		int linkID = UMLVisualIDRegistry.getLinkWithClassVisualID(eObject);
		switch (linkID) {
		case MessageEditPart.VISUAL_ID:
			return createLinkDescriptorFromMessage((Message) eObject);
		case Message2EditPart.VISUAL_ID:
			return createLinkDescriptorFromMessage2((Message) eObject);
		case Message3EditPart.VISUAL_ID:
			return createLinkDescriptorFromMessage3((Message) eObject);
		case Message4EditPart.VISUAL_ID:
			return createLinkDescriptorFromMessage4((Message) eObject);
		case Message5EditPart.VISUAL_ID:
			return createLinkDescriptorFromMessage5((Message) eObject);
		case Message6EditPart.VISUAL_ID:
			return createLinkDescriptorFromMessage6((Message) eObject);
		default:
			return null;
		}
	}

	private static UMLLinkDescriptor createLinkDescriptorFromMessage(Message message) {
		Element src = MessageCommonUtil.getMessageSrc(message);
		Element target = MessageCommonUtil.getMessageDst(message);
		return new UMLLinkDescriptor(src, target, message, UMLElementTypes.Message_3001, MessageEditPart.VISUAL_ID);
	}

	private static UMLLinkDescriptor createLinkDescriptorFromMessage2(Message message) {
		Element src = MessageCommonUtil.getMessageSrc(message);
		Element target = MessageCommonUtil.getMessageDst(message);
		return new UMLLinkDescriptor(src, target, message, UMLElementTypes.Message_3002, Message2EditPart.VISUAL_ID);
	}

	private static UMLLinkDescriptor createLinkDescriptorFromMessage3(Message message) {
		Element src = MessageCommonUtil.getMessageSrc(message);
		Element target = MessageCommonUtil.getMessageDst(message);
		return new UMLLinkDescriptor(src, target, message, UMLElementTypes.Message_3003, Message3EditPart.VISUAL_ID);
	}

	private static UMLLinkDescriptor createLinkDescriptorFromMessage4(Message message) {
		Element src = MessageCommonUtil.getMessageSrc(message);
		Element target = MessageCommonUtil.getMessageDst(message);
		return new UMLLinkDescriptor(src, target, message, UMLElementTypes.Message_3004, Message4EditPart.VISUAL_ID);
	}

	private static UMLLinkDescriptor createLinkDescriptorFromMessage5(Message message) {
		Element src = MessageCommonUtil.getMessageSrc(message);
		Element target = MessageCommonUtil.getMessageDst(message);
		return new UMLLinkDescriptor(src, target, message, UMLElementTypes.Message_3005, Message5EditPart.VISUAL_ID);
	}

	private static UMLLinkDescriptor createLinkDescriptorFromMessage6(Message message) {
		Element src = MessageCommonUtil.getMessageSrc(message);
		Element target = MessageCommonUtil.getMessageDst(message);
		return new UMLLinkDescriptor(src, target, message, UMLElementTypes.Message_3006, Message6EditPart.VISUAL_ID);
	}
}
