/*
* generated by Xtext
*/
grammar InternalUmlState;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.papyrus.state.editor.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.papyrus.state.editor.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.papyrus.state.editor.xtext.services.UmlStateGrammarAccess;

}

@parser::members {

 	private UmlStateGrammarAccess grammarAccess;
 	
    public InternalUmlStateParser(TokenStream input, IAstFactory factory, UmlStateGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/papyrus/state/editor/xtext/parser/antlr/internal/InternalUmlState.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StateRule";	
   	}
   	
   	@Override
   	protected UmlStateGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStateRule
entryRuleStateRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRuleRule(), currentNode); }
	 iv_ruleStateRule=ruleStateRule 
	 { $current=$iv_ruleStateRule.current; } 
	 EOF 
;

// Rule StateRule
ruleStateRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStateRuleAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getStateRuleAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStateRuleAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getStateRuleAccess().getUnorderedGroup_1(), 0);
	 				}
					(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateRuleAccess().getEntryEntryRuleParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_entry_2_0=ruleEntryRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"entry",
	        		lv_entry_2_0, 
	        		"EntryRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStateRuleAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStateRuleAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getStateRuleAccess().getUnorderedGroup_1(), 1);
	 				}
					(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateRuleAccess().getDoDoRuleParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_do_3_0=ruleDoRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"do",
	        		lv_do_3_0, 
	        		"DoRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStateRuleAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getStateRuleAccess().getUnorderedGroup_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getStateRuleAccess().getUnorderedGroup_1(), 2);
	 				}
					(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateRuleAccess().getExitExitRuleParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_exit_4_0=ruleExitRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exit",
	        		lv_exit_4_0, 
	        		"ExitRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStateRuleAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getStateRuleAccess().getUnorderedGroup_1());
	}

))
;





// Entry rule entryRuleEntryRule
entryRuleEntryRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntryRuleRule(), currentNode); }
	 iv_ruleEntryRule=ruleEntryRule 
	 { $current=$iv_ruleEntryRule.current; } 
	 EOF 
;

// Rule EntryRule
ruleEntryRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'entry' 
    {
        createLeafNode(grammarAccess.getEntryRuleAccess().getEntryKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntryRuleAccess().getKindBehaviorKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_kind_1_0=ruleBehaviorKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_1_0, 
	        		"BehaviorKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_behaviorName_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEntryRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0(), "behaviorName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"behaviorName",
	        		lv_behaviorName_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDoRule
entryRuleDoRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoRuleRule(), currentNode); }
	 iv_ruleDoRule=ruleDoRule 
	 { $current=$iv_ruleDoRule.current; } 
	 EOF 
;

// Rule DoRule
ruleDoRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'do' 
    {
        createLeafNode(grammarAccess.getDoRuleAccess().getDoKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoRuleAccess().getKindBehaviorKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_kind_1_0=ruleBehaviorKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_1_0, 
	        		"BehaviorKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_behaviorName_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDoRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0(), "behaviorName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"behaviorName",
	        		lv_behaviorName_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleExitRule
entryRuleExitRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitRuleRule(), currentNode); }
	 iv_ruleExitRule=ruleExitRule 
	 { $current=$iv_ruleExitRule.current; } 
	 EOF 
;

// Rule ExitRule
ruleExitRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'exit' 
    {
        createLeafNode(grammarAccess.getExitRuleAccess().getExitKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExitRuleAccess().getKindBehaviorKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_kind_1_0=ruleBehaviorKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_1_0, 
	        		"BehaviorKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_behaviorName_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExitRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0(), "behaviorName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"behaviorName",
	        		lv_behaviorName_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Rule BehaviorKind
ruleBehaviorKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'Activity' 
	{
        $current = grammarAccess.getBehaviorKindAccess().getACTIVITYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBehaviorKindAccess().getACTIVITYEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'StateMachine' 
	{
        $current = grammarAccess.getBehaviorKindAccess().getSTATE_MACHINEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBehaviorKindAccess().getSTATE_MACHINEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'OpaqueBehavior' 
	{
        $current = grammarAccess.getBehaviorKindAccess().getOPAQUE_BEHAVIOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBehaviorKindAccess().getOPAQUE_BEHAVIOREnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


