/*
* generated by Xtext
*/
grammar InternalUmlTransition;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.papyrus.transition.editor.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.papyrus.transition.editor.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.papyrus.transition.editor.xtext.services.UmlTransitionGrammarAccess;

}

@parser::members {

 	private UmlTransitionGrammarAccess grammarAccess;
 	
    public InternalUmlTransitionParser(TokenStream input, IAstFactory factory, UmlTransitionGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/papyrus/transition/editor/xtext/parser/antlr/internal/InternalUmlTransition.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TransitionRule";	
   	}
   	
   	@Override
   	protected UmlTransitionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTransitionRule
entryRuleTransitionRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRuleRule(), currentNode); }
	 iv_ruleTransitionRule=ruleTransitionRule 
	 { $current=$iv_ruleTransitionRule.current; } 
	 EOF 
;

// Rule TransitionRule
ruleTransitionRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTransitionRuleAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_triggers_1_0=ruleEventRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"triggers",
	        		lv_triggers_1_0, 
	        		"EventRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTransitionRuleAccess().getCommaKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_triggers_3_0=ruleEventRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"triggers",
	        		lv_triggers_3_0, 
	        		"EventRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionRuleAccess().getGuardGuardRuleParserRuleCall_2_0(), currentNode); 
	    }
		lv_guard_4_0=ruleGuardRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"guard",
	        		lv_guard_4_0, 
	        		"GuardRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionRuleAccess().getEffectEffectRuleParserRuleCall_3_0(), currentNode); 
	    }
		lv_effect_5_0=ruleEffectRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"effect",
	        		lv_effect_5_0, 
	        		"EffectRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleEventRule
entryRuleEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventRuleRule(), currentNode); }
	 iv_ruleEventRule=ruleEventRule 
	 { $current=$iv_ruleEventRule.current; } 
	 EOF 
;

// Rule EventRule
ruleEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEventRuleAccess().getCallOrSignalEventRuleParserRuleCall_0(), currentNode); 
    }
    this_CallOrSignalEventRule_0=ruleCallOrSignalEventRule
    { 
        $current = $this_CallOrSignalEventRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventRuleAccess().getAnyReceiveEventRuleParserRuleCall_1(), currentNode); 
    }
    this_AnyReceiveEventRule_1=ruleAnyReceiveEventRule
    { 
        $current = $this_AnyReceiveEventRule_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventRuleAccess().getTimeEventRuleParserRuleCall_2(), currentNode); 
    }
    this_TimeEventRule_2=ruleTimeEventRule
    { 
        $current = $this_TimeEventRule_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventRuleAccess().getChangeEventRuleParserRuleCall_3(), currentNode); 
    }
    this_ChangeEventRule_3=ruleChangeEventRule
    { 
        $current = $this_ChangeEventRule_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleCallOrSignalEventRule
entryRuleCallOrSignalEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCallOrSignalEventRuleRule(), currentNode); }
	 iv_ruleCallOrSignalEventRule=ruleCallOrSignalEventRule 
	 { $current=$iv_ruleCallOrSignalEventRule.current; } 
	 EOF 
;

// Rule CallOrSignalEventRule
ruleCallOrSignalEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCallOrSignalEventRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementCrossReference_0(), "operationOrSignal"); 
	}

)
)
;





// Entry rule entryRuleAnyReceiveEventRule
entryRuleAnyReceiveEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnyReceiveEventRuleRule(), currentNode); }
	 iv_ruleAnyReceiveEventRule=ruleAnyReceiveEventRule 
	 { $current=$iv_ruleAnyReceiveEventRule.current; } 
	 EOF 
;

// Rule AnyReceiveEventRule
ruleAnyReceiveEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_isAReceiveEvent_0_0=	'all' 
    {
        createLeafNode(grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0(), "isAReceiveEvent"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnyReceiveEventRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAReceiveEvent", lv_isAReceiveEvent_0_0, "all", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleTimeEventRule
entryRuleTimeEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTimeEventRuleRule(), currentNode); }
	 iv_ruleTimeEventRule=ruleTimeEventRule 
	 { $current=$iv_ruleTimeEventRule.current; } 
	 EOF 
;

// Rule TimeEventRule
ruleTimeEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeEventRuleAccess().getRelativeTimeEventRuleParserRuleCall_0(), currentNode); 
    }
    this_RelativeTimeEventRule_0=ruleRelativeTimeEventRule
    { 
        $current = $this_RelativeTimeEventRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeEventRuleAccess().getAbsoluteTimeEventRuleParserRuleCall_1(), currentNode); 
    }
    this_AbsoluteTimeEventRule_1=ruleAbsoluteTimeEventRule
    { 
        $current = $this_AbsoluteTimeEventRule_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleRelativeTimeEventRule
entryRuleRelativeTimeEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelativeTimeEventRuleRule(), currentNode); }
	 iv_ruleRelativeTimeEventRule=ruleRelativeTimeEventRule 
	 { $current=$iv_ruleRelativeTimeEventRule.current; } 
	 EOF 
;

// Rule RelativeTimeEventRule
ruleRelativeTimeEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'after' 
    {
        createLeafNode(grammarAccess.getRelativeTimeEventRuleAccess().getAfterKeyword_0(), null); 
    }
(
(
		lv_expr_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getRelativeTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0(), "expr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelativeTimeEventRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleAbsoluteTimeEventRule
entryRuleAbsoluteTimeEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbsoluteTimeEventRuleRule(), currentNode); }
	 iv_ruleAbsoluteTimeEventRule=ruleAbsoluteTimeEventRule 
	 { $current=$iv_ruleAbsoluteTimeEventRule.current; } 
	 EOF 
;

// Rule AbsoluteTimeEventRule
ruleAbsoluteTimeEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'at' 
    {
        createLeafNode(grammarAccess.getAbsoluteTimeEventRuleAccess().getAtKeyword_0(), null); 
    }
(
(
		lv_expr_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getAbsoluteTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0(), "expr"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAbsoluteTimeEventRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleChangeEventRule
entryRuleChangeEventRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getChangeEventRuleRule(), currentNode); }
	 iv_ruleChangeEventRule=ruleChangeEventRule 
	 { $current=$iv_ruleChangeEventRule.current; } 
	 EOF 
;

// Rule ChangeEventRule
ruleChangeEventRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'when' 
    {
        createLeafNode(grammarAccess.getChangeEventRuleAccess().getWhenKeyword_0(), null); 
    }
(
(
		lv_exp_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getChangeEventRuleAccess().getExpSTRINGTerminalRuleCall_1_0(), "exp"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getChangeEventRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleGuardRule
entryRuleGuardRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGuardRuleRule(), currentNode); }
	 iv_ruleGuardRule=ruleGuardRule 
	 { $current=$iv_ruleGuardRule.current; } 
	 EOF 
;

// Rule GuardRule
ruleGuardRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getGuardRuleAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		lv_constraint_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getGuardRuleAccess().getConstraintSTRINGTerminalRuleCall_1_0(), "constraint"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGuardRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constraint",
	        		lv_constraint_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getGuardRuleAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleEffectRule
entryRuleEffectRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEffectRuleRule(), currentNode); }
	 iv_ruleEffectRule=ruleEffectRule 
	 { $current=$iv_ruleEffectRule.current; } 
	 EOF 
;

// Rule EffectRule
ruleEffectRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/' 
    {
        createLeafNode(grammarAccess.getEffectRuleAccess().getSolidusKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEffectRuleAccess().getKindBehaviorKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_kind_1_0=ruleBehaviorKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEffectRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_1_0, 
	        		"BehaviorKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_behaviorName_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEffectRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0(), "behaviorName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEffectRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"behaviorName",
	        		lv_behaviorName_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Rule BehaviorKind
ruleBehaviorKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'Activity' 
	{
        $current = grammarAccess.getBehaviorKindAccess().getACTIVITYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBehaviorKindAccess().getACTIVITYEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'StateMachine' 
	{
        $current = grammarAccess.getBehaviorKindAccess().getSTATE_MACHINEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBehaviorKindAccess().getSTATE_MACHINEEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'OpaqueBehavior' 
	{
        $current = grammarAccess.getBehaviorKindAccess().getOPAQUE_BEHAVIOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBehaviorKindAccess().getOPAQUE_BEHAVIOREnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


