--Author Manel Fredj-CEA LIST

library HelpersEdge;
import GeneralMappingsandHelpers;
import VisualIDs;

modeltype di2 uses 'http://www.papyrusuml.org/di2';
modeltype notation uses 'http://www.eclipse.org/gmf/runtime/1.0.2/notation';
modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';

mapping di2::GraphEdge::GraphEdge2Edge() : notation::Connector inherits di2::GraphElement::Element2View
{
	-----------------------------------------------------------------------
	--under an Edge "association"
	-----------------------------------------------------------------------
	--In the case that we have an association we will have:
		--1 edge with a xmi:type:="notation:Connector", a geneerated Id, type= "4001", a target and a source that includes:
			-- 6 "children" typed with decoration nodes 
			-- 1 "styles
			-- 1 element
			-- 1 bendpoints
			--1 sourceAnchor
			--1targetAnchor
	 -----------------------------------------------------------------------	
  
	--setting the type and children
	if (self.getElement() !=null)then{
	
			if (self.getElement().isGeneralization()=true) then {
	 			type := VisualId_Edge_Generalization;
	 			--adding children
				children := setChildrenForGeneralization();
			} endif;
	
			if (self.getElement().isAssociation()=true) then {
		 		type := VisualId_Edge_Association;
		 		--adding children
				children := setChildrenForAssociation();
			} endif;
	 
			if (self.getElement().isDependency()=true) then {
	 			type := VisualId_Edge_Dependency;
			 	--adding children
				children := setChildrenForDependency();
			} endif;
			if (self.getElement().isRealization()=true) then {
			 	type := VisualId_Edge_Realization;
			 	--adding children
				children := setChildrenForRealization();
			} endif;
			if (self.getElement().oclIsTypeOf(uml::Connector))then{
				type := VisualId_Edge_Link;
				--adding children
				children:=setChildrenForConnector();
			}endif;
	
	}else{
		--it is  a link
		type := VisualId_Edge_Link;
		element:=null;
	} endif;
	--setting the source and target Anchors
	var anchors:OrderedSet (di2::GraphConnector):= self.anchor;
	anchors->forEach (gc) {
		--log("the anchor is "+ gc.graphElement.repr());
		gc.graphElement;
	};			
	source := anchors->first().graphElement.oclAsType(di2::GraphNode).late resolveone(notation::Shape);
	target := anchors->last().graphElement.oclAsType(di2::GraphNode).late resolveone(notation::Shape);
	--adding style
	styles := setStyleForEdge();

	--adding element
		--already done in View

	--adding the bend points
	bendpoints := setBendpointsForEdge();

	--adding the source and target Anchor	
	sourceAnchor := setSourceAnchor();
	targetAnchor := setTargetAnchor();	
}
    
    
--Helpers related to an Edge
--------------------------------


--generic helper for an edge with two children
--takes as input the visual ids of the the two children

helper setChildrenForEdge2Children(in VisualId1: String, in VisualId2: String): OrderedSet(notation::Node)
{    
	
 
	var child1 := object notation::DecorationNode {
		--the id is set automatically
		type := VisualId1;
		layoutConstraint := object notation::Location {
			y := 40;
		};
	};
	--second child	
	var child2 :=object notation::DecorationNode {
		--the id is set automatically
		type := VisualId2;
		layoutConstraint := object notation::Location {
			y := 60;
		};
	};
	return OrderedSet {child1,child2};
}

helper setChildrenForRealization(): OrderedSet(notation::Node)
{    
	-- <children xmi:type="notation:DecorationNode"  type="6012">
    --   <layoutConstraint xmi:type="notation:Location"  y="40"/>
    -- </children>
    --  <children xmi:type="notation:DecorationNode" type="6013">
    --    <layoutConstraint xmi:type="notation:Location" y="60"/>
    -- </children>
 	return setChildrenForEdge2Children(VisualId_DecoNodeRealiz1, VisualId_DecoNodeRealiz2);
	
}

helper setChildrenForDependency(): OrderedSet(notation::Node)
{    
	  --<children xmi:type="notation:DecorationNode" type="6026">
      --  <layoutConstraint xmi:type="notation:Location" y="40"/>
     -- </children>
     -- <children xmi:type="notation:DecorationNode" type="6027">
     --   <layoutConstraint xmi:type="notation:Location" y="60"/>
     -- </children>
 	return setChildrenForEdge2Children(VisualId_DecoNodeDepend1, VisualId_DecoNodeDepend2);
	
}

helper setChildrenForGeneralization(): OrderedSet(notation::Node)
{    
	 --<children xmi:type="notation:DecorationNode"  type="6007">
      --  <layoutConstraint xmi:type="notation:Location"  y="40"/>
     --</children>
 
	var child1 := object notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNodeGeneralization;
		layoutConstraint := object notation::Location {
			y := 40;
		};
	};
	
	return OrderedSet {child1};
}



helper setChildrenForConnector(): OrderedSet(notation::Node)
{    
	 --<children xmi:type="notation:DecorationNode"   type="6025">
     -- <layoutConstraint xmi:type="notation:Location"  y="60"/>
     --</children>
 
	var child1 := object notation::DecorationNode {
		--the id is set automatically
		type := VisualId_Edge_Connector_Child;
		layoutConstraint := object notation::Location {
			y := 60;
		};
	};
	
	return OrderedSet {child1};
}
    
    
    
    
helper setChildrenForAssociation(): OrderedSet(notation::Node)
{
	--<children xmi:type="notation:DecorationNode" type="6001">
    --    <layoutConstraint xmi:type="notation:Location" y="-20"/>
    -- </children>
    
    -- <children xmi:type="notation:DecorationNode" type="6002">
    --    <layoutConstraint xmi:type="notation:Location" y="20"/>
    -- </children>
    
    --<children xmi:type="notation:DecorationNode" 4fE2FhZBg" type="6003">
    --    <layoutConstraint xmi:type="notation:Location"  y="-20"/>
    -- </children>
    
    -- <children xmi:type="notation:DecorationNode" type="6005">
    --    <layoutConstraint xmi:type="notation:Location" y="20"/>
    -- </children>
    
    -- <children xmi:type="notation:DecorationNode" g" type="6033">
    --    <layoutConstraint xmi:type="notation:Location" y="20"/>
    -- </children>
    
    -- <children xmi:type="notation:DecorationNode" type="6034">
    --    <layoutConstraint xmi:type="notation:Location" y="-20"/>
    -- </children>   
    
	--first child	
	var child1 := object notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNode1;
		layoutConstraint := object notation::Location {
			y := -20;
		};
	};

	--second child	
	var child2 :=object notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNode2;
		layoutConstraint := object notation::Location {
			y := 20;
		};
	};
	
	--third child	includes operations
	var child3 := object  notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNode3;
		layoutConstraint := object notation::Location {
			y := -20;
		};
	};

	--fourth child	
	var child4 := object  notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNode4;
		layoutConstraint := object notation::Location {
			y := 20;
		};
	};
	
	--fifth child	
	var child5 := object notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNode5;
		layoutConstraint := object notation::Location{
			y := 20;
		};
	};
						
	--sixth child	
	var child6 := object notation::DecorationNode {
		--the id is set automatically
		type := VisualId_DecoNode6;
		layoutConstraint := object notation::Location {
			y := -20;
		};
	};					
						
	--add the set of children to the node
	return OrderedSet {
		child1, child2, child3, child4, child5, child6
	};
}


helper setStyleForEdge() : OrderedSet(notation::Style)
{
	--<styles xmi:type="notation:FontStyle" fontName="Sans Serif"/>
	var style := object notation::FontStyle {
		--the id is set automatically
		--fontName="Sans Serif";
	};

	return OrderedSet{style};
}

helper setSourceAnchor() : notation::Anchor
{
	return object notation::IdentityAnchor { };
}


helper setTargetAnchor():notation::Anchor
{
	return object notation::IdentityAnchor { };
}


helper setBendpointsForEdge():notation::RelativeBendpoints
{
	--<bendpoints xmi:type="notation:RelativeBendpoints" points="[-7, -2, 323, 58]$[-282, -65, 48, -5]"/>
	// var pts : notation::RelativeBendpointList;
 	// var bendpoints:=object notation::RelativeBendpoints { };
	var bendpoints := createBendpoints().oclAsType (notation::RelativeBendpoints);
	
	return bendpoints;
}

