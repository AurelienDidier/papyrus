
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT 
	 */
	public Point createPointFromString(EDataType eDataType, String initialValue) {
		//return (Point)super.createFromString(eDataType, initialValue);
		if (initialValue == null) return null;
		java.util.StringTokenizer st = new java.util.StringTokenizer(initialValue,":");
		return new Point(new Double(st.nextToken()).doubleValue(),new Double(st.nextToken()).doubleValue());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String convertPointToString(EDataType eDataType, Object instanceValue) {
		//return super.convertToString(eDataType, instanceValue);
		if (instanceValue == null) return null;
		
		return ""+ ((Point) (instanceValue)).x+":"+((Point) (instanceValue)).y;
		
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public Dimension createDimensionFromString(EDataType eDataType, String initialValue) {
		//return (Dimension)super.createFromString(eDataType, initialValue);
		if (initialValue == null) return null;
		java.util.StringTokenizer st = new java.util.StringTokenizer(initialValue,":");
		return new Dimension(new Integer(st.nextToken()).intValue(),new Integer(st.nextToken()).intValue());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String convertDimensionToString(EDataType eDataType, Object instanceValue) {
		//return super.convertToString(eDataType, instanceValue);
		if (instanceValue == null) return null;
		
		return ""+ ((Dimension) (instanceValue)).width+":"+((Dimension) (instanceValue)).height;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public RGB createRGBFromString(EDataType eDataType, String initialValue) {
		//return (RGB)super.createFromString(eDataType, initialValue);
		if (initialValue == null) return null;
		java.util.StringTokenizer st = new java.util.StringTokenizer(initialValue,":");
		return new RGB(new Integer(st.nextToken()).intValue(),new Integer(st.nextToken()).intValue(),new Integer(st.nextToken()).intValue());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String convertRGBToString(EDataType eDataType, Object instanceValue) {
		//return super.convertToString(eDataType, instanceValue);
		if (instanceValue == null) return null;

		return ""+ ((RGB) (instanceValue)).red+":"+((RGB) (instanceValue)).green+":"+((RGB) (instanceValue)).blue;
	}
	
	
	
	////////////////// 
	//getType of Diagram
	/////////////////////
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @NOT generated
	 */
	public String getType() {
		if (this.type.equals("") ||this.type==null){
			return "ClassDiagram";
		}
		return this.type;
	}
	
	
	///////////////////////////////////////////////////////////////////////////
	// Diagram Image....
	///////////////////////////////////////////////////////////////////////////
	/**
	 * This returns Diagram.gif.
	 * <!-- begin-user-doc -->
	 * TODO code modified by RS for specific diagram display in di2.edit -> DiagramItemProvider
	 * <!-- end-user-doc -->
	 */
	@Override
	public Object getImage(Object object) {
		String typeDiagram = ((Diagram)object).getType();
		if(typeDiagram == null) {
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram"));
		}
		if( typeDiagram.equals("ActivityDiagram")){
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram_ActivityDiagram"));
		}
		if( typeDiagram.equals("ClassDiagram")){
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram_ClassDiagram"));
		}
		if( typeDiagram.equals("CompositeStructureDiagram")){
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram_CompositeStructureDiagram"));
		}
		if( typeDiagram.equals("DeploymentDiagram")){
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram_DeploymentDiagram"));
		}
		if( typeDiagram.equals("StateMachineDiagram")){
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram_StateMachineDiagram"));
		}
		if( typeDiagram.equals("UseCaseDiagram")){
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram_UseCaseDiagram"));
		}
	
			return overlayImage(object, getResourceLocator().getImage("full/obj16/Diagram"));
	
	}
	
	
	