--Author Ansgar Radermacher - CEA LIST
library ProfileDiagram;

import Converter.Utils.ConverterLibs;
import ProfileDiagVisualIDs;
import GeneralMappingsandHelpers;


modeltype di2 uses 'http://www.papyrusuml.org/di2';
modeltype notation uses 'http://www.eclipse.org/gmf/runtime/1.0.2/notation';
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';


mapping di2::GraphNode::profileDiagNode2Shape() : notation::Shape inherits di2::GraphNode::node2Shape
{
	--add 3 eAnnotations as in class diagram
	eAnnotations := setEAnnotations ();

	if (self.getElement().oclIsTypeOf(uml::Stereotype)) then {
		type := VisualId_Stereotype;
	  	children := setChildrenForStereotype(self);
	} endif;
	if (self.getElement().oclIsTypeOf(uml::ElementImport)) then {
		// TODO: in Papyrus 1, meta-classes refer to element imports, but not all element imports are meta-classes
		type := VisualId_Metaclass;
	  	children := setChildrenForMetaclass(self);
	  	// replace element import by meta-class reference
	    element := self.getSemanticModel().getMetaclassRef().oclAsType(ecore::EObject);
	} endif;
	if (self.getElement().oclIsTypeOf(uml::Comment)) then {
		type := VisualId_Comment;
	  	children := setChildrenForComment(self);
	} endif;
	if (self.getElement().oclIsTypeOf(uml::Package)) then {
		type := VisualId_Package;
	  	children := setChildrenForPackage(self);
	} endif;
	if (self.getElement().oclIsTypeOf(uml::Profile)) then {
		type := VisualId_Profile;
	  	children := setChildrenForProfile(self);
	} endif;
	if (self.getElement().oclIsTypeOf(uml::DataType)) then {
		type := VisualId_DataType;
	  	children := setChildrenForDataType(self);
	} endif;
	if (self.getElement().oclIsTypeOf(uml::Enumeration)) then {
		type := VisualId_Enum;
	  	children := setChildrenForEnum(self);
	} endif;
}


---------------------------------------------------------------------------
--set children for stereotype

helper setChildrenForStereotype(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_Stereotype_DecoNode;
		--the id is set automatically
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type := VisualId_Stereotype_Label;
		styles := OrderedSet {
			object notation::SortingStyle { },
			object notation::FilteringStyle { }
		};
		layoutConstraint := object notation::Bounds {};
	};
	
	-- third child	
	var child3 := object notation::BasicCompartment {
		type := VisualId_Stereotype_Compartment;
		--set children as properties
		children:= setPropertiesForStereotype(node.contained);
		layoutConstraint := object notation::Bounds {};
	};
	
	return OrderedSet {
		child1, child2, child3
	};
}

--in contained attributes: properties or nested classes
helper setPropertiesForStereotype(in contained:OrderedSet(di2::DiagramElement)) : OrderedSet(notation::Node)
{
	var setOfChildren : OrderedSet(notation::Node); 
	--var child : notation::Node;	

	contained ->forEach (node|node.oclIsTypeOf(di2::GraphNode)) {									
		node.oclAsType(di2::GraphNode).contained->forEach (subNode|subNode.oclIsTypeOf(di2::GraphNode)) {	
			if(subNode.oclAsType(di2::GraphNode).getElement().oclIsTypeOf(uml::Property)) then {
				var child : notation::Shape := subNode.oclAsType(di2::GraphNode).map stereotype2Property();
				-- var child : notation::Shape;	
				setOfChildren += child;
			} endif;
		};
	};								

	return setOfChildren;
}

-----------------------------------------------------------------------------
-- case of properties
mapping di2::GraphNode::stereotype2Property() : notation::Shape  {

	type := VisualId_StereotypeProperty;
	
	--set element	
	element := self.getElement().oclAsType(ecore::EObject);
	
	--set size and width and high 
	layoutConstraint := object notation::Bounds {
		var size : notation::Size :=  self.size.map dimension2Size();
		var location : notation::Location := self.oclAsType(di2::GraphNode).position.map point2Location();
		x := location.x; 
		y := location.y; 		
		width := size.width;
		height := size.height; 
	};	
}


helper setChildrenForMetaclass(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_Metaclass_DecoNode;
		--the id is set automatically
	};

	return OrderedSet {
		child1
	};
}

helper setChildrenForComment(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_Comment_DecoNode;
		--the id is set automatically
	};
 
	return OrderedSet {
		child1
	};
}

helper setChildrenForProfile(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_Profile_DecoNode1;
	};
	var child2 := object notation::DecorationNode {
		type := VisualId_Profile_DecoNode2;
	 
		var containedElements : OrderedSet(di2::GraphNode) := node.getSubElementsOfPackage();
		containedElements->forEach (containedElement) {
			var shape : notation::Shape ::= containedElement.map profileDiagNode2Shape();		
			children += shape;
		};
	};
	
	return OrderedSet {
		child1, child2
	};
}

helper setChildrenForPackage(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_Package_DecoNode1;
	};
	var child2 := object notation::DecorationNode {
		type := VisualId_Package_DecoNode2;
		var containedElements : OrderedSet(di2::GraphNode) := node.getSubElementsOfPackage();
		containedElements->forEach (containedElement) {
			var shape : notation::Shape ::= containedElement.map profileDiagNode2Shape();		
			children += shape;
		};
	};
	
	return OrderedSet {
		child1, child2
	};
}

---------------------------------------------------------------------------
--set children for enumeration
helper setChildrenForEnum(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	var childrenOfStereotype: OrderedSet(notation::Node);
	
   --<children xmi:type="notation:DecorationNode" type="5156"/>

    --<children xmi:type="notation:BasicCompartment"  type="7073">
    -- <layoutConstraint xmi:type="notation:Bounds" />
   --</children>

	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_Enum_DecoNode;
		--the id is set automatically
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type := VisualId_Enum_BasicCompartment;
		children := getEnumLiterals(node);
		layoutConstraint := object notation::Bounds {};
	};
		
	childrenOfStereotype := OrderedSet {
		child1, child2
	};
	
	--convert edges in the composite 

	return  childrenOfStereotype;
}

--for enumeration literals
helper getEnumLiterals(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	var enumLiteralsShape : OrderedSet(notation::Node); 
	var enumLiterals : OrderedSet(ecore::EObject) := node.getEnumLiterals();
	enumLiterals->forEach (enumLiteral) {
		var enumLiteralShape := object notation::Shape {
			type := VisualId_EnumLiteral;
			--fontName="Sans Serif";
			--lineColor="0";
        	element := enumLiteral;
        	layoutConstraint := object notation::Location{};
		};
		enumLiteralsShape += enumLiteralShape;
	};
									
	return enumLiteralsShape;
}

helper setChildrenForDataType(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	-- first child	
	var child1 := object notation::DecorationNode {
		type := VisualId_DataType_DecoNode;
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type := VisualId_DataType_CompartmentAttr;
		--TODO set children
		layoutConstraint := object notation::Bounds {};
	};
	
	-- third child	
	var child3 := object notation::BasicCompartment {
		type := VisualId_DataType_CompartmentOper;
		--set children as properties
		--children:= setPropertiesForStereotype(node.contained);
		layoutConstraint := object notation::Bounds {};
	};
	
	return OrderedSet {
		child1, child2, child3
	};
}
