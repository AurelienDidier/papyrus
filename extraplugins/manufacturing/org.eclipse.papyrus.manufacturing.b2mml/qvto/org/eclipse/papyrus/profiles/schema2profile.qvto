modeltype XSD uses 'http://www.eclipse.org/xsd/2002/XSD';
modeltype UML uses 'http://www.eclipse.org/uml2/5.0.0/UML';

transformation schema2profile(in xsd : XSD, in umlMetamodel : UML, out uml: UML);

main() {
	var mainSchema := xsd.rootObjects()![XSD::XSDSchema];
	var mainProfile := mainSchema.map xsd2ProfileModel();
	Property.allInstances()->forEach(propertey){
		var declaredPropertyType : XSDTypeDefinition := propertey.invresolveone(XSDElementDeclaration).type;
		if (declaredPropertyType != null){
			if(declaredPropertyType.oclIsTypeOf(XSDComplexTypeDefinition)){
				propertey.type := declaredPropertyType.resolveone(Stereotype);
			}else if(declaredPropertyType.oclIsTypeOf(XSDSimpleTypeDefinition)){
				propertey.type := declaredPropertyType.resolveone(DataType);
			};
			if(propertey.type = null){
				var newType := declaredPropertyType.map simpleType2DataType();
				var nearestPackage := propertey.getNearestPackage();
				nearestPackage.packagedElement := nearestPackage.packagedElement->including(newType);
				propertey.type := newType
			};
			if(propertey.type = null){
				log("couldn't assign type for " + propertey.name);
			};
		}else{
			log("propertey.invresolveone(XSDElementDeclaration).type for " + propertey.name);
		};
	};
	var namedElementMetaclass := umlMetamodel.objects()[Class]->selectOne(name = "NamedElement").oclAsType(Class);
	//var packageImport := object PackageImport{importedPackage := umlMetamodel.rootObjects()![Package]};
	
	//Make all stereotypes extend NamedElement
	Profile.allInstances()->forEach(profile){
		var packageImport := profile.createPackageImport(umlMetamodel.rootObjects()![Package], VisibilityKind::public);
		profile.metamodelReference := packageImport;
		var extensions := profile.ownedStereotype.createExtension(namedElementMetaclass, true);
		profile.packagedElement := profile.packagedElement->union(extensions);
	}
}


property stereotypes : Set(Stereotype);

mapping XSDSchema::xsd2ProfileModel() : Profile{
	if (self.schemaLocation.find("-V0600-") != 0){
		name := self.schemaLocation.substring(self.schemaLocation.lastIndexOf("-V0600-") + 7, self.schemaLocation.lastIndexOf(".xsd") - 1);
	}else{
		name := "B2MML_Profile";
	};
	var subprofiles : Set(Profile) := self.contents[XSDInclude].resolvedSchema.map xsd2ProfileModel()->asSet();
	
	
	stereotypes := self.contents[XSDComplexTypeDefinition].map type2Stereotype()->asSet();
	
	
	var namedElementMetaclass := umlMetamodel.objects()[Class]->selectOne(name = "NamedElement").oclAsType(Class);
	var extensions := stereotypes->any(true).createExtension(namedElementMetaclass, true);
	
	packagedElement := subprofiles.oclAsType(PackageableElement)
							->union(stereotypes);
							//->union(extensions);
	end{
		//self.setAttributeTypes(stereotypes.oclAsType(Set(Stereotype))->asSet());
		stereotypes.oclAsType(Set(Stereotype)).ownedAttribute.type;
	}
}

mapping XSDComplexTypeDefinition::type2Stereotype() : Stereotype{
	if(self.name != null){
		name := self.name.substring(1, self.name.lastIndexOf("Type")-1);
	}else{
		name := self.repr();
	};
	var properties : Set(XSDElementDeclaration) := self.allSubobjectsOfKind(XSDElementDeclaration)[XSDElementDeclaration]->asSet();
	if(properties != null and properties->notEmpty()){
		ownedAttribute := properties->map attribute2Property()->asSet();
	}
}

property counter : Integer = 1;
mapping XSDTypeDefinition::simpleType2DataType() : DataType{
	if(self.name != null){
		name := self.name.substring(1, self.name.lastIndexOf("Type")-1);
	}else{
		name := "UnnamedDataType" + counter.toString();
		counter := counter + 1
	};
}

mapping XSDElementDeclaration::attribute2Property() : Property{
	
	name := self.name.at(1).toLowerCase() + self.name.toString().substring(2,self.name.length());
	type := self.type.oclAsType(XSDComplexTypeDefinition).resolveone(Stereotype);
}

