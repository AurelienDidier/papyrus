<%@ jet package		=	"org.eclipse.papyrus.cpp.codegen.jet.util" 
	skeleton        =   "../../generator.skeleton" 
	imports			=	"org.eclipse.uml2.uml.* Cpp.* org.eclipse.papyrus.cpp.codegen.utils.*" 
	class			=	"CppStaticAttributeImplementation" 
%>
<%
//////////////////////////////////////////////////////////////////////////////////////////
// Java preparation
//////////////////////////////////////////////////////////////////////////////////////////

	// Retrieve the property
	Property currentAttribute			= (Property) argument;
	
	String attributeName	= currentAttribute.getName();
	String className		= GenUtils.qualifiedName (currentAttribute.getClass_());
	String typeName			= "";
	String suffix			= "";
	String multiple			= "";
	String isAgg			= ""; // attribute is an aggregation or association
	
	
	if (currentAttribute.getType() == null) {
		typeName	= "undefined"+" ";
	} else {
		typeName	= GenUtils.qualifiedName (currentAttribute.getType()) + " ";
	}
	
	// Multiple
	// if (currentAttribute.isMultiple()) {
		// multiple	= "*";
	// }
	
	// If attribute is aggregation then generate a pointer
	if (GenUtils.isAggregation(currentAttribute)) {
		// attributeName	= "(*"+attributeName+")"; // this produce a pointer on a tab
		isAgg	= "*";      // this produce a tab of pointers
	}
	
	Modifier modifier = new Modifier(currentAttribute);
	
	// Initial value
	if (currentAttribute.getDefaultValue() != null) {
		// via UML
		suffix = " = " + currentAttribute.getDefaultValue().stringValue();
	}
	else {
		CppDefault cppDefault = GenUtils.getApplication(currentAttribute, CppDefault.class);
		if (cppDefault != null) {
			suffix = " = " + cppDefault.getValue();
		}
	}
			
//////////////////////////////////////////////////////////////////////////////////////////
// The following part contains the template
//////////////////////////////////////////////////////////////////////////////////////////%>
<%= typeName %><%= multiple %><%= modifier.ptr %><%= isAgg %><%= modifier.ref %><%= className %>::<%= attributeName %><%= modifier.array %><%= suffix %>;
