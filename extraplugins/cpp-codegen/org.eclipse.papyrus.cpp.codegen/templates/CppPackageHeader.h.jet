<%@ jet package		=	"org.eclipse.papyrus.cpp.codegen.jet" 
	skeleton        =   "generator.skeleton" 
	imports			=	"org.eclipse.papyrus.cpp.codegen.utils.GenUtils Cpp.CppInclude Cpp.CppNoCodeGen org.eclipse.uml2.uml.* org.eclipse.uml2.uml.Package org.eclipse.emf.common.util.EList org.eclipse.papyrus.cpp.codegen.jet.util.* org.eclipse.papyrus.cpp.codegen.jet.doc.* java.util.Iterator java.util.Set java.util.HashSet org.eclipse.papyrus.cpp.codegen.Activator" 
 	class			=	"CppPackageHeader" 
%>
<%
//////////////////////////////////////////////////////////////////////////////////////////
// Java preparation
//////////////////////////////////////////////////////////////////////////////////////////
	
		// Retrieve the package
		Package currentPackage	= (Package) argument;
		Package fatherPackage	= currentPackage.getNestingPackage(); // return owner package

		// Get the package name
		String packageName		= currentPackage.getName();
		String packageFULLNAME	= GenUtils.getFullName (currentPackage).toUpperCase(); 
		String openNS			= GenUtils.openNS (currentPackage) + "namespace " + currentPackage.getName () + " {\n"; 
		String closeNS			= "} // of namespace" + currentPackage.getName () + "\n" + GenUtils.closeNS (currentPackage); 

		// Prepare the header declarations for this package
		String headerDecl		= "";
		CppInclude cppInclude =  GenUtils.getApplication(currentPackage, CppInclude.class);
		if (cppInclude != null) {
			headerDecl =  "// Include from CppInclude declaration" + NL + cppInclude.getHeader() + NL;
		}

		// Retrieve header file suffix
		String headerFileSuffix = Activator.getDefault().getPluginPreferences().getString("headSuffix");


		// Prepare Father include declaration
		String fatherPkgInclude	= "";
		if (fatherPackage != null) {
			// Create an util template to prepare the declaration
			CppOwnerPackageIncludeDeclaration jetPkgInclude		
			= new CppOwnerPackageIncludeDeclaration();
			// Execute the util template
			fatherPkgInclude		= jetPkgInclude.generate(fatherPackage);
		}


		// Prepare Dependency includes declarations ...
		// Retrieve package used by current package (dependencies)
		
		String		cFullName			= ""; // used in java to contruct and in template to read list

		// Get packages linked by dependencies
		EList<Package> usedPackages = GenUtils.getUsedPackages (currentPackage);
		Set<String>	usedPackagesNames = new HashSet<String>();
		// Add imported packages
		usedPackages.addAll(currentPackage.getImportedPackages());

		Iterator<Package> usedPackagesIt = usedPackages.iterator();
		Iterator<String> usedPackagesNamesIt;

		// Refactor as a new Set containing names to be declared for packages (with path)
		while(usedPackagesIt.hasNext()) {
			Package currentUsedPackage	= usedPackagesIt.next();
			String	cPackageName		= currentUsedPackage.getName();
			String  cPackagePath		= GenUtils.getFullPath (currentUsedPackage);

			cFullName					= cPackagePath+"/Pkg_"+cPackageName;				

			// Add this name to the set if codegen stereotype is not applied
			PackageImport packImport = currentPackage.getPackageImport(currentUsedPackage);
			if(!GenUtils.hasStereotype(packImport, CppNoCodeGen.class)) {
				if (!GenUtils.hasStereotype(currentUsedPackage, CppNoCodeGen.class)) {
					usedPackagesNames.add(cFullName);
				}
			}
		}

		// and prepare the Iterator for the template...
		usedPackagesNamesIt		= usedPackagesNames.iterator();



		// Prepare owned type and enum declaration
		String typeDef		= "";
		String enumDef		= "";

		Iterator<Type> typeIt		= currentPackage.getOwnedTypes().iterator();
		while (typeIt.hasNext()) {
			Type currentElt			= typeIt.next();
			if (!GenUtils.hasStereotype(currentElt, CppNoCodeGen.class)) {
				if (currentElt instanceof org.eclipse.uml2.uml.PrimitiveType) {

					PrimitiveType currentType	= (PrimitiveType) currentElt;
					CppPrimitiveTypeDefinition jetPrimitiveType	= new CppPrimitiveTypeDefinition();
					// Execute the util template
					typeDef			= typeDef+jetPrimitiveType.generate(currentType);

				} else if (currentElt instanceof org.eclipse.uml2.uml.Enumeration) {

					Enumeration currentEnum	= (Enumeration) currentElt;
					CppEnumerationDefinition jetEnum			= new CppEnumerationDefinition();
					// Execute the util template
					enumDef			= enumDef+jetEnum.generate(currentEnum);

				}
			}
		}
	
	
//////////////////////////////////////////////////////////////////////////////////////////
// The following part contains the template
//////////////////////////////////////////////////////////////////////////////////////////%>
#ifndef PKG_<%= packageFULLNAME %>
#define PKG_<%= packageFULLNAME %>

/************************************************************
              Pkg_<%= packageName %> package header
 ************************************************************/

<%= fatherPkgInclude %>
	
/* Package dependency header include                        */
<%	// For every depency linked package
	while(usedPackagesNamesIt.hasNext()) { 
		cFullName = (String) usedPackagesNamesIt.next();			%>
#include <<%= cFullName %>.<%= headerFileSuffix %>>
<%	}																%>

/* CppInclude header declarations insert                    */
<%= headerDecl %>

<%= openNS %>
/* Types Defined in the package                             */
<%= typeDef %>
<%= enumDef %>
<%= closeNS %>

/************************************************************
              End of Pkg_<%= packageName %> package header
 ************************************************************/

#endif
