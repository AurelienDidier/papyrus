
--Author Manel Fredj-CEA LIST

--import Converter.Utils.ElementType;
import ElementType;




modeltype di uses 'http://www.eclipse.org/papyrus/0.7.0/sashdi';
modeltype di2 uses 'http://www.papyrusuml.org/di2';
modeltype notation uses 'http://www.eclipse.org/gmf/runtime/1.0.2/notation';
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';


transformation Transfo(in src : di2, out target1 : notation, out target2:di);



-------------------------------------------------------------------------------------------------------------------------
----------------------------------------         QUERIES for notation             ---------------------------------------
-------------------------------------------------------------------------------------------------------------------------

// in Java already
--query di2::RGB::RGB2Int() : Integer
--{
-- 	return 0;
-- 	-- TODO: check the conversion form RGB to int
--}


query di2::GraphElement::getElement() : uml::Element
{
	var e : uml::Element := null;
	if (self.getSemanticModel() != null) then {
	 	e:=self.getSemanticModel().element;
	 	--log(" e is not null");
	} endif;
 	return e;
}



query di2::GraphElement::getSemanticModel() : di2::Uml1SemanticModelBridge
{
	var semanticModel : di2::Uml1SemanticModelBridge;
	if (self.oclIsTypeOf(di2::Diagram)) then {
		semanticModel := self.oclAsType(di2::Diagram).owner.oclAsType(di2::Uml1SemanticModelBridge); 
	}
	else {
		semanticModel := self.semanticModel.oclAsType(di2::Uml1SemanticModelBridge);
	} endif;
	return semanticModel;
}


query di2::Diagram::getDiagramtype() : String
{
	--assign a type to the diagram
	var type:String;
	switch {
		--class diagram
		case (self.type=ClassDiagram_P1) type:= ClassDiagram_P2.oclAsType(String);
		
		--composite diagram
		case (self.type=CompositeStructure_P1) type:=CompositeStructure_P2.oclAsType(String);
		
		--activity diagram
		case (self.type=ActivityDiagram_P1) type:=ActivityDiagram_P2.oclAsType(String); --TODO: check for papyrus 1 le type
		
		--sequence diagram
		case (self.type=SequenceDiagram_P1) type:= SequenceDiagram_P2.oclAsType(String);
		
		--component diagram
		case (self.type=ComponentDiagram_P1) type:=ComponentDiagram_P1.oclAsType(String);
		
		--if not specified
		case (self.type=null) type:=null;
		
		--any other case
		else type=null;
	};
			
	return type;
}


query di2::GraphNode::getOperations() : OrderedSet(ecore::EObject)
{
	return self.getSubElementsOfType("Operation");
}


query di2::GraphNode::getProperties() : OrderedSet(ecore::EObject)
{
	return self.getSubElementsOfType("Property");
}

query di2::GraphNode::getEnumLiterals() : OrderedSet(ecore::EObject)
{
	return self.getSubElementsOfType("EnumerationLiteral");
}

query di2::GraphNode::getSubElementsOfType(type : String) : OrderedSet(ecore::EObject)
{
	var containedSubElements : OrderedSet(ecore::EObject);
	var elem : uml::Element;
	
	self.contained->forEach (node|node.oclIsTypeOf(di2::GraphNode)) {
		
		if (node.oclAsType(di2::GraphNode).contained !=null) then
		{
			var contained:OrderedSet(di2::DiagramElement):=node.oclAsType(di2::GraphNode).contained;
			contained->forEach (op|op.oclIsTypeOf(di2::GraphNode)){
				elem := op.oclAsType(di2::GraphNode).semanticModel.oclAsType(di2::Uml1SemanticModelBridge).element;
				if (elem.metaClassName() = type) then {
					containedSubElements += elem.oclAsType(ecore::EObject);
				} endif;								
			};
		} endif;						
	};
	return containedSubElements;
}

query di2::GraphEdge::getAnchors()
{
	var anchors:OrderedSet (di2::GraphConnector):= self.anchor;
	anchors->forEach (gc) {
		--log("the anchor is " + gc.metaClassName());
	};
}