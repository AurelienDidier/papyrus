--Author Manel Fredj-CEA LIST
library CompositeStructureDiagram;

import Converter.Utils.ConverterLibs;
import  VisualIDs;
import ClassDiagram;
import GeneralMappingsandHelpers;


modeltype di2 uses 'http://www.papyrusuml.org/di2';
modeltype notation uses 'http://www.eclipse.org/gmf/runtime/1.0.2/notation';
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';


mapping di2::GraphNode::Graphnode2ShapeComposite() : notation::Shape inherits di2::GraphNode::Graphnode2Node 
{
	
	if (self.getElement().oclIsTypeOf(uml::Class)) then {
	
			type := VisualId_Class_Composite;
	}endif;
	
	fontHeight="8";
	lineColor="0";
	layoutConstraint := object notation::Bounds {
		var size : notation::Size :=
			self.size.map dimension2Size();
		var relativeLocation: notation::Location :=null;
		var location : notation::Location :=
			self.position.map point2Location();
		if (self.container.oclIsTypeOf(di2::GraphNode))then{
			relativeLocation:=self.container.position. map point2Location();
			x := location.x + relativeLocation.x;
			y := location.y + relativeLocation.y;
		}else{
			x := location.x; 
			y := location.y; 
		}endif;
		width := size.width;
		height := size.height; 
	};
	
	--adding 3 eAnnotations as in class diagram
	eAnnotations := setEAnnotations ();

	if (type = VisualId_Class_Composite) then {
		--adding children
	  	children := setChildrenForClassComposite(self);
		--adding style
	    styles := setStylesForClass();
	} endif;

	
}


---------------------------------------------------------------------------
--set children for composite class

helper setChildrenForClassComposite(in node : di2::GraphNode) : OrderedSet(notation::Node)
{
	var childrenofCompositeClass: OrderedSet(notation::Node);
	
   --<children xmi:type="notation:DecorationNode" type="5156"/>

    --<children xmi:type="notation:BasicCompartment"  type="7073">
    -- <layoutConstraint xmi:type="notation:Bounds" />
   --</children>

	-- first child	
	var child1 := object notation::DecorationNode {
		type:=VisualId_Class_Composite_Label;
		--the id is set automatically
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type:=VisualId_Class_Composite_Compartiment;
		--set children as properties
		children:= setPropertiesForCompositeClass(node.contained);
		layoutConstraint:=object notation::Bounds {};
	};
	
	
	childrenofCompositeClass := OrderedSet{child1, child2};
	
	
	--convert ports of contained classes 
	var childport:notation::Node;
	var itsparent:notation::Node;																
	node.contained ->forEach (elem|elem.oclIsTypeOf(di2::GraphNode)){
					if(elem.oclAsType(di2::GraphNode).getElement().oclIsTypeOf(uml::Port))
					then{
							childport := elem.oclAsType(di2::GraphNode).map Port2Shape();
							var temp: di2::DiagramElement:=elem.oclAsType(di2::GraphNode).getSemanticParent();
							itsparent:= temp.oclAsType(di2::GraphNode).resolveone (notation::Node);
							--add the child to the semantic parent
							itsparent.children+= childport;
														
					}endif;
	};			
	
	--convert edges in the composite 

	return  childrenofCompositeClass;
}




--in contrained attributes: properties or nested classes
helper setPropertiesForCompositeClass(in contained:OrderedSet(di2::DiagramElement)) : OrderedSet(notation::Node)
{
	var setOfChildren:OrderedSet(notation::Node); 
	var child:notation::Node;																
	contained ->forEach (node|node.oclIsTypeOf(di2::GraphNode)){
					if(node.oclAsType(di2::GraphNode).getElement().oclIsTypeOf(uml::Property))
					then{
							child := node.oclAsType(di2::GraphNode).map ComponentClass2Property();
							setOfChildren += child;
					}endif;
					if(node.oclAsType(di2::GraphNode).getElement().oclIsTypeOf(uml::Class))
					then{
							child := node.oclAsType(di2::GraphNode).map ComponentClass2Class(node.oclAsType(di2::GraphNode));
							setOfChildren += child;
					}endif;
	};								

	return setOfChildren;
}




-----------------------------------------------------------------------------
-- case of properties
mapping di2::GraphNode::ComponentClass2Property() : notation::Shape  {

	type := VisualId_Component_Property ;
	--seteAnnotation
	eAnnotations := setEAnnotations ();
	--setchildren
	children:=setChildrenForComponentProperty();	
	
	--set size and width and high 
	layoutConstraint := object notation::Bounds {
			var size : notation::Size :=  self.size.map dimension2Size();
			var location : notation::Location := self.oclAsType(di2::GraphNode).position.map point2Location();
			x := location.x; 
			y := location.y; 		
			width := size.width;
			height := size.height; 
		};	
	--set element	
	 element := self.getElement().oclAsType(ecore::EObject);
}  

helper setChildrenForComponentProperty() : OrderedSet(notation::Node)
{
	var children: OrderedSet(notation::Node);
	
      --<children xmi:type="notation:DecorationNode"     type="5126"/>
      --<children xmi:type="notation:BasicCompartment"   type="7077">
      --	<layoutConstraint xmi:type="notation:Bounds" />
      --</children>

	-- first child	
	var child1 := object notation::DecorationNode {
		type:=VisualId_Component_Property_Label;
		--the id is set automatically
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type:=VisualId_Component_Property_Compartiment;
		layoutConstraint:=object notation::Bounds {};
	};
	
	
	children := OrderedSet{child1, child2};
	--add the set of children to the node
	return  children;
}





-----------------------------------------------------------------------------
-- case of nested classes

mapping di2::GraphNode::ComponentClass2Class(in node:di2::GraphNode) : notation::Shape  {

	type := VisualId_Component_Class;
	--seteAnnotation
	eAnnotations := setEAnnotations ();
	--setchildren
	children:=setChildrenForComponentClass(node);	
	
	--set size and width and high 
	layoutConstraint := object notation::Bounds {
			var size : notation::Size :=  self.size.map dimension2Size();
			var location : notation::Location := self.oclAsType(di2::GraphNode).position.map point2Location();
			x := location.x; 
			y := location.y; 		
			width := size.width;
			height := size.height; 
		};	
	--set element	
	 element := self.getElement().oclAsType(ecore::EObject);
} 

helper setChildrenForComponentClass(in node:di2::GraphNode) : OrderedSet(notation::Node)
{
	var setofChildren: OrderedSet(notation::Node);
	
      --<children xmi:type="notation:DecorationNode"     type="5126"/>
      --<children xmi:type="notation:BasicCompartment"   type="7077">
      --	<layoutConstraint xmi:type="notation:Bounds" />
      --</children>

	-- first child	
	var child1 := object notation::DecorationNode {
		type:=VisualId_Component_Class_Label;
		--the id is set automatically
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type:=VisualId_Component_Class_Compartiment;
		
		--set children as properties in the case that the nested class contains properties
		children:= setPropertiesForCompositeClass(node.contained);
		layoutConstraint:=object notation::Bounds {};
	};
	
	
	setofChildren := OrderedSet{child1, child2};
	--add the set of children to the node
	return  setofChildren;
}






--------------------------------
--ports

mapping di2::GraphNode::Port2Shape() : notation::Shape  {

	type := VisualId_Port;
	--seteAnnotation
	eAnnotations := setEAnnotations ();
	--setchildren
	children:=setChildrenForPort();	
	--set size and width and high 
	layoutConstraint := object notation::Bounds {
			var size : notation::Size :=  self.size.map dimension2Size();
			var parentLocation: notation::Location :=null;
			var location : notation::Location := self.oclAsType(di2::GraphNode).position.map point2Location();
			var itsparent: di2::DiagramElement:=self.oclAsType(di2::GraphNode).getSemanticParent();
			parentLocation:=itsparent.oclAsType(di2::GraphNode).position. map point2Location();
			x := location.x - parentLocation.x;
			y := location.y - parentLocation.y;
			width := size.width;
			height := size.height; 
		};	
	--set element	
	 element := self.getElement().oclAsType(ecore::EObject);
}


helper setChildrenForPort() : OrderedSet(notation::Node)
{
	var setofchildren: OrderedSet(notation::Node);
	
      --<children xmi:type="notation:DecorationNode" xmi:id="_p5DiKOtSEd-dYdLgjrDxiA" type="5125">
      --  <layoutConstraint xmi:type="notation:Location" xmi:id="_p5DiKetSEd-dYdLgjrDxiA" x="25" y="3"/>
      --</children>
      --<children xmi:type="notation:DecorationNode" xmi:id="_p5DiKutSEd-dYdLgjrDxiA" type="6029">
      --  <layoutConstraint xmi:type="notation:Location" xmi:id="_p5DiK-tSEd-dYdLgjrDxiA" x="25" y="-10"/>
      --</children>

	-- first child	
	var child1 := object notation::DecorationNode {
		type:=VisualId_Port_child1;
		layoutConstraint:=object notation::Location {
					x:=25;
					y:=3;
		};
		--the id is set automatically
	};

	-- second child	
	var child2 := object notation::BasicCompartment {
		type:=VisualId_Port_child2;
		layoutConstraint:=object notation::Location {
				x:=25;
				y:=-10;
		};
	};
	
	
	setofchildren := OrderedSet{child1, child2};
	--add the set of children to the node
	return  setofchildren;
}