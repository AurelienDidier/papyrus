--Author Manel Fredj-CEA LIST
library Diagram;

import ClassDiagram;
import CompositeStructureDiagram;
import Edge;
import VisualIDs;
import NotationQueries;
import GeneralMappingsandHelpers;

modeltype di uses 'http://www.eclipse.org/papyrus/0.7.0/sashdi';
modeltype di2 uses 'http://www.papyrusuml.org/di2';
modeltype notation uses 'http://www.eclipse.org/gmf/runtime/1.0.2/notation';
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype uml uses 'http://www.eclipse.org/uml2/2.1.0/UML';



mapping di2::Diagram::diagram2diagram() : notation::Diagram inherits di2::GraphElement::Element2View
{
	--the id is set automatically
	--assign type
	type := self.getDiagramtype();
	--assign name
	name := self.name;

	--assign element
	measurementUnit := notation::MeasurementUnit::Pixel;

	--transform contained nodes
	if (type = ClassDiagram_P2)then{
		children := setChildrenForClassDiagram(self.contained);
	}endif;
		if (type = CompositeStructure_P2)then{
			children := setChildrenForCompositeDiagram(self.contained);
	}endif;
	
	-- transform contained edges
	edges := setEdgesForDiagram(self.contained);
	

	--Set Style of diagram
	styles := setStylesForDiagram();
}


--------------------------------------------------------------
--converting a composite diagram
helper setChildrenForCompositeDiagram(in contained:OrderedSet(di2::DiagramElement)) : OrderedSet(notation::Node)
{
	var setOfChildren:OrderedSet(notation::Node); 
	var child:notation::Node;
	var itsparent: notation::Shape;																	
	contained ->forEach (node|node.oclIsTypeOf(di2::GraphNode)){
					--case of containing a class
					if (node.oclAsType(di2::GraphNode).getElement().oclIsTypeOf(uml::Class) )then{
						child := node.oclAsType(di2::GraphNode).map Graphnode2ShapeComposite();
						setOfChildren += child;
					}endif;
					--case of containing a port : map the potr and attach it to the semantic parent
					if (node.oclAsType(di2::GraphNode).getElement().oclIsTypeOf(uml::Port) )then{
						child := node.oclAsType(di2::GraphNode).map Port2Shape();
						var temp: di2::DiagramElement:=node.oclAsType(di2::GraphNode).getSemanticParent();
						itsparent:= temp.oclAsType(di2::GraphNode).resolveone (notation::Shape);
						--add the child to the semantic parent
						itsparent.children+= child;
					}endif;
	};								

	return setOfChildren;
}
------------------------------------------------------------
--converting a class diagram 
helper setChildrenForClassDiagram(in contained:OrderedSet(di2::DiagramElement)) : OrderedSet(notation::Node)
{
	var setOfChildren:OrderedSet(notation::Node); 
	var child:notation::Node;																
	contained ->forEach (node|node.oclIsTypeOf(di2::GraphNode)){
					child := node.oclAsType(di2::GraphNode).map Graphnode2ShapeClass();
					setOfChildren += child;
	};								

	return setOfChildren;
}
----------------------------------------------------------------
--converting edges


helper setEdgesForDiagram (in contained : OrderedSet(di2::DiagramElement)) : OrderedSet (notation::Edge)
{
	var setofEdges : OrderedSet(notation::Edge); 
	var edge : notation::Edge;																
	contained->forEach (node|node.oclIsTypeOf(di2::GraphEdge)) {
			edge := node.oclAsType(di2::GraphEdge).map GraphEdge2Edge();
			setofEdges += edge;
	};
	contained->forEach (composite|composite.oclIsTypeOf(di2::GraphNode)){
						composite.oclAsType(di2::GraphNode).contained->forEach (elem|elem.oclIsTypeOf(di2::GraphEdge)) {
							edge := elem.oclAsType(di2::GraphEdge).map GraphEdge2Edge();
							setofEdges += edge;
						};
						composite.oclAsType(di2::GraphNode).contained->forEach (prop|prop.oclIsTypeOf(di2::GraphNode)) {
							prop.oclAsType(di2::GraphNode).contained->forEach (connect|connect.oclIsTypeOf(di2::GraphEdge)) {
								edge := connect.oclAsType(di2::GraphEdge).map GraphEdge2Edge();
								setofEdges += edge;
						};	
						
							
						};
						
				
	};
	
	return setofEdges;
}

--------------------------------
--Helpers related to a diagram

helper setStylesForDiagram() : OrderedSet (notation::Style)
{
	--<styles xmi:type="notation:DiagramStyle""/>

	var setofStyles : OrderedSet(notation::Style);
	var style := object notation::DiagramStyle{
		--the id is set automatically
	};

	setofStyles := OrderedSet{style};

	return setofStyles;	
}