<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?eclipse version="3.4"?><plugin>
  <extension point="org.eclipse.emf.validation.constraintProviders">
      <category id="org.eclipse.papyrus.umlrt.validation.umlrealtime" mandatory="false" name="org.eclipse.papyrus.umlrt.validation.umlrealtime"/>
      <constraintProvider cache="false" mode="Batch">
         <package namespaceUri="http://www.eclipse.org/papyrus/umlrt"/>
         <constraints categories="org.eclipse.papyrus.umlrt.validation.umlrealtime">
            <constraint id="isActiveEntity" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="Capsules are always active" severity="ERROR" statusCode="1">
               <message>Capsules are always active entities</message><![CDATA[base_Class.isActive]]></constraint>
            <constraint id="hasNoReception" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A capsule cannot have Reception features" severity="ERROR" statusCode="1">
               <message>A capsule cannot have features that are receptions</message><![CDATA[base_Class.ownedReception->isEmpty()]]></constraint>
            <constraint id="isNotFinal" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A capsule class can always be subclassed" severity="ERROR" statusCode="1">
               <message>Capsules can always be subclassed</message><![CDATA[not(base_Class.isFinalSpecialization)]]></constraint>
            <constraint id="noMultipleInheritance" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A capsule can have at most one superclass" severity="ERROR" statusCode="1">
               <message>Capsules can have at most one superclass</message><![CDATA[(base_Class.generalization->size()) <= 1]]></constraint>
            <constraint id="isSubstitutable" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="Capsule classes are always substitutable" severity="ERROR" statusCode="1">
               <message>Capsule classes are always substitutable</message><![CDATA[(base_Class.generalization->notEmpty()) implies (base_Class.generalization->forAll (g | g.isSubstitutable))]]></constraint>
            <constraint id="exactlyOneType" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="All attributes of a capsule class have exactly one type" severity="ERROR" statusCode="1">
               <message>All atributes of a capsule class must have exactly one type</message><![CDATA[base_Class.ownedAttribute->forAll(at | at.type->size() = 1)]]></constraint>
            <constraint id="featuresAreNotProtected" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="Private visibility is not supported on capsule features" severity="ERROR" statusCode="1">
               <message>No feature of a capsule can have private visibility</message><![CDATA[base_Class.feature->forAll (f | f.visibility <> UML::VisibilityKind::private)]]></constraint>
            <constraint id="hasNoNestedClassifier" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A capsule class cannot have nested classifiers" severity="ERROR" statusCode="1">
               <message>A capsule class cannot have nested classifiers</message><![CDATA[base_Class.nestedClassifier->isEmpty()]]></constraint>
            <constraint id="allOperationsSequential" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="All operations of a capsule are guarded" severity="ERROR" statusCode="1">
               <message>All operations of a capsule are sequential</message><![CDATA[base_Class.ownedOperation->notEmpty() implies 
   (base_Class.ownedOperation->forAll(op | op.concurrency = UML::CallConcurrencyKind::guarded))]]></constraint>
            <constraint id="atMostOneGeneralization" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="Protocols can have at most one generalization" severity="ERROR" statusCode="1">
               <message>Protocol classes can have at most one generalization</message><![CDATA[base_Collaboration.generalization->size() <= 1]]></constraint>
            <constraint id="noPublishName" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A wired port cannot publish its name" severity="ERROR" statusCode="1">
               <message>A wired port cannot publish its name</message><![CDATA[isWired implies not isPublish]]></constraint>
            <constraint id="publicPortIsService" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A public port must be defined as a service port" severity="ERROR" statusCode="1">
               <message>A public port must be defined as a service port</message><![CDATA[(base_Port.visibility = UML::VisibilityKind::public) 
    implies base_Port.isService  ]]></constraint>
            <constraint id="hasProtectedVisibility" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="A SAP (unwired &amp; unpublished) must have protected visibility " severity="ERROR" statusCode="1">
               <message>A SAP (unwired &amp; unpublished) must have protected visibility </message><![CDATA[(not isWired and not isPublish) 
   implies (base_Port.visibility = UML::VisibilityKind::protected)]]></constraint>
            <constraint id="havePublicVisibility" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="An SPP (unwired and published) must have public visibility" severity="ERROR" statusCode="1">
               <message>An SPP (unwired and published) must have public visibility</message><![CDATA[(not isWired and isPublish) implies 
   (base_Port.visibility = UML::VisibilityKind::public)]]></constraint>
            <constraint id="onlyBinaryConnectors" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="Only binary connectors are allowed" severity="ERROR" statusCode="1">
               <message>Only binary connectors allowed</message><![CDATA[base_Connector.end->size() = 2]]></constraint>
            <constraint id="exclusionOnlyOnUmlrt" isEnabledByDefault="true" lang="OCLpivot" mode="Batch" name="Exclusion can only be applied to some UML-RT model elements" severity="ERROR" statusCode="1">
               <message>Exclusion can only be applied to some UML-RT model elements</message><![CDATA[let el = base_RedefinableElement in
(el.oclIsKindOf(UML::Port) or
 el.oclIsKindOf(UML::Property) or
 el.oclIsKindOf(UML::Operation) or
 el.oclIsKindOf(UML::Behavior) or
 el.oclIsKindOf(UML::Region) or
 el.oclIsKindOf(UML::State) or
 el.oclIsKindOf(UML::StateMachine) or
 el.oclIsKindOf(UML::Transition))]]></constraint>
         </constraints>
      </constraintProvider>
   </extension>
<extension point="org.eclipse.emf.validation.constraintBindings">
      <clientContext id="CapsuleClientContext">
         <selector class="org.eclipse.papyrus.umlrt.validation.selectors.CapsuleClientSelector"/>
      </clientContext>
      <binding context="CapsuleClientContext">
         <constraint ref="org.eclipse.papyrus.umlrt.validation.isActiveEntity"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.hasNoReception"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.isNotFinal"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.noMultipleInheritance"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.isSubstitutable"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.exactlyOneType"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.featuresAreNotProtected"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.hasNoNestedClassifier"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.allOperationsSequential"/>
      </binding>
      <clientContext id="RTPortClientContext">
         <selector class="org.eclipse.papyrus.umlrt.validation.selectors.RTPortClientSelector"/>
      </clientContext>
      <binding context="RTPortClientContext">
         <constraint ref="org.eclipse.papyrus.umlrt.validation.noPublishName"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.publicPortIsService"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.hasProtectedVisibility"/>
         <constraint ref="org.eclipse.papyrus.umlrt.validation.havePublicVisibility"/>
      </binding>
      <clientContext id="RTRedefinedElementClientContext">
         <selector class="org.eclipse.papyrus.umlrt.validation.selectors.RTRedefinedElementClientSelector"/>
      </clientContext>
      <binding context="RTRedefinedElementClientContext">
         <constraint ref="org.eclipse.papyrus.umlrt.validation.exclusionOnlyOnUmlrt"/>
      </binding>
      <clientContext id="ProtocolClientContext">
         <selector class="org.eclipse.papyrus.umlrt.validation.selectors.ProtocolClientSelector"/>
      </clientContext>
      <binding context="ProtocolClientContext">
         <constraint ref="org.eclipse.papyrus.umlrt.validation.atMostOneGeneralization"/>
      </binding>
      <clientContext id="RTConnectorClientContext">
         <selector class="org.eclipse.papyrus.umlrt.validation.selectors.RTConnectorClientSelector"/>
      </clientContext>
      <binding context="RTConnectorClientContext">
         <constraint ref="org.eclipse.papyrus.umlrt.validation.onlyBinaryConnectors"/>
      </binding>
   </extension>
</plugin>
