<?xml version="1.0" encoding="UTF-8" standalone="no"?><?eclipse version="3.4"?>
<plugin>
<extension point="org.eclipse.emf.validation.constraintProviders"><category id="org.eclipse.papyrus.umlrt.validation.umlrealtime" mandatory="false" name="UML RealTime Validation"/><constraintProvider cache="false" mode="Batch"><package namespaceUri="http:///schemas/UMLRealTime/_iXHNMNgxEeKmBIMLIFUmag/0"/><constraints categories="org.eclipse.papyrus.umlrt.validation.umlrealtime"><constraint id="isActiveEntity" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Capsules are always active entities" severity="ERROR" statusCode="1"><message>Capsules are always active entities</message><![CDATA[self.base_Class.isActive]]></constraint><constraint id="hasNoReception" isEnabledByDefault="true" lang="OCL" mode="Batch" name="A capsule cannot have features that are receptions" severity="ERROR" statusCode="1"><message>A capsule cannot have features that are receptions</message><![CDATA[self.base_Class.ownedReception->isEmpty()]]></constraint><constraint id="isNotFinal" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Capsules can always be subclassed" severity="ERROR" statusCode="1"><message>Capsules can always be subclassed</message><![CDATA[not (self.base_Class.isFinalSpecialization)]]></constraint><constraint id="noMultipleInheritance" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Capsules can have at most one superclass" severity="ERROR" statusCode="1"><message>Capsules can have at most one superclass</message><![CDATA[(self.base_Class.generalization->size()) <= 1]]></constraint><constraint id="isSubstitutable" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Capsule classes are always substitutable" severity="ERROR" statusCode="1"><message>Capsule classes are always substitutable</message><![CDATA[(self.base_Class.generalization->notEmpty()) implies (self.base_Class.generalization->forAll (g | g.isSubstitutable))]]></constraint><constraint id="exactlyOneType" isEnabledByDefault="true" lang="OCL" mode="Batch" name="All atributes of a capsule class must have exactly one type" severity="ERROR" statusCode="1"><message>All atributes of a capsule class must have exactly one type</message><![CDATA[base_Class.ownedAttribute->forAll (at | at.type->size() = 1)]]></constraint><constraint id="hasMsgAttribute" isEnabledByDefault="true" lang="OCL" mode="Batch" name="A capsule with behavior has a local variable named &quot;msg&quot;" severity="ERROR" statusCode="1"><message>A capsule with behavior has a local variable named "msg"</message><![CDATA[(base_Class.classifierBehavior->notEmpty()) implies (base_Class.ownedAttribute->exists (at | at.name = 'msg'))]]></constraint><constraint id="hasNoNestedClassifier" isEnabledByDefault="true" lang="OCL" mode="Batch" name="A capsule class cannot have nested classifiers" severity="ERROR" statusCode="1"><message>A capsule class cannot have nested classifiers</message><![CDATA[base_Class.nestedClassifier->isEmpty()]]></constraint><constraint id="featuresAreNotProtected" isEnabledByDefault="true" lang="OCL" mode="Batch" name="No feature of a capsule can have private visibility" severity="ERROR" statusCode="1"><message>No feature of a capsule can have private visibility</message><![CDATA[base_Class.feature->forAll (f | f.visibility->notEmpty() implies (f.visibility <> uml::VisibilityKind::private))]]></constraint><constraint id="allAttributesProtected" isEnabledByDefault="true" lang="OCL" mode="Batch" name="All capsule variables can only have protected visibility" severity="ERROR" statusCode="1"><message>All capsule variables can only have protected visibility</message><![CDATA[base_Class.ownedAttribute->forAll (at | not (at.oclIsKindOf(uml::Port)) implies (at.visibility = uml::VisibilityKind::protected) )]]></constraint><constraint id="allOperationsProtected" isEnabledByDefault="true" lang="OCL" mode="Batch" name="All capsule operations must have protected visibility" severity="ERROR" statusCode="1"><message>All capsule operations must have protected visibility</message><![CDATA[base_Class.ownedOperation->forAll (op | op.visibility = uml::VisibilityKind::protected)]]></constraint><constraint id="featuresAreNotPrivate" isEnabledByDefault="true" lang="OCL" mode="Batch" name="No capsule feature can have private visibility" severity="ERROR" statusCode="1"><message>No capsule feature can have private visibility</message><![CDATA[base_Class.feature->forAll (f | f.visibility <> uml::VisibilityKind::private)]]></constraint><constraint id="combinedStateMachineRestriction" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Combined state machine restrictions for capsules" severity="ERROR" statusCode="1"><message>Combined state machine restrictions for capsules</message><![CDATA[let sm = base_Class.classifierBehavior in
sm->notEmpty() implies 
    (sm.oclIsTypeOf(uml::StateMachine) and -- only state machines behaviors
     (not sm.isReentrant) and                        -- no re-entrant behavior
     (not sm.ownedParameter->isEmpty()) and -- no parameters
     sm.region->size() = 1)                                -- single region only]]></constraint><constraint id="sapIsProtected" isEnabledByDefault="true" lang="OCL" mode="Batch" name="SAPs (unwired unpublished) must have protected visibility" severity="ERROR" statusCode="1"><message>SAPs (unwired unpublished) must have protected visibility</message><![CDATA[let saps = base_Class.ownedPort->select(p | not p.isService) in
     (saps->notEmpty()) implies 
         saps->forAll (s | s.visibility = uml::VisibilityKind::public) ]]></constraint><constraint id="allOperationsSequential" isEnabledByDefault="true" lang="OCL" mode="Batch" name="All operations of a capsule are sequential" severity="ERROR" statusCode="1"><message>All operations of a capsule are sequential</message><![CDATA[base_Class.ownedOperation->notEmpty() implies 
     (base_Class.ownedOperation->forAll (
          op | op.concurrency = uml::CallConcurrencyKind::sequential))]]></constraint><constraint id="atMostOneGeneralization" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Protocol classes can have at most one generalization" severity="ERROR" statusCode="1"><message>Protocol classes can have at most one generalization</message><![CDATA[base_Collaboration.generalization->size() <= 1]]></constraint><constraint id="onlyBinaryConnectors" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Only binary connectors allowed" severity="ERROR" statusCode="1"><message>Only binary connectors allowed</message><![CDATA[base_Connector.end->size() = 2]]></constraint><constraint id="connectorsMustConnectPorts" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Connectors can only connect two Ports" severity="ERROR" statusCode="1"><message>Connectors can only connect two Ports</message><![CDATA[base_Connector.end->forAll (e | e.role.oclIsTypeOf(uml::Port))]]></constraint><constraint id="wiredPortsMustBeService" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Wired ports must be declared service" severity="ERROR" statusCode="1"><message>Wired ports must be declared service</message><![CDATA[isWired implies base_Port.isService]]></constraint><constraint id="unwiredUnpublishedPortsCannotBeService" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Unwired &amp; unpublished ports cannot be service" severity="ERROR" statusCode="1"><message>Unwired &amp; unpublished ports cannot be service</message><![CDATA[(not (isWired or isPublish)) implies (not base_Port.isService)]]></constraint><constraint id="unwiredPublishedPortsMustBeService" isEnabledByDefault="true" lang="OCL" mode="Batch" name="Unwired &amp; published ports must be service" severity="ERROR" statusCode="1"><message>Unwired &amp; published ports must be service</message><![CDATA[((not isWired) and isPublish) implies base_Port.isService]]></constraint></constraints></constraintProvider></extension><extension point="org.eclipse.emf.validation.constraintBindings"><clientContext id="RTConnectorClientContext"><selector class="org.eclipse.papyrus.umlrt.validation.clientselector.RTConnectorClientSelector"/></clientContext><binding context="RTConnectorClientContext"><constraint ref="org.eclipse.papyrus.umlrt.validation.onlyBinaryConnectors"/><constraint ref="org.eclipse.papyrus.umlrt.validation.connectorsMustConnectPorts"/></binding><clientContext id="ProtocolClientContext"><selector class="org.eclipse.papyrus.umlrt.validation.clientselector.ProtocolClientSelector"/></clientContext><binding context="ProtocolClientContext"><constraint ref="org.eclipse.papyrus.umlrt.validation.atMostOneGeneralization"/></binding><clientContext id="RTPortClientContext"><selector class="org.eclipse.papyrus.umlrt.validation.clientselector.RTPortClientSelector"/></clientContext><binding context="RTPortClientContext"><constraint ref="org.eclipse.papyrus.umlrt.validation.wiredPortsMustBeService"/><constraint ref="org.eclipse.papyrus.umlrt.validation.unwiredUnpublishedPortsCannotBeService"/><constraint ref="org.eclipse.papyrus.umlrt.validation.unwiredPublishedPortsMustBeService"/></binding><clientContext id="CapsuleClientContext"><selector class="org.eclipse.papyrus.umlrt.validation.clientselector.CapsuleClientSelector"/></clientContext><binding context="CapsuleClientContext"><constraint ref="org.eclipse.papyrus.umlrt.validation.isActiveEntity"/><constraint ref="org.eclipse.papyrus.umlrt.validation.hasNoReception"/><constraint ref="org.eclipse.papyrus.umlrt.validation.isNotFinal"/><constraint ref="org.eclipse.papyrus.umlrt.validation.noMultipleInheritance"/><constraint ref="org.eclipse.papyrus.umlrt.validation.isSubstitutable"/><constraint ref="org.eclipse.papyrus.umlrt.validation.exactlyOneType"/><constraint ref="org.eclipse.papyrus.umlrt.validation.hasMsgAttribute"/><constraint ref="org.eclipse.papyrus.umlrt.validation.hasNoNestedClassifier"/><constraint ref="org.eclipse.papyrus.umlrt.validation.featuresAreNotProtected"/><constraint ref="org.eclipse.papyrus.umlrt.validation.allAttributesProtected"/><constraint ref="org.eclipse.papyrus.umlrt.validation.allOperationsProtected"/><constraint ref="org.eclipse.papyrus.umlrt.validation.featuresAreNotPrivate"/><constraint ref="org.eclipse.papyrus.umlrt.validation.combinedStateMachineRestriction"/><constraint ref="org.eclipse.papyrus.umlrt.validation.sapIsProtected"/><constraint ref="org.eclipse.papyrus.umlrt.validation.allOperationsSequential"/></binding></extension></plugin>
