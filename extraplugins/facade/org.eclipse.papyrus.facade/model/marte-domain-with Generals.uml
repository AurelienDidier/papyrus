<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmi:id="_bnVcQYB8EeCjWKV1YmQ1aA" name="marteDomain">
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGB4IukEeCrt4LXEOI4YA" name="UsageDemand">
    <ownedComment xmi:id="_vuACoJ2TEeCg6sqGpS8R3g">
      <body>A UsageDemand represents the dynamic mechanism that effectively requires the usage of the resource.

The concept of UsageDemand represents the dynamic mechanism that effectively requires the usage of the resource. It links events (that can come from the external environment to concrete usages of the resources described in the model under consideration.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo8IukEeCrt4LXEOI4YA" name="SendFlowAction">
    <ownedComment xmi:id="_vuJzoJ2TEeCg6sqGpS8R3g">
      <body>A SendFlowAction is an action that sends a flow to other connected components. In that case, connected component ports indicate that they accept this type of flow in input.

This action sends a data flow to other connected components, which accept this type of flow in input. An asynchronous and &amp;#226;&amp;#8364;&amp;#339;fire and forget&amp;#226;&amp;#8364;&amp;#65533; communication mode is used: the caller does not wait for data transmission to be completed and acknowledged to continue its execution.</body>
    </ownedComment>
    <generalization xmi:id="_BQufIIukEeCrt4LXEOI4YA" general="_BOYVwYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo8YukEeCrt4LXEOI4YA" name="ComputingResource">
    <ownedComment xmi:id="_vuJzoZ2TEeCg6sqGpS8R3g">
      <body>A ComputingResource represents either virtual or physical processing devices capable of storing and executing program code. Hence its fundamental service is to compute.

A ComputingResource represents either virtual or physical processing devices capable of storing and executing program code. Hence its fundamental service is to compute, which in fact means to change the values of data without changing their location. It is active and protected.</body>
    </ownedComment>
    <generalization xmi:id="_BQ9IoYukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo8oukEeCrt4LXEOI4YA" name="CommunicationChannel">
    <ownedComment xmi:id="_vuJzop2TEeCg6sqGpS8R3g">
      <body>A logical communications layer connecting SchedulableResources.

</body>
    </ownedComment>
    <generalization xmi:id="_BQxicYukEeCrt4LXEOI4YA" general="_BOPL0oukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo84ukEeCrt4LXEOI4YA" name="DynamicUsage">
    <ownedComment xmi:id="_vuJzo52TEeCg6sqGpS8R3g">
      <body>A DynamicUsage represents the sequence or causal flow of usages that may occur in response to a UsageDemand.

A DynamicUsage represents the sequence or causal flow of usages that may occur in response to a UsageDemand. It is a kind of behavior, whose actions make use of one or more resources along its execution. A few concrete forms of usage are defined at this level of specification; those are aimed to represent the consumption of memory, the time taken from a CPU, the energy from a power supply and the number of bytes to be sent through a network.</body>
    </ownedComment>
    <generalization xmi:id="_BP9qIYukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo9IukEeCrt4LXEOI4YA" name="PExecutionStep">
    <ownedComment xmi:id="_vuJzpJ2TEeCg6sqGpS8R3g">
      <body>

A PExecutionStep represents an Operation or an Action. It consists of sequential host execution, possibly interspersed with requests (assumed blocking) to services. At this level of granularity the order of these is unspecified (any order may be assumed). To specify the order, the Step can be refined. Demands for resources are made in an undetermined order during the PStep. Each demand datatype names its resource, and a quantity of demands: &amp;#226;&amp;#8364;&amp;#162; hostDemand is implicitly for the ExecutionHost, in units of time, &amp;#226;&amp;#8364;&amp;#162; serviceDemand and behaviorDemand is for an indicated operation defined by a RequestedService or by a BehaviorScenario, with a quantity in units of operations. &amp;#226;&amp;#8364;&amp;#162; extOpDemand is for a named operation for which the modeling environment has a known submodel, with a quantity in units of operations.</body>
    </ownedComment>
    <generalization xmi:id="_BRDPQIukEeCrt4LXEOI4YA" general="_BOiGwoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo9YukEeCrt4LXEOI4YA" name="Property">
    <ownedComment xmi:id="_vuJzpZ2TEeCg6sqGpS8R3g">
      <body>It is a typed element that may be owned by a classifier. 545

As the UML homonymous concept a property is a typed element that may be owned by a classifier. It has a multiplicity in terms of upper and lower bounds, an aggregation kind and a type. It is used to describe particular aspects of a Classifier, by giving to it concrete values at instantiation time. This concept is consistent with the UML::Classes::Kernel::Property element of the UML2 metamodel.</body>
    </ownedComment>
    <generalization xmi:id="_BREdYYukEeCrt4LXEOI4YA" general="_BOH3FYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo9oukEeCrt4LXEOI4YA" name="SendDataAction">
    <ownedComment xmi:id="_vuJzpp2TEeCg6sqGpS8R3g">
      <body>A SendDataAction is an action that is used to send a data via a flow port to other connected components. In that case, connected component ports indicate that they accept this type of flow in input.

This action sends a data to other connected components, which accepts this type of data in input. An asynchronous and &amp;#226;&amp;#8364;&amp;#339;send and forget&amp;#226;&amp;#8364;&amp;#65533; communication mode is used: the caller does not wait for data transmission to be completed and acknowledged to continue its execution.</body>
    </ownedComment>
    <generalization xmi:id="_BRiXcYukEeCrt4LXEOI4YA" general="_BOYVwYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOGo94ukEeCrt4LXEOI4YA" name="RequestEventStream">
    <ownedComment xmi:id="_vuJzp52TEeCg6sqGpS8R3g">
      <body>A stream of events that initiate system-level behaviour. It may be generated in different ways: by a clock, by a stated arrival process (such as Poisson or deterministic), as the output of another subsystem, from an arrival-generating mechanism modeled by a workload generator class, and from a trace.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOGo-IukEeCrt4LXEOI4YA" name="ComponentState">
    <ownedComment xmi:id="_vuJzqJ2TEeCg6sqGpS8R3g">
      <body>ComponentState is an enumeration defining the possible states for HW_Component. Literals &amp;#226;&amp;#8364;&amp;#162; operating &amp;#226;&amp;#8364;&amp;#162; storage non-operating state &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOGo-YukEeCrt4LXEOI4YA" name="operating"/>
    <ownedLiteral xmi:id="_BOHQAIukEeCrt4LXEOI4YA" name="storage"/>
    <ownedLiteral xmi:id="_BOHQAYukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BOHQAoukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQA4ukEeCrt4LXEOI4YA" name="HW_BranchPredictor">
    <ownedComment xmi:id="_vuJzqZ2TEeCg6sqGpS8R3g">
      <body>HW_BranchPredictor is a branch prediction resource from the HW_Computing package. 641

An HW_BranchPredictor is the HW_Processor part that determines whether a conditional branch is to be taken or not. Almost all pipelined processors need some form of branch prediction. It may be refined with a prediction behavior model. Branch prediction description is crucial for processor performance simulation. Example: Intel Pentium processors apply bimodal prediction.</body>
    </ownedComment>
    <generalization xmi:id="_BRbpwIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQBIukEeCrt4LXEOI4YA" name="PResourcePassStep">
    <ownedComment xmi:id="_vuJzqp2TEeCg6sqGpS8R3g">
      <body>

Explicit resource passing is required in certain circumstances only. Implicitly, logical resources held by a PBehaviorScenario are passed into sub-scenarios, and to all of the alternative paths at a branch or alternative combination. At a fork, par combination or asynchronous message however the default is that all forked paths hold all the logical resources, and this may need to be over-ridden by PassResource to define which parallel path has which resource. At a subsequent join, the semantics of resource passing are that the union of resources are held by the subsequent behavior. Notice that on alternative branches care must be taken in defining the acquiring and releasing resources, to come to the merging of paths with the same set of resources on all branches. Inconsistent resource holdings at a merge are a non- recoverable error in the performance definitions.</body>
    </ownedComment>
    <generalization xmi:id="_BRU8EIukEeCrt4LXEOI4YA" general="_BOiGwoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQBYukEeCrt4LXEOI4YA" name="AnnotatedElement">
    <ownedComment xmi:id="_vuJzq52TEeCg6sqGpS8R3g">
      <body>An annotated model element is a model element with additional annotations implemented by standard modeling mechanisms (for instance, the UML profile extension mechanism). An annotated model element describes certain of its non-functional aspects by means of NFP annotations.

Annotated Elements are model elements extended by standard modeling mechanisms. For example, some typical performance analysis-related annotated elements are: Step (a unit of execution), Scenario (a sequence of Steps), Resource (an entity that offers one or more services), Service (offered by a Resource or by a component of some kind). An annotated element describes certain of its non-functional aspects by means of NFP value annotations.</body>
    </ownedComment>
    <generalization xmi:id="_BP-RMYukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQBoukEeCrt4LXEOI4YA" name="ExecutionPlatformAllocationEnd">
    <ownedComment xmi:id="_vuJzrJ2TEeCg6sqGpS8R3g">
      <body>ExecutionPlatformAllocationEnd identifies elements that are targets of an allocation.

ApplicationAllocationEnd identifies execution platform model elements that are the target of an Allocation. Its allocatedFrom attribute is derived from any Allocation dependency and allows for tracing the model elements that are allocated.</body>
    </ownedComment>
    <generalization xmi:id="_BPyrAIukEeCrt4LXEOI4YA" general="_BOayAYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQB4ukEeCrt4LXEOI4YA" name="ResourceInstance">
    <ownedComment xmi:id="_vuJzrZ2TEeCg6sqGpS8R3g">
      <body>A resource instance represents the realization of a concrete resource. It can be used to describe generic elements of a concrete platform or designated modeling elements at a certain level of specification meaningful to the modeler in order to consider its properties or services as offered to others.

A ResourceInstance is the concretization of a resource or resources, and is to be conformant with the specification of those resources that it instantiates. It assumes the role of an instance in the classifier-instance modeling pattern, and consequently adopts the corresponding semantics. In general it is used to represent the items of a resource that are modeled at configuration time, instantiated at deployment time, and managed at run time.</body>
    </ownedComment>
    <generalization xmi:id="_BQ1M0oukEeCrt4LXEOI4YA" general="_BOHQBYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQ1z4IukEeCrt4LXEOI4YA" general="_BPTi0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQCIukEeCrt4LXEOI4YA" name="HW_CoolingSupply">
    <ownedComment xmi:id="_vuJzrp2TEeCg6sqGpS8R3g">
      <body>HW_CoolingSupply is a cooler component from the HW_Power package.

HW_CoolingSupply is a support HW_Component that dissipates heat in order to keep other components within their safe operating temperatures. Example: fans, heat sinks</body>
    </ownedComment>
    <generalization xmi:id="_BQq0wIukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQCYukEeCrt4LXEOI4YA" name="HW_Chip">
    <ownedComment xmi:id="_vuJzr52TEeCg6sqGpS8R3g">
      <body>HW_Chip is a physical entity from the HW_Layout package.

HW_Chip is a physical entity that denotes an integrated circuit. It may be analog or digital and it could contain numerous sub units. Example: processors, digital memories and ASICs.</body>
    </ownedComment>
    <generalization xmi:id="_BQKecYukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOHQCoukEeCrt4LXEOI4YA" name="BehaviorExecution">
    <ownedComment xmi:id="_vuJzsJ2TEeCg6sqGpS8R3g">
      <body>A BehaviorExecution is a specification of the execution of a unit of behavior or action within the instances of BehavioredClassifiers.

A BehaviorExecution is a specification of the execution of a unit of behavior or action within the instances of BehavioredClassifiers. Hence, they are run-time instances of the behavior and action concepts. 537 Any behavior execution is the direct consequence of the action execution of at least one instance of a classifier. A behavior execution specification describes how the states of these instances change over time. Behavior executions, as such, do not exist by their own, and they do not communicate. If a behavior execution operates on data, that data is obtained from the host instance. In UML2, there are two kinds of behaviors at run-time, emergent behavior and executing behavior. An executing behavior specification is performed by an instance specification (its host) and is the description of the behavior of this instance. Emergent behavior execution specification results from the interaction of one or more participant instance specifications. MARTE does not highlight this difference on the nature of behaviors. Indeed, it deals only with behavior execution as the general concept to express a behavior instance. Hence, the MARTE BehaviorExecution notion corresponds to the UML2 Behavior Performance concept described in the overview section of its common behavior chapter. On one hand, a behavior execution specification is thus directly caused by the invocation of a behavioral feature of an instance specification or by its creation. In either case, it is a consequence of the execution of an action by some related classifier instance. A behavior has access to the structural features of its host instance specification. On the other hand, behavior execution may result from the interaction of various participant instances. If the participating classifier instances are parts of a larger composite classifier instance, a behavior execution can be seen as indirectly describing the behavior of the container instance also. Nevertheless, a behavior execution can result from the executing behaviors of the participant instances. This form of behavior is of interest since the behavior that is to be analyzed and observed at the system level, in order to predict its timing properties, is normally described as an abstract view of the run- time emergent behavior due to the combination of the behavior executions of all its constituent parts.</body>
    </ownedComment>
    <generalization xmi:id="_BQoYgIukEeCrt4LXEOI4YA" general="_BPTi0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3EIukEeCrt4LXEOI4YA" name="MutualExclusionResource">
    <ownedComment xmi:id="_vuJzsZ2TEeCg6sqGpS8R3g">
      <body>A MutualExclusiveResource is a kind of synchronization resource that represents the contention in the access to common usually passive resources at run-time.

When the executionBehaviors of concurrencyResources need to access common protected resources, the underlying scheduling mechanisms are typically implemented using some form of synchronization resource, (semaphore, mutex, etc.) with a protecting protocol to avoid priority inversions. Other solutions avoid this concurrency issue by creating specific schedules, which order the access in advance. Whichever mechanism is used, the pertinent abstraction at this level of specification requires at least the identification of the common resource, its protecting mechanism, and the associated protocol; this is what the MutualExclusionResource defines. Its associated protocol, represented by MutualExclusiveProtocol, is derived from the policy associated to the scheduler that manages it, and the parameters required by the protocol are represented by the ProtectionParameters element.</body>
    </ownedComment>
    <generalization xmi:id="_BRVjIYukEeCrt4LXEOI4YA" general="_BOKTWYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3EYukEeCrt4LXEOI4YA" name="PRequestEventStream">
    <ownedComment xmi:id="_vuJzsp2TEeCg6sqGpS8R3g">
      <body>The sequence of initiation events for a behavior.

</body>
    </ownedComment>
    <generalization xmi:id="_BQjgAoukEeCrt4LXEOI4YA" general="_BOGo94ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3EoukEeCrt4LXEOI4YA" name="PLD_Organization">
    <ownedComment xmi:id="_vuJzs52TEeCg6sqGpS8R3g">
      <body>PLD_Organizaion is the HW_PLD organization tupletype from the HW_Computing package.

An HW_PLD (F.9.31) is organized as a class (F.9.31) with rows and columns.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3E4ukEeCrt4LXEOI4YA" name="HW_Watchdog">
    <ownedComment xmi:id="_vuJztJ2TEeCg6sqGpS8R3g">
      <body>HW_Watchdog is a particular timer from the HW_Timing package.

HW_Watchdog is a particular HW_Timer that triggers the system when it ends counting if it is not reset before (example 14.2.4.1). The reset period is an equation of the counter width and the clock frequency. Example: most of microcontrollers embed watchdogs.</body>
    </ownedComment>
    <generalization xmi:id="_BPqvMIukEeCrt4LXEOI4YA" general="_BOcAIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3FIukEeCrt4LXEOI4YA" name="HW_EndPoint">
    <ownedComment xmi:id="_vuJztZ2TEeCg6sqGpS8R3g">
      <body>HW_EndPoint is a communication interface from the HW_Communication package.

HW_EndPoint is a generic concept that symbolizes the HW_Resource end points. It is a part of an HW_Resource that serves as an interface to communicate with other HW_Resources through HW_Medias. Example: ports, pins, slots.</body>
    </ownedComment>
    <generalization xmi:id="_BQ2a8IukEeCrt4LXEOI4YA" general="_BOwJMIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQ3CAIukEeCrt4LXEOI4YA" general="_BOhfsYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3FYukEeCrt4LXEOI4YA" name="MultiplicityElement">
    <ownedComment xmi:id="_vuJztp2TEeCg6sqGpS8R3g">
      <body>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound, specifying the range of valid cardinalities for instantiation of this element.

This concept matches the definition of the MultiplicityElement metaclass defined in UML.</body>
    </ownedComment>
    <generalization xmi:id="_BRi-gIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3FoukEeCrt4LXEOI4YA" name="ValueSpecification">
    <ownedComment xmi:id="_vuJzt52TEeCg6sqGpS8R3g">
      <body>ValueSpecification matches with the UML concept of ValueSpecification. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

ValueSpecification is an abstract metaclass used to identify a value or values in a model. It may reference an instance or it may be an expression denoting an instance or instances when evaluated. It is required that the type and number of values is suitable for the context where the value specification is used.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOH3F4ukEeCrt4LXEOI4YA" name="LiteralDateTime">
    <ownedComment xmi:id="_vuJzuJ2TEeCg6sqGpS8R3g">
      <body>

DateTime is a special value used to specify an instant by means of a date and a time in calendar format.</body>
    </ownedComment>
    <generalization xmi:id="_BPuZkIukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOIeIIukEeCrt4LXEOI4YA" name="Mode">
    <ownedComment xmi:id="_vuJzuZ2TEeCg6sqGpS8R3g">
      <body>A Mode identifies an operational segment within the system execution that is characterized by a given configuration.

Working in a given mode may imply that a set of system entities are active during that operational fragment. We factorize such mode-sensitive system entities in BehavioredClassifier. A BehavioredClassifier can be active in zero or more operational modes. Furthermore, a BehavioredClasiffier that represents a system, subsystem or any composite entity can have a set of modes modeled as a ModeBehavior.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOIeIYukEeCrt4LXEOI4YA" name="EventOccurrence">
    <ownedComment xmi:id="_vuJzup2TEeCg6sqGpS8R3g">
      <body>An EventOccurrence is an instance of an Event, representing a potential change of state in the modeled system.

An EventOccurrence is an instance of an Event. They are used to represent a change of state in the modeled system. Event occurrences are often generated as a result of some action or combination of them, either within the system or in the environment surrounding the system.</body>
    </ownedComment>
    <generalization xmi:id="_BQkuIIukEeCrt4LXEOI4YA" general="_BPTi0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOIeIoukEeCrt4LXEOI4YA" name="DirectionKind">
    <ownedComment xmi:id="_vuJzu52TEeCg6sqGpS8R3g">
      <body>The direction kind (i.e., increasing or decreasing) defines the type of the quality order relation in the allowed value domain of NFPs. Literals &amp;#226;&amp;#8364;&amp;#162; increasing &amp;#226;&amp;#8364;&amp;#162; decreasing

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOIeI4ukEeCrt4LXEOI4YA" name="increasing"/>
    <ownedLiteral xmi:id="_BOIeJIukEeCrt4LXEOI4YA" name="decreasing"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOIeJYukEeCrt4LXEOI4YA" name="LogicalResource">
    <ownedComment xmi:id="_vuJzvJ2TEeCg6sqGpS8R3g">
      <body>

A logical resource is any resource which provides the environment for execution, but does not actually execute instructions. Examples include semaphores, mutexes, buffers, and locks.</body>
    </ownedComment>
    <generalization xmi:id="_BQAGYIukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOIeJoukEeCrt4LXEOI4YA" name="TimedBehavior">
    <ownedComment xmi:id="_vuJzvZ2TEeCg6sqGpS8R3g">
      <body>Processings) TimedBehavior is a generic concept for modeling behavior that have known start and finish times or a known duration, and whose instants and durations are bound to clocks.

TimedBehavior is a generic concept for modeling behaviors that have known start and finish times or a known duration, and whose instants and durations are bound to clocks. This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BQXSwIukEeCrt4LXEOI4YA" general="_BPJx0IukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQXSwYukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOIeJ4ukEeCrt4LXEOI4YA" name="ClientServerFeature">
    <ownedComment xmi:id="_vuJzvp2TEeCg6sqGpS8R3g">
      <body>A ClientServerFeature is the defintion of behavior that a component provides or requires to/from other components.

A ClientServerFeature represents an externally visible behavior owned by a component. A ClientServerFeature is used in message-based communication as a contract between components: the owner component provides a ClientServerFeature through one of its ports to other components, which require the service. Using a request/reply communication schema, a component that requires a ClientServerFeature may invoke it through a service call or signal reception. 609</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOIeKIukEeCrt4LXEOI4YA" name="TimeStandardKind">
    <ownedComment xmi:id="_vuJzv52TEeCg6sqGpS8R3g">
      <body>TimeStandardKind is an enumeration type that defines literals used to specify the standard &amp;#226;&amp;#8364;&amp;#339;systems of time&amp;#226;&amp;#8364;&amp;#65533; adopted for a chronometric clock.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOJFMIukEeCrt4LXEOI4YA" name="GPS"/>
    <ownedLiteral xmi:id="_BOJFMYukEeCrt4LXEOI4YA" name="Local"/>
    <ownedLiteral xmi:id="_BOJFMoukEeCrt4LXEOI4YA" name="Sidereal"/>
    <ownedLiteral xmi:id="_BOJFM4ukEeCrt4LXEOI4YA" name="TAI"/>
    <ownedLiteral xmi:id="_BOJFNIukEeCrt4LXEOI4YA" name="TCB"/>
    <ownedLiteral xmi:id="_BOJFNYukEeCrt4LXEOI4YA" name="TCG"/>
    <ownedLiteral xmi:id="_BOJFNoukEeCrt4LXEOI4YA" name="TDB"/>
    <ownedLiteral xmi:id="_BOJFN4ukEeCrt4LXEOI4YA" name="TT"/>
    <ownedLiteral xmi:id="_BOJFOIukEeCrt4LXEOI4YA" name="UT0"/>
    <ownedLiteral xmi:id="_BOJFOYukEeCrt4LXEOI4YA" name="UT1"/>
    <ownedLiteral xmi:id="_BOJFOoukEeCrt4LXEOI4YA" name="UTC"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJFO4ukEeCrt4LXEOI4YA" name="LiteralString">
    <ownedComment xmi:id="_vuJzwJ2TEeCg6sqGpS8R3g">
      <body>LiteralString matches with the UML concept of LiteralString. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

A LiteralString specifies a constant String value.</body>
    </ownedComment>
    <generalization xmi:id="_BP1uUIukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJFPIukEeCrt4LXEOI4YA" name="TimeIntervalValue">
    <ownedComment xmi:id="_vuJzwZ2TEeCg6sqGpS8R3g">
      <body>A time interval value is a set of instants values specified by a pair of instant values, which define the bounds of the interval.

A time interval value is a set of instant values specified by a pair of instant values. A time interval value denotes 0 or many time intervals in the time base associated with the onClock clock of its bounds. When the onClock clock has a maximal value, due to clock roll-over, a time interval value may denote many time intervals. When used in a time value specification, a time interval value designates any time value of the interval (including or not the bound values according to the isMinOpen and isMaxOpen attribute values).</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOJFPYukEeCrt4LXEOI4YA" name="ConcurencyKind">
    <ownedComment xmi:id="_vuJzwp2TEeCg6sqGpS8R3g">
      <body>ConcurencyKind is an enumeration, which literals specify the kind of concurrency policy of a behavioral feature. Literals &amp;#226;&amp;#8364;&amp;#162; reader A behavioral feature execution has no side effects (i.e., it does not modify the state of the object or the values of its properties). &amp;#226;&amp;#8364;&amp;#162; writer A behavioral feature execution may have side effects. 617 &amp;#226;&amp;#8364;&amp;#162; parallel A behavioral feature execution may be done in parallel of any kind of service.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOJFPoukEeCrt4LXEOI4YA" name="reader"/>
    <ownedLiteral xmi:id="_BOJsQIukEeCrt4LXEOI4YA" name="writer"/>
    <ownedLiteral xmi:id="_BOJsQYukEeCrt4LXEOI4YA" name="parallel"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJsQoukEeCrt4LXEOI4YA" name="SaAnalysisContext">
    <ownedComment xmi:id="_vuJzw52TEeCg6sqGpS8R3g">
      <body>An analysis context is the root concept to collect relevant quantitative information for performing a specific analysis scenario. Starting with the analysis context and its elements, a tool can follow the links of the model to extract the information that it needs to perform the model analysis. Analysis contexts are also known as real-time situations in the schedulability analysis domain (SaAnalysisContext).

In general, SaAnalysisContext is associated with the following two modeling concerns. WorkloadBehavior represents a given load of processing flows triggered by external (e.g., environmental events) or internal (e.g., a timer) stimuli. The processing flows are modeled as a set of related steps that contend for use of processing resources and other shared resources. ResourcesPlatform represents a concrete architecture and capacity of hardware and software processing resources used in the context under consideration.</body>
    </ownedComment>
    <generalization xmi:id="_BQywkIukEeCrt4LXEOI4YA" general="_BPAn4IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJsQ4ukEeCrt4LXEOI4YA" name="SwCommunicationResource">
    <ownedComment xmi:id="_vuJzxJ2TEeCg6sqGpS8R3g">
      <body>

SwCommunicationResource defines data exchange interaction among concurrent resources.</body>
    </ownedComment>
    <generalization xmi:id="_BQsC4IukEeCrt4LXEOI4YA" general="_BPaQgIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQsC4YukEeCrt4LXEOI4YA" general="_BOKTUIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJsRIukEeCrt4LXEOI4YA" name="Property1">
    <ownedComment xmi:id="_vuJzxZ2TEeCg6sqGpS8R3g">
      <body>Property matches with the UML concept of Property. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

When a property is owned by a data type via ownedAttribute, then it represents an attribute of the data type. When instantiated a property represents a value or collection of values associated with an instance of one (or in the case of a ternary or higher-order association, more than one) type. The value or collection of values instantiated for a property in an instance of its context conforms to the property&amp;#226;&amp;#8364;&amp;#8482;s type.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJsRYukEeCrt4LXEOI4YA" name="HW_ASIC">
    <ownedComment xmi:id="_vuJzxp2TEeCg6sqGpS8R3g">
      <body>HW_ASIC is a computing resource from the HW_Computing package.

HW_ASIC (Application Specific Integrated Circuit) is a computing resource, which is customized for a particular use. It offers execution services corresponding to the mapped application. HW_ASICs are known to be efficient but not flexible. However, notice that many of them are composite and contain processors and memory. Example: newly video converter ASICs can perform real time compression encoding of a video source image to an optimized format.</body>
    </ownedComment>
    <generalization xmi:id="_BQBUgIukEeCrt4LXEOI4YA" general="_BPgXIIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJsRoukEeCrt4LXEOI4YA" name="ClientServerPort">
    <ownedComment xmi:id="_vuJzx52TEeCg6sqGpS8R3g">
      <body>A ClientPort is a concrete kind of InteractionPort used for client-server like communications between structured components. It relays only service calls and/or signals. A ClientServerPort specifies a set of services it provides/requires, as well as the type of signal it produces/consumes.

A ClientServerPort supports client-server like communications: it assumes a request/reply communication schema between components. The attribute kind specifies whether the port has provided or required services or signal receptions.</body>
    </ownedComment>
    <generalization xmi:id="_BQcLQIukEeCrt4LXEOI4YA" general="_BOo0cYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOJsR4ukEeCrt4LXEOI4YA" name="ConditionalExpression">
    <ownedComment xmi:id="_vuJzyJ2TEeCg6sqGpS8R3g">
      <body>

Conditional Expressions define &amp;#226;&amp;#8364;&amp;#339;if-then-else&amp;#226;&amp;#8364;&amp;#65533; statements, which can be used inside an expression. The result of evaluating this expression will be the result of the evaluation of the ifTrueExpr if the conditionExpr is true. Otherwise, the result will be the result of the ifFalseExpr.</body>
    </ownedComment>
    <generalization xmi:id="_BQOI0YukEeCrt4LXEOI4YA" general="_BOLhd4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOKTUIukEeCrt4LXEOI4YA" name="CommunicationMedia">
    <ownedComment xmi:id="_vuJzyZ2TEeCg6sqGpS8R3g">
      <body>A CommunicationMedia represents the means to transport information from one location to another. 585

The fundamental service of a CommunicationMedia is to transport information (e.g., message of data) from one location to another. It has as an attribute the size of the elements transmitted; as expected, this definition is related to the resource base clock. For example, if the communication media represents a bus, and the clock is the bus speed, &amp;#226;&amp;#8364;&amp;#339;element size&amp;#226;&amp;#8364;&amp;#65533; would be the width of the bus, in bits. If the communication media represents a layering of protocols, &amp;#226;&amp;#8364;&amp;#339;element size&amp;#226;&amp;#8364;&amp;#65533; would be the frame size of the uppermost protocol.</body>
    </ownedComment>
    <generalization xmi:id="_BRn3AIukEeCrt4LXEOI4YA" general="_BOx-YIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOKTUYukEeCrt4LXEOI4YA" name="ProtectProtocolKind">
    <ownedComment xmi:id="_vuS9kJ2TEeCg6sqGpS8R3g">
      <body>This class is an enumerated value with the shared variables protection protocols most widely known. 591 Literals &amp;#226;&amp;#8364;&amp;#162; FIFO &amp;#226;&amp;#8364;&amp;#162; NoPreemption &amp;#226;&amp;#8364;&amp;#162; PriorityCeiling &amp;#226;&amp;#8364;&amp;#162; PriorityInheritance &amp;#226;&amp;#8364;&amp;#162; StackBased &amp;#226;&amp;#8364;&amp;#162; Undef &amp;#226;&amp;#8364;&amp;#162; Other

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOKTUoukEeCrt4LXEOI4YA" name="FIFO"/>
    <ownedLiteral xmi:id="_BOKTU4ukEeCrt4LXEOI4YA" name="NoPreemption"/>
    <ownedLiteral xmi:id="_BOKTVIukEeCrt4LXEOI4YA" name="PriorityCeiling"/>
    <ownedLiteral xmi:id="_BOKTVYukEeCrt4LXEOI4YA" name="PriorityInheritance"/>
    <ownedLiteral xmi:id="_BOKTVoukEeCrt4LXEOI4YA" name="StackBased"/>
    <ownedLiteral xmi:id="_BOKTV4ukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BOKTWIukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOKTWYukEeCrt4LXEOI4YA" name="SynchResource">
    <ownedComment xmi:id="_vuS9kZ2TEeCg6sqGpS8R3g">
      <body>A SynchResource represents the kind of protected resources that serve as the mechanisms used to arbitrate concurrent execution flows, and in particular the mutually excusive access to shared resources.

A SynchResource represents the kind of protected resources that serve as the mechanisms used to arbitrate concurrent execution flows, and in particular the mutually exclusive access to shared resources. This general concept is further specialized inside the context of the GRM in the Scheduling package.</body>
    </ownedComment>
    <generalization xmi:id="_BQU2gYukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOKTWoukEeCrt4LXEOI4YA" name="MemoryBroker">
    <ownedComment xmi:id="_vuS9kp2TEeCg6sqGpS8R3g">
      <body>

MemoryBroker resources provide primarily services to manage the memory allocation, the memory protection and the memory access.</body>
    </ownedComment>
    <generalization xmi:id="_BQ6sYYukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQ7TcIukEeCrt4LXEOI4YA" general="_BOdOQYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOK6YIukEeCrt4LXEOI4YA" name="PCommunicationStep">
    <ownedComment xmi:id="_vuS9k52TEeCg6sqGpS8R3g">
      <body>

A PCommunicationStep defines a subscenario to convey the message between objects on different nodes, in one of four ways: &amp;#226;&amp;#8364;&amp;#162; if commService, commBehavior, and extOperation are all null, then the host overhead parameters are used to define a three-Step subscenario (overhead to send, latency across the net, overhead to receive). &amp;#226;&amp;#8364;&amp;#162; if commService is non-null, it identifies a layer operation that has behavior to define the conveyance. &amp;#226;&amp;#8364;&amp;#162; if commBehavior is non-null, it identifies a subscenario which defines the conveyance. &amp;#226;&amp;#8364;&amp;#162; if extOperation is non-null, it identifies an external submodel to be used to determine the delay for conveyance. An example could be a network simulation.</body>
    </ownedComment>
    <generalization xmi:id="_BQ6FUIukEeCrt4LXEOI4YA" general="_BOiGwoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOK6YYukEeCrt4LXEOI4YA" name="WorkloadBehavior">
    <ownedComment xmi:id="_vuS9lJ2TEeCg6sqGpS8R3g">
      <body>Represents a logical container for the analyzed behavior and the workload that triggers it.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOK6YoukEeCrt4LXEOI4YA" name="HW_Battery">
    <ownedComment xmi:id="_vuS9lZ2TEeCg6sqGpS8R3g">
      <body>HW_Battery is a power supply resource from the HW_Power package.

HW_Battery is a non permanent power supply resource. It contains a limited stored energy. Therefore it may restrain the system autonomy. Example: mobile phones batteries</body>
    </ownedComment>
    <generalization xmi:id="_BPvAoIukEeCrt4LXEOI4YA" general="_BOkjAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOK6Y4ukEeCrt4LXEOI4YA" name="Action">
    <ownedComment xmi:id="_vuS9lp2TEeCg6sqGpS8R3g">
      <body>An Action is the fundamental unit of behavior specification.

An Action is the fundamental unit of behavior specification. An action takes a set of inputs and converts them into a set of outputs, though either or both sets may be empty. Actions are contained in compositeBehaviors, which provide their context. CompositeBehaviors provide constraints among actions to determine when they execute and what inputs they have.</body>
    </ownedComment>
    <generalization xmi:id="_BPqvMYukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOK6ZIukEeCrt4LXEOI4YA" name="IntervalType">
    <ownedComment xmi:id="_vuS9l52TEeCg6sqGpS8R3g">
      <body>

Interval type is a composite data type defining a set of values by means of two bound limits. The minAttribute defines a single value that will designate the lower bound of the Interval. The maxAttribute defines a single value that defines the upper bound of the Interval.</body>
    </ownedComment>
    <generalization xmi:id="_BPvAo4ukEeCrt4LXEOI4YA" general="_BOPL0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOLhcIukEeCrt4LXEOI4YA" name="Scheduler">
    <ownedComment xmi:id="_vuS9mJ2TEeCg6sqGpS8R3g">
      <body>A Scheduler is defined as a kind of ResourceBroker that brings access to its brokered ProcessingResource or resources following a certain scheduling policy.

A Scheduler is defined as a kind of ResourceBroker that brings access to its broked ProcessingResource or resources following a certain scheduling policy. The concept of scheduling policy as it is presented here corresponds to the scheduling mechanism described in section 6.1.1 of SPT, since it refers specifically to the order to choose threads for execution. The attribute host represents the ComputingResource on which the artifacts that realize the scheduler are deployed and from which it gets computing power to work. The concrete schedule that is to be used by the scheduler may be calculated offline and introduced as an opaque expression or it may be the result of a simulation after applying the scheduling policy and taking traces of the scheduler behavior.</body>
    </ownedComment>
    <generalization xmi:id="_BQ9vsIukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOLhcYukEeCrt4LXEOI4YA" name="StorageResource">
    <ownedComment xmi:id="_vuS9mZ2TEeCg6sqGpS8R3g">
      <body>A StorageResource represents the different forms of memory.

A StorageResource represents memory, and its capacity is expressed in number of elements; the size of an individual element in bits must be given. The reference clock in this kind of resource corresponds to the pace at which data is updated in it, and hence it determines the time it takes to access to one individual memory element. The level of granularity in the amount of storage resources represented is up to the model designer. For example, if the storage resource represents a hard disk drive, the element could be a block or a sector, and the speed of the clock to access such element would be directly related to the disk rotation speed. The services provided by a storage resource are intended to move data between memory and a processing unit, which in this case can be a computing resource or a communication endpoint.</body>
    </ownedComment>
    <generalization xmi:id="_BRhJUIukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOLhcoukEeCrt4LXEOI4YA" name="FlowDirectionKind">
    <ownedComment xmi:id="_vuS9mp2TEeCg6sqGpS8R3g">
      <body>FlowDirectionKind is an enumeration, which literals specify the direction of item flows on FlowPorts. Literals &amp;#226;&amp;#8364;&amp;#162; in Denotes a direction of the information flow is from outside to inside of the owning entity. &amp;#226;&amp;#8364;&amp;#162; out Denotes a direction of the information flow is from inside to outside of the owning entity. &amp;#226;&amp;#8364;&amp;#162; inout Denotes a bidirectional information flow.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOLhc4ukEeCrt4LXEOI4YA" name="in"/>
    <ownedLiteral xmi:id="_BOLhdIukEeCrt4LXEOI4YA" name="out"/>
    <ownedLiteral xmi:id="_BOLhdYukEeCrt4LXEOI4YA" name="inout"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOLhdoukEeCrt4LXEOI4YA" name="Acquire">
    <ownedComment xmi:id="_vuS9m52TEeCg6sqGpS8R3g">
      <body>Acquire represents the allocation of or the access to some &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; from the resource.

Acquire corresponds to the allocation of some &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; from the resource. For example, for a resource representing storage, the amount could be the memory size. As another example, a resource could represent a single element (maximum amount available is &amp;#226;&amp;#8364;&amp;#339;1&amp;#226;&amp;#8364;&amp;#65533;), and acquire could be used to model the lock in a mutually exclusive access situation. If the attribute isBloking is true it indicates that the caller waits until the service is able to allocate or provide the access to the resource demanded. If false, the service return indicating the impossibility of providing immediate access to the amount of resource demanded.</body>
    </ownedComment>
    <generalization xmi:id="_BQG0EIukEeCrt4LXEOI4YA" general="_BOMvlYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOLhd4ukEeCrt4LXEOI4YA" name="Expression">
    <ownedComment xmi:id="_vuS9nJ2TEeCg6sqGpS8R3g">
      <body>Expression matches with the UML concept of Expression. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

An expression represents a node in an expression tree. If there are no operands, it represents a terminal node. If there are operands, it represents an operator applied to those operands. In either case, there is a symbol associated with the node. The interpretation of this symbol depends on the context of the expression.</body>
    </ownedComment>
    <generalization xmi:id="_BRAzAIukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMIgIukEeCrt4LXEOI4YA" name="DurationIntervalSpecification">
    <ownedComment xmi:id="_vuS9nZ2TEeCg6sqGpS8R3g">
      <body>

Duration Interval Specifications are special kinds of interval specifications that have duration expressions as upper and lower bounds.</body>
    </ownedComment>
    <generalization xmi:id="_BQM6sIukEeCrt4LXEOI4YA" general="_BOcAIIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMIgYukEeCrt4LXEOI4YA" name="CollectionType">
    <ownedComment xmi:id="_vuS9np2TEeCg6sqGpS8R3g">
      <body>

Collection Type describes a list of elements of a particular given type. Part of every collection type is the declaration of the type of its elements by means of the CollectionAttribute (i.e., a collection type is parameterized with an element type). Note that there is no restriction on the element type of a collection type. This means in particular that a collection type may be parameterized with other collection types allowing collections to be nested arbitrarily deep.</body>
    </ownedComment>
    <generalization xmi:id="_BRO1cYukEeCrt4LXEOI4YA" general="_BOPL0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOMIgoukEeCrt4LXEOI4YA" name="LaxityKind">
    <ownedComment xmi:id="_vuS9n52TEeCg6sqGpS8R3g">
      <body>The LaxityKind is an Enumeration that includes a list of qualifiers specifying the criticality of a given required timing property. Literals &amp;#226;&amp;#8364;&amp;#162; hard The required timing specifications have to be met for system behavior correctness. &amp;#226;&amp;#8364;&amp;#162; soft If the required timing specifications are not met the system behavior is still correct. Further specifications, such as the miss ratio, can be used to specify the limit of timing misses. &amp;#226;&amp;#8364;&amp;#162; other A user-specific laxity.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOMIg4ukEeCrt4LXEOI4YA" name="hard"/>
    <ownedLiteral xmi:id="_BOMIhIukEeCrt4LXEOI4YA" name="soft"/>
    <ownedLiteral xmi:id="_BOMIhYukEeCrt4LXEOI4YA" name="other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMIhoukEeCrt4LXEOI4YA" name="HW_Clock">
    <ownedComment xmi:id="_vuS9oJ2TEeCg6sqGpS8R3g">
      <body>HW_Clock is a timing resource from the HW_Timing package.

HW_Clock is a fundamental concept. It provides a periodical signal triggering. Example: a quartz crystal that vibrates at a given frequency.</body>
    </ownedComment>
    <generalization xmi:id="_BQFl8YukEeCrt4LXEOI4YA" general="_BOPy4IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMIh4ukEeCrt4LXEOI4YA" name="SimultaneousOccurrenceSet">
    <ownedComment xmi:id="_vuS9oZ2TEeCg6sqGpS8R3g">
      <body>Models::TimedEventOccurrences) SimultaneousOccurrenceSet represents a set of occurrences considered as a whole.

SimultaneousOccurrenceSet represents a set of occurrences considered as a whole. Since a SimultaneousOccurrenceSet is also an EventOccurrence, it may cause changes in the system.</body>
    </ownedComment>
    <generalization xmi:id="_BPyD8YukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMvkIukEeCrt4LXEOI4YA" name="PProcess">
    <ownedComment xmi:id="_vuS9op2TEeCg6sqGpS8R3g">
      <body>A designation for a deployed process, a kind of SchedulableResource with performance attributes.

For performance modeling this represents a process, possibly multithreaded. The capacity gives the level of multithreading, assumed to be static. The component attribute identifies the deployment of the process through the artifact that implements it physically, and thus identifies its host processor. 693</body>
    </ownedComment>
    <generalization xmi:id="_BQjgAYukEeCrt4LXEOI4YA" general="_BOPL0oukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMvkYukEeCrt4LXEOI4YA" name="SwAccessService">
    <ownedComment xmi:id="_vuS9o52TEeCg6sqGpS8R3g">
      <body>

The services provided by a software resource to access its characteristics: the accessor and the setter.</body>
    </ownedComment>
    <generalization xmi:id="_BQLFgIukEeCrt4LXEOI4YA" general="_BOMvlYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMvkoukEeCrt4LXEOI4YA" name="HW_Bus">
    <ownedComment xmi:id="_vuS9pJ2TEeCg6sqGpS8R3g">
      <body>HW_Bus is a particular HW_Media from the HW_Communication package.

HW_Bus denotes a material HW_Media. It is characterized by its address and word widths, these are functional values, usually different from the wires number of its corresponding HW_Channel seeing that buses may be multiplexed or serial. Example: ISA (Industry Standard Architecture) is a parallel bus (20-bit address and 8-bit data) operating at 4.77 MHz.</body>
    </ownedComment>
    <generalization xmi:id="_BRWxQIukEeCrt4LXEOI4YA" general="_BOOkwoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMvk4ukEeCrt4LXEOI4YA" name="DurationIntervalValue">
    <ownedComment xmi:id="_vuS9pZ2TEeCg6sqGpS8R3g">
      <body>A duration interval value is defined by a pair of duration values.

A duration interval value is defined by a pair of duration values. By default a duration interval value is closed (including the bound values). When used in a time value specification, a duration interval value designates any duration value of the interval (including or not the bound values according to the isMinDOpen and isMaxDOpen attribute values).</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMvlIukEeCrt4LXEOI4YA" name="ResourceBroker">
    <ownedComment xmi:id="_vuS9pp2TEeCg6sqGpS8R3g">
      <body>The resourceBroker is a kind of resource that is responsible for allocation and de-allocation of a set of resource instances (or their services) to clients according to a specific access control policy.

The resourceBroker, is a kind of resource that is responsible for allocation and de-allocation of a set of resource instances (or their services) to clients according to a specific access control policy. For example, a memory manager will allocate memory from a heap upon request from a client and also return it back into the heap once the client no longer needs it. The access control policy determines the criteria for determining and making effective the provision of resources, it can impose limitations on the prioritization of competing requests, or on the amount of memory provided to individual clients, etc. After being created and initialized, the resources are typically handed over to a resource broker. In most practical cases, the resource manager and the resource broker are the same entity. However, since this is not always true the two concepts are modeled separately (they can be easily combined by designating the same entity as serving both purposes).</body>
    </ownedComment>
    <generalization xmi:id="_BRIu0IukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOMvlYukEeCrt4LXEOI4YA" name="ResourceService">
    <ownedComment xmi:id="_vuS9p52TEeCg6sqGpS8R3g">
      <body>A ResourceService represents the behaviors of interest for a certain kind of resource.

ResourceServices are the available means for a Resource to manifest, and then perform, its expected duties and/or responsibilities, to further satisfy the requirements for which it is in place. ResourceServices are expressed as behaviors associated to the resource, which also provides the structural context for them.</body>
    </ownedComment>
    <generalization xmi:id="_BQvGMIukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BONWoIukEeCrt4LXEOI4YA" name="ProtectParameters">
    <ownedComment xmi:id="_vuS9qJ2TEeCg6sqGpS8R3g">
      <body>This class holds the parameters that are necessary for two of the more typical protocols that need them; the priority ceiling and the stack based protocols.

This is a utility class used to provide the required ceilings for these protocols. The stack based protocol is the EDF compatible version of the priority ceiling protocol, and since both used different nomenclature to hold the required ceiling, both fields have been included: the ceiling and the preemption level.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BONWoYukEeCrt4LXEOI4YA" name="ResourceUsage">
    <ownedComment xmi:id="_vucukJ2TEeCg6sqGpS8R3g">
      <body>A ResourceUsage represents the run-time mechanism that effectively requires the usage of the resource.

When resources are used, their usage may consume part of the &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; provided by the resource. Taking into account these usages when reasoning about the system operation, is a central task in the evaluation of its feasibility. A ResourceUsage links resources with concrete demands of usage over them. The concept of UsageDemand represents the dynamic mechanism that effectively requires the usage of the resource. Two general forms of usage are defined the StaticUsage and the DinamicUsage, each used according to the specific needs of the model. A few concrete forms of usage are defined at this level of specification; those are aimed to represent the consumption of memory, the time taken from a CPU, the energy from a power supply and the number of bytes to be sent through a network. 597</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BONWooukEeCrt4LXEOI4YA" name="InterruptResource">
    <ownedComment xmi:id="_vucukZ2TEeCg6sqGpS8R3g">
      <body>

InterruptResource defines an executing context to execute user-delivered routines (i.e., entry point) further to hardware or software asynchronous signals. Exceptions are software asynchronous signals. Exceptions can either be &amp;#226;&amp;#8364;&amp;#339;Processor- detected&amp;#226;&amp;#8364;&amp;#65533; exceptions when the CPU detects an anomalous condition while executing an instruction or &amp;#226;&amp;#8364;&amp;#339;Programmed&amp;#226;&amp;#8364;&amp;#65533; exceptions (also called software interrupts) when they occur at the request of the programmer. Some example of &amp;#226;&amp;#8364;&amp;#339;Processor-detected&amp;#226;&amp;#8364;&amp;#65533; exceptions are faults (divide error, device not ready), traps (breakpoints, debug), and aborts (double fault)).</body>
    </ownedComment>
    <generalization xmi:id="_BQzXoIukEeCrt4LXEOI4YA" general="_BO1owIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BONWo4ukEeCrt4LXEOI4YA" name="SaExecutionHost">
    <ownedComment xmi:id="_vucukp2TEeCg6sqGpS8R3g">
      <body>A CPU or other device that executes functional steps. SaExecutionHost adds schedulability metrics, interrupt overheads and utilization of scheduling processing.

A CPU or other device which executes functional steps. SaExecutionHost adds schedulability metrics, interrupt overheads, and utilization of scheduling processing.</body>
    </ownedComment>
    <generalization xmi:id="_BQ9IoIukEeCrt4LXEOI4YA" general="_BObZEoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BONWpIukEeCrt4LXEOI4YA" name="SampleRealization">
    <ownedComment xmi:id="_vucuk52TEeCg6sqGpS8R3g">
      <body>A Sample Realization represents a set of values that occur for the quantitative NFP under consideration at run-time.

Sample Realizations represent a set of values that occur for the Quantitative NFP under consideration at run-time (for instance, measurements collected from a real system or a simulation experiment). A Quantitative NFP may be sampled once or repeated times over an extended run. In a cyclic deterministic system, in which each execution cycle has the same values, a single sample is sufficient to characterize completely the Quantitative NFP.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BONWpYukEeCrt4LXEOI4YA" name="Alarm">
    <ownedComment xmi:id="_vuculJ2TEeCg6sqGpS8R3g">
      <body>

Alarm resource provides executing context to a user routine, which must be connected to a timer invoked after a one-shot or periodically. A particular alarm is the watchdog. If the application doesn&amp;apos;t succeed in resetting the watchdog, that means that the system is not functioning properly and the alarm occurs, forcing application to execute the watchdog entry point or to reset the processor.</body>
    </ownedComment>
    <generalization xmi:id="_BQo_kYukEeCrt4LXEOI4YA" general="_BONWooukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BON9sIukEeCrt4LXEOI4YA" name="Operation1">
    <ownedComment xmi:id="_vuculZ2TEeCg6sqGpS8R3g">
      <body>Operation matches with the UML concept of Operation. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

An operation is invoked on an instance of the data type for which the operation is a feature. The list of owned parameters describes the order, type, and direction of arguments that can be given when the Operation is invoked or which are returned when the Operation terminates.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BON9sYukEeCrt4LXEOI4YA" name="ModelingConcern">
    <ownedComment xmi:id="_vuculp2TEeCg6sqGpS8R3g">
      <body>Concerns are those interests which pertain to the system&amp;apos;s development, its operation or any other aspects that are critical or otherwise important to one or more stakeholders at a given point of the development process.

Concerns are those interests that pertain to the system&amp;apos;s development, its operation or any other aspects that are critical or otherwise important to one or more stakeholders at a given point of the development process.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BON9soukEeCrt4LXEOI4YA" name="SynchronizationKind">
    <ownedComment xmi:id="_vucul52TEeCg6sqGpS8R3g">
      <body>SynchronizationKind is an enumeration, which literals specify the synchronization mechanism used for real-time actions and services. Literals &amp;#226;&amp;#8364;&amp;#162; synchronous The client waits for the end of the invoked behavior before continuing its own execution. &amp;#226;&amp;#8364;&amp;#162; asynchronous The client does not wait for the end of the invoked behavior to continue its own execution. &amp;#226;&amp;#8364;&amp;#162; delayedSynchronous The client continues to execute and will synchronize later when the invoked behavior returns a value. &amp;#226;&amp;#8364;&amp;#162; rendezVous The behavior waits for the client to start executing. &amp;#226;&amp;#8364;&amp;#162; other Other synchronization policy.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BON9s4ukEeCrt4LXEOI4YA" name="synchronous"/>
    <ownedLiteral xmi:id="_BON9tIukEeCrt4LXEOI4YA" name="asynchronous"/>
    <ownedLiteral xmi:id="_BON9tYukEeCrt4LXEOI4YA" name="delayedSynchronous"/>
    <ownedLiteral xmi:id="_BON9toukEeCrt4LXEOI4YA" name="rendezVous"/>
    <ownedLiteral xmi:id="_BON9t4ukEeCrt4LXEOI4YA" name="other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BON9uIukEeCrt4LXEOI4YA" name="QualitativeNFP">
    <ownedComment xmi:id="_vucumJ2TEeCg6sqGpS8R3g">
      <body>Qualitative NFP refer to inherent or distinctive characteristics that may not be measured directly. More specifically, a qualitative NFP takes a value from a list of allowed values, where each value identifies a possible alternative.

A Qualitative NFP is a non-functional property that is not a quantitative NFP. Especially, a qualitative NFP is not physically measurable. In general, a qualitative NFP is denoted by a label representing a high-level of abstraction characterization that is meaningful to the analyst and the analysis tools.</body>
    </ownedComment>
    <generalization xmi:id="_BQ_k4IukEeCrt4LXEOI4YA" general="_BPM1IIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOOkwIukEeCrt4LXEOI4YA" name="HW_Channel">
    <ownedComment xmi:id="_vucumZ2TEeCg6sqGpS8R3g">
      <body>HW_Channel is a physical entity from the HW_Layout package.

HW_channel is a physical set of connectors that may transfer data and power between HW_Components. Example: USB cable is a 4 wires channel.</body>
    </ownedComment>
    <generalization xmi:id="_BQFl8IukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOOkwYukEeCrt4LXEOI4YA" name="Reception">
    <ownedComment xmi:id="_vucump2TEeCg6sqGpS8R3g">
      <body>A provided Reception represents the ability of a port to consume a particular signal. A required Reception represents the fact that signals may be sent from the context port.

This concept mimics the UML metaclass Reception defined in the package UML::Communication.</body>
    </ownedComment>
    <generalization xmi:id="_BQXSwoukEeCrt4LXEOI4YA" general="_BOIeJ4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOOkwoukEeCrt4LXEOI4YA" name="HW_Media">
    <ownedComment xmi:id="_vucum52TEeCg6sqGpS8R3g">
      <body>HW_Media is a communication resource from the HW_Communication package.

HW_Media is a generic concept. It represents any resource able to transfer data. It has a theoretical bandwidth, it may be connected to many HW_EndPoints and it may be controlled by many HW_Arbiters. Example: wire, bus, wireless connection.</body>
    </ownedComment>
    <generalization xmi:id="_BRIu0YukEeCrt4LXEOI4YA" general="_BOKTUIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRJV4IukEeCrt4LXEOI4YA" general="_BOhfsYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOOkw4ukEeCrt4LXEOI4YA" name="TimeBase">
    <ownedComment xmi:id="_vucunJ2TEeCg6sqGpS8R3g">
      <body>A TimeBase represents an ordered set of instants.

A time base represents an ordered set of instants. It is the building block of the time structure.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOOkxIukEeCrt4LXEOI4YA" name="Behavior">
    <ownedComment xmi:id="_vucunZ2TEeCg6sqGpS8R3g">
      <body>A Behavior defines how a system, or an entity defining a part of it, changes over time.

A Behavior defines how a system or entity changes over time. From a modeling point of view, this concept defines the behavior of some classifier, specifically, a Behaviored Classifier. A behavior captures the dynamic of its context classifier. It is a specification of how its context classifier as well as the state of the system that is in the scope of the behavior may change over time. A behavior may have Parameters whose values may be used for evaluating a behavior. Two kinds of Behavior may be defined: CompositeBehavior and Action.</body>
    </ownedComment>
    <generalization xmi:id="_BPw10IukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPL0IukEeCrt4LXEOI4YA" name="CompositeType">
    <ownedComment xmi:id="_vucunp2TEeCg6sqGpS8R3g">
      <body>

Composite types are composed of values, which are made up of values of the owned attributes.</body>
    </ownedComment>
    <generalization xmi:id="_BQOI0IukEeCrt4LXEOI4YA" general="_BOfDcoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPL0YukEeCrt4LXEOI4YA" name="HW_ProcessingMemory">
    <ownedComment xmi:id="_vucun52TEeCg6sqGpS8R3g">
      <body>HW_ProcessingMemory is an abstract concept from the HW_Storage package.

HW_ProcessingMemory is an abstract concept that symbolizes fast and volatile working memories. Consequently it has a replacement policy (F.9.56) and a write policy (F.9.59). Example: caches, RAMs, buffers.</body>
    </ownedComment>
    <generalization xmi:id="_BROOYIukEeCrt4LXEOI4YA" general="_BOd1UYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPL0oukEeCrt4LXEOI4YA" name="SchedulableResource">
    <ownedComment xmi:id="_vucuoJ2TEeCg6sqGpS8R3g">
      <body>A SchedulableResource is defined as a kind of ConcurrencyResource with logical concurrency.

A SchedulableResource is defined as a kind of ConcurrencyResource with logical concurrency. This means that it takes the processing capacity from another active protected resource, usually a ProcessingResource, and competes for it with others linked to the same scheduler under the basis of the concrete scheduling parameters that each SchedulableResource has associated. In the case of hierarchical scheduling, schedulers other than the main scheduler are represented by the SecondaryScheduler concept. This kind of scheduler does not receive processing capacity directly from a processing resource, instead it receives it from a schedulableResource, which is in its turn effectively scheduled by another scheduler. These intermediate schedulableResources play the role of a virtual processing resource, conducting the fraction of capacity they receive from their host scheduler to its dependent secondaryScheduler.</body>
    </ownedComment>
    <generalization xmi:id="_BQRMIIukEeCrt4LXEOI4YA" general="_BPRGkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPL04ukEeCrt4LXEOI4YA" name="CommunicationStep">
    <ownedComment xmi:id="_vucuoZ2TEeCg6sqGpS8R3g">
      <body>A CommunicationStep is an operation of sending a message over a CommunicationsResource that connects the host of its predecessor Step, to the host of its successor Step.

</body>
    </ownedComment>
    <generalization xmi:id="_BRgiQIukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPL1IukEeCrt4LXEOI4YA" name="Parameter1">
    <ownedComment xmi:id="_vucuop2TEeCg6sqGpS8R3g">
      <body>Parameter matches with the UML concept of Parameter. We show below only the associations, attributes, and constraints that are relevant for the VSL specification. 705

A parameter specifies how arguments are passed into or out of an invocation of an operation. The type and multiplicity of a parameter restrict what values can be passed, how many, and whether the values are ordered. A parameter may be given a name, which then identifies the parameter uniquely within the parameters of the same operation. If it is unnamed, it is distinguished only by its position in the ordered list of parameters.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPy4IukEeCrt4LXEOI4YA" name="HW_TimingResource">
    <ownedComment xmi:id="_vucuo52TEeCg6sqGpS8R3g">
      <body>HW_TimingResource is a high-level concept from the HW_Timing package.

HW_TimingResource is an abstract concept that denotes a timing resource. Example: watchdogs, timers, clocks.</body>
    </ownedComment>
    <generalization xmi:id="_BQHbIYukEeCrt4LXEOI4YA" general="_BOg4oYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQICMIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOPy4YukEeCrt4LXEOI4YA" name="BFeatureKind">
    <ownedComment xmi:id="_vucupJ2TEeCg6sqGpS8R3g">
      <body>BFeatureKind is an enumeration, which literals specify the kind of behavioral features related to message ports. Literals &amp;#226;&amp;#8364;&amp;#162; Provided: the behavioral feature is provided by the port of the owning entity. &amp;#226;&amp;#8364;&amp;#162; Required: the behavioral feature is provided by the port of the owning entity.

The type attribute of an AssemblyPart refers to a StructuredComponent. It means that this specific component is instantiated and used in an assembly to define the structure of another StructuredComponent.</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOPy4oukEeCrt4LXEOI4YA" name="Provided:"/>
    <ownedLiteral xmi:id="_BOPy44ukEeCrt4LXEOI4YA" name="Required:"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOPy5IukEeCrt4LXEOI4YA" name="HW_PLD">
    <ownedComment xmi:id="_vucupZ2TEeCg6sqGpS8R3g">
      <body>HW_PLD is a programmable computing resource from the HW_Computing package.

HW_PLD (Programmable Logic Device) is a computing resource in which functions are hardwired. It has a special organization (F.9.53) and it may own several IPs, hardwired or not, such as processors, memories, analogic devices, and so on. The functions are represented by bit streams that are injected into the PLD through interfaces. The HW_PLD can be dynamically reconfigured, depending on the underlying technology (F.9.54). 655 Example: an FPGA may contain many processors, arithmetic blocks and some amount of RAM.</body>
    </ownedComment>
    <generalization xmi:id="_BQE-4IukEeCrt4LXEOI4YA" general="_BPgXIIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOQZ8IukEeCrt4LXEOI4YA" name="InstantExpression">
    <ownedComment xmi:id="_vucupp2TEeCg6sqGpS8R3g">
      <body>

InstantExpression is a time expression that denotes a time instant value.</body>
    </ownedComment>
    <generalization xmi:id="_BP708IukEeCrt4LXEOI4YA" general="_BPmdwIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOQZ8YukEeCrt4LXEOI4YA" name="SaStep">
    <ownedComment xmi:id="_vucup52TEeCg6sqGpS8R3g">
      <body>An SaStep is a kind of Step that begin and end when decisions about the allocation of system resources are made, as for example when changing its priority.

The ordering of steps follows a predecessor-successor pattern, with the possibility of multiple concurrent successors and predecessors, stemming from concurrent thread joins and forks respectively. The granularity of a step is often a modeling choice that depends on the level of detail that is being considered. A SaStep at one level of abstraction may be decomposed further into a set of finer-grained steps. In this model, steps use the active resource services for execution by means of schedulable resources (e.g., threads, process in execution resources).</body>
    </ownedComment>
    <generalization xmi:id="_BQPW8IukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOQZ8oukEeCrt4LXEOI4YA" name="HW_Port">
    <ownedComment xmi:id="_vumfkJ2TEeCg6sqGpS8R3g">
      <body>HW_Port is a physical entity from the HW_Layout package.

HW_Port is a particular HW_Component where external equipments are plugged. Conventionally, HW_Port may be male or female. Example: USB serial port, DIMM memory slot.</body>
    </ownedComment>
    <generalization xmi:id="_BP0gMYukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOQZ84ukEeCrt4LXEOI4YA" name="ExpressionContext">
    <ownedComment xmi:id="_vumfkZ2TEeCg6sqGpS8R3g">
      <body>

Variables are declared in a given Expression Context. The Expression Context&amp;#226;&amp;#8364;&amp;#8482;s name attribute is used for identification of the variable elements. An Expression Context provides a container for variables. It provides a means for resolving conflicting global variables by allowing Variable Call Expressions of the form ExprContext1::SubContext2::varX.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOQZ9IukEeCrt4LXEOI4YA" name="Perf_ResourcesPlatform">
    <ownedComment xmi:id="_vumfkp2TEeCg6sqGpS8R3g">
      <body>The collection of resources for this AnalysisContext

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORBAIukEeCrt4LXEOI4YA" name="StaticUsage">
    <ownedComment xmi:id="_vumfk52TEeCg6sqGpS8R3g">
      <body>A StaticUsage represents a usage with no temporal assumption eventually occurring in response to an UsageDemand.

A StaticUsage represents a usage with no temporal assumption, in such a way that it may represent the usage that occurs inside a simple action as well as the full usage of a set of resources from the platform due to the operation of the whole system. A few concrete forms of usage are defined at this level of specification; those are aimed to represent the consumption of memory, the time taken from a CPU, the energy from a power supply and the number of bytes to be sent through a network.</body>
    </ownedComment>
    <generalization xmi:id="_BPqIIIukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORBAYukEeCrt4LXEOI4YA" name="DurationExpression">
    <ownedComment xmi:id="_vumflJ2TEeCg6sqGpS8R3g">
      <body>

DurationExpression is a time expression that denotes a duration value.</body>
    </ownedComment>
    <generalization xmi:id="_BP5_wIukEeCrt4LXEOI4YA" general="_BPmdwIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORBAoukEeCrt4LXEOI4YA" name="BehavioredClassifier">
    <ownedComment xmi:id="_vumflZ2TEeCg6sqGpS8R3g">
      <body>A behavioredClassifier is a kind of classifier that represents the context in which behaviors may be specified.

A behavioredClassifier represents the context in which behaviors may be specified. It exposes concrete behavior specifications to illustrate specific scenarios of interest associated with that classifier, such as the start-up scenario. The particular behavior specification used to represent the behavior that starts executing when instances of that classifier are created and started is called main behavior. For many real-time concurrent systems, this can be, for example, the behavior that initiates the activity of a thread, which continues until the thread is terminated.</body>
    </ownedComment>
    <generalization xmi:id="_BRfUIYukEeCrt4LXEOI4YA" general="_BOVScIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORBA4ukEeCrt4LXEOI4YA" name="ValueType">
    <ownedComment xmi:id="_vumflp2TEeCg6sqGpS8R3g">
      <body>A ValueType is a type whose instances are identified only by value specifications. A ValueType contains specific attributes to support the modeling of tuple types representing physical quantities.

A ValueType is a type whose instances are identified only by value specifications. A ValueType contains specific attributes to support the modeling of tuple types representing physical quantities.</body>
    </ownedComment>
    <generalization xmi:id="_BRWKMYukEeCrt4LXEOI4YA" general="_BOTdQYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORBBIukEeCrt4LXEOI4YA" name="RequestedService">
    <ownedComment xmi:id="_vumfl52TEeCg6sqGpS8R3g">
      <body>

</body>
    </ownedComment>
    <generalization xmi:id="_BRCBIIukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORoEIukEeCrt4LXEOI4YA" name="TimedEventOccurrence">
    <ownedComment xmi:id="_vumfmJ2TEeCg6sqGpS8R3g">
      <body>EventOccurrences) This is a generic concept of an event occurrence that may be assigned an instant value on clocks.

A TimedEventOccurrence is an EventOccurrence and a TimedElement. As a TimedElement, it refers to clocks. The at property specifies the InstantValue of the event occurrence of this TimedEventOccurrence on any of its on clocks.</body>
    </ownedComment>
    <generalization xmi:id="_BRX_YYukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRYmcIukEeCrt4LXEOI4YA" general="_BOr3wIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORoEYukEeCrt4LXEOI4YA" name="CacheStructure">
    <ownedComment xmi:id="_vumfmZ2TEeCg6sqGpS8R3g">
      <body>CacheStructure is a cache structure tupletype from the HW_Storage package.

The cache is organized under sets of blocks. Associativity value is the number of blocks within one set. Consequently, the cache size is the product of these three attributes. If the associativity value is 1, cache is direct mapped. Otherwise if the nbSets value is 1, the cache is fully associative. Detailed description of the cache structure is necessary for performance simulation of HW_Processors. Example: TLB (Transfer Lookaside Buffer) is typically a fully associative cache.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORoEoukEeCrt4LXEOI4YA" name="HW_ISA">
    <ownedComment xmi:id="_vumfmp2TEeCg6sqGpS8R3g">
      <body>HW_ISA is a part of HW_Processor microarchitecture from the HW_Computing package.

ISA (Instruction Set Architecture) is a metaclass which models the HW_Processor implemented instruction set architectures. It has a family (x86, ARM, MIPS), an instruction width and a given type (F.9.50). The HW_Processor microarchitecture is tightly dependent of the supported ISAs. Therefore HW_ISA metaclass may be refined to a detailed model for HW_Processor simulation or ISS (Instuction Set Simulator) generation. Example: Intel 386 is a 32-bit CISC architecture from the x86 family.</body>
    </ownedComment>
    <generalization xmi:id="_BQGNAIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BORoE4ukEeCrt4LXEOI4YA" name="HW_Component">
    <ownedComment xmi:id="_vumfm52TEeCg6sqGpS8R3g">
      <body>HW_Component is the main physical entity of the HW_layout package.

HW_Component is the main metaclass of the hardware physical model. It is an abstraction of any hardware real entity based on its physical properties. It could be basic or composed of many other subcomponents. The dimensions attribute represents in order, the length, the width and the height of the HW_Component. It should correspond to the smallest cuboid that encloses the HW_Component. This attribute is optional. The area attribute is the product of the length and the width of the HW_Component dimensions if specified, elsewhere the default value is 0. Each composite HW_Component may be considered as a rectilinear grid where subcomponents are located in their corresponding positions. A position is a collection of contiguous rectangles within the grid. Each HW_Component could also be annotated by its weight, its price and many required environmental conditions (F.9.5). These characteristics detailed above are crucial for layout, cost and power analysis. Example: chips (HW_Chip), batteries (HW_Battery)&amp;#226;&amp;#8364;&amp;#166;</body>
    </ownedComment>
    <generalization xmi:id="_BQTBUIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOSPIIukEeCrt4LXEOI4YA" name="CallConcurencyKind">
    <ownedComment xmi:id="_vumfnJ2TEeCg6sqGpS8R3g">
      <body>CallConcurencyKind is an enumeration that literals specify the concurrency policy applied to a protected passive unit. Literals &amp;#226;&amp;#8364;&amp;#162; sequential A schedulable resource at a time can access a feature of a protected passive unit. &amp;#226;&amp;#8364;&amp;#162; guarded A schedulable resource at a time can access a feature of a protected passive unit while concurrent ones are suspended. &amp;#226;&amp;#8364;&amp;#162; concurrent Multiple schedulable resources at a time can access a protected passive unit.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOSPIYukEeCrt4LXEOI4YA" name="sequential"/>
    <ownedLiteral xmi:id="_BOSPIoukEeCrt4LXEOI4YA" name="guarded"/>
    <ownedLiteral xmi:id="_BOSPI4ukEeCrt4LXEOI4YA" name="concurrent"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOSPJIukEeCrt4LXEOI4YA" name="PropertyCallExpression">
    <ownedComment xmi:id="_vumfnZ2TEeCg6sqGpS8R3g">
      <body>

A Property Call Expression is used to refer to Properties in the UML metamodel.</body>
    </ownedComment>
    <generalization xmi:id="_BQToYYukEeCrt4LXEOI4YA" general="_BOLhd4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOSPJYukEeCrt4LXEOI4YA" name="DurationValue">
    <ownedComment xmi:id="_vumfnp2TEeCg6sqGpS8R3g">
      <body>A duration value is a time value that characterizes a time span measured on its onClock clock.

A duration value is a time value that characterizes the time span of a time interval measured on its onClock clock. In the simple case when the clock has no defined maximalValue, the DurationValue of a TimeIntervalValue is defined by the difference between the max and min instant values of this time interval value. When the maximalValue property is defined, the DurationValue is defined as the difference modulo maximalValue between the max and min instant values of this time interval value.</body>
    </ownedComment>
    <generalization xmi:id="_BRWKMIukEeCrt4LXEOI4YA" general="_BOayAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOSPJoukEeCrt4LXEOI4YA" name="NFP_Type">
    <ownedComment xmi:id="_vumfn52TEeCg6sqGpS8R3g">
      <body>An NFP type is a type whose instances are identified only by NFP value specifications. An NFP Type contains specific attributes to support the modeling of NFP tuple types.

An NFP Type constrains the values represented by an NFP. If an NFP type has attributes, then instances of that NFP type will contain attribute values matching the attributes.</body>
    </ownedComment>
    <generalization xmi:id="_BRcQ0YukEeCrt4LXEOI4YA" general="_BOTdQYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOS2MIukEeCrt4LXEOI4YA" name="CallOperationAction">
    <ownedComment xmi:id="_vuvpgJ2TEeCg6sqGpS8R3g">
      <body>A CallOperationAction is an action that invokes an operation provided by other connected components and may receive a return value.

This concept mimics the UML concept of CallOperationAction defined in the package UML::BasicActions.</body>
    </ownedComment>
    <generalization xmi:id="_BRPcgIukEeCrt4LXEOI4YA" general="_BOYVwYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOS2MYukEeCrt4LXEOI4YA" name="TimedObserver">
    <ownedComment xmi:id="_vuvpgZ2TEeCg6sqGpS8R3g">
      <body>TimedObservers are conceptual entities that collect timing requirements and predictions related to a pair of user-defined observed events. In this sense, TimedObserver uses TimedInstantObservations (from the Time sub-profile) to define the observed event in a given behavioral model. Normally the observer expresses constraints on the duration between the two time observations, named startObs and endObs.

TimedObservers are conceptual entities that collect timing requirements and predictions related to a pair of user-defined observed events. In this sense, TimedObserver uses TimedInstantObservations (from the Time sub-profile) to define the observed event in a given behavioral model. Normally the observer expresses constraints on the duration between the two time observations, named startObs and endObs. Timing observers are a powerful mechanism to annotate and compare timing constraints against timing predictions provided by analysis tools.</body>
    </ownedComment>
    <generalization xmi:id="_BRO1cIukEeCrt4LXEOI4YA" general="_BObZEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOS2MoukEeCrt4LXEOI4YA" name="ConnectorKind">
    <ownedComment xmi:id="_vuvpgp2TEeCg6sqGpS8R3g">
      <body>An enumeration literal used to specify the way a Connector is used. 611 Literals &amp;#226;&amp;#8364;&amp;#162; delegation The connector is used to specify a link between a port of a structured component and the internal of this component. &amp;#226;&amp;#8364;&amp;#162; assembly The connector is used to specify a link between elements in the same hierarchy level.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOS2M4ukEeCrt4LXEOI4YA" name="delegation"/>
    <ownedLiteral xmi:id="_BOS2NIukEeCrt4LXEOI4YA" name="assembly"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOTdQIukEeCrt4LXEOI4YA" name="OperationCallExpression">
    <ownedComment xmi:id="_vuvpg52TEeCg6sqGpS8R3g">
      <body>

An Operation Call Expression refers to an operation defined in a UML Classifier. The expression may contain a list of argument expressions if the operation is defined to have parameters. In this case, the number and types of the arguments must match the parameters.</body>
    </ownedComment>
    <generalization xmi:id="_BQYg4YukEeCrt4LXEOI4YA" general="_BOLhd4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOTdQYukEeCrt4LXEOI4YA" name="TupleType">
    <ownedComment xmi:id="_vuvphJ2TEeCg6sqGpS8R3g">
      <body>

Tuple Type combines different types into a single composite type. The parts of a Tuple Type are described by its attributes, each having a name and a type. There is no restriction on the kind of types that can be used as part of a tuple. In particular, a Tuple Type may contain other tuple types and collection types. Each attribute of a TupleType represents a single feature of a TupleType. Each part is uniquely identified by its name.</body>
    </ownedComment>
    <generalization xmi:id="_BRfUIIukEeCrt4LXEOI4YA" general="_BOPL0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOTdQoukEeCrt4LXEOI4YA" name="CommunicationHost">
    <ownedComment xmi:id="_vuvphZ2TEeCg6sqGpS8R3g">
      <body>A physical communications link. 673

</body>
    </ownedComment>
    <generalization xmi:id="_BRQDkIukEeCrt4LXEOI4YA" general="_BOKTUIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRQDkYukEeCrt4LXEOI4YA" general="_BObZEoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRQqoIukEeCrt4LXEOI4YA" general="_BOLhcIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOTdQ4ukEeCrt4LXEOI4YA" name="ObservationCallExpression">
    <ownedComment xmi:id="_vuvphp2TEeCg6sqGpS8R3g">
      <body>

Observation Call Expression refers to a single observation (instant and duration observation). It includes an occurrence index expression (occurIndexExpr) that must evaluate to an integer value. Condition expression defines an operational (run-time) condition that completes the definition of a relative event.</body>
    </ownedComment>
    <generalization xmi:id="_BQeAcoukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOUEUIukEeCrt4LXEOI4YA" name="LiteralInteger">
    <ownedComment xmi:id="_vuvph52TEeCg6sqGpS8R3g">
      <body>LiteralInteger matches with the UML concept of LiteralInteger. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

A LiteralInteger specifies a constant Integer value.</body>
    </ownedComment>
    <generalization xmi:id="_BQCioIukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOUEUYukEeCrt4LXEOI4YA" name="ISA_Type">
    <ownedComment xmi:id="_vuvpiJ2TEeCg6sqGpS8R3g">
      <body>ISA_Type is an enumeration. Literals &amp;#226;&amp;#8364;&amp;#162; RISC Reduced Instruction Set Computer &amp;#226;&amp;#8364;&amp;#162; CISC Complex Instruction Set Computer &amp;#226;&amp;#8364;&amp;#162; VLIW Very Long Instruction Word &amp;#226;&amp;#8364;&amp;#162; SIMD Single Instruction Multiple Data &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef 667

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOUEUoukEeCrt4LXEOI4YA" name="RISC"/>
    <ownedLiteral xmi:id="_BOUEU4ukEeCrt4LXEOI4YA" name="CISC"/>
    <ownedLiteral xmi:id="_BOUEVIukEeCrt4LXEOI4YA" name="VLIW"/>
    <ownedLiteral xmi:id="_BOUEVYukEeCrt4LXEOI4YA" name="SIMD"/>
    <ownedLiteral xmi:id="_BOUEVoukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BOUEV4ukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOUrYIukEeCrt4LXEOI4YA" name="ResourcesPlatform">
    <ownedComment xmi:id="_vuvpiZ2TEeCg6sqGpS8R3g">
      <body>A logical container for the resources used in an analysis context.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOUrYYukEeCrt4LXEOI4YA" name="DurationPredicate">
    <ownedComment xmi:id="_vuvpip2TEeCg6sqGpS8R3g">
      <body>DurationPredicate is a predicate on a duration expression.

DurationPredicate is a predicate on a duration expression. Note that the expression may involve two TimedInstantObservation, say t1 and t2, a TimedDurationObservation, say d, and use &amp;#226;&amp;#8364;&amp;#339;(t1-t2)+d,&amp;#226;&amp;#8364;&amp;#65533; which effectively denotes a duration.</body>
    </ownedComment>
    <generalization xmi:id="_BP2VYIukEeCrt4LXEOI4YA" general="_BORBAYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOUrYoukEeCrt4LXEOI4YA" name="TimerResource">
    <ownedComment xmi:id="_vu5agJ2TEeCg6sqGpS8R3g">
      <body>A TimerResource represents a hardware or software entity that is capable of following and evidencing the pace of time upon demand with a prefixed maximum resolution, at programmable time intervals.

A TimerResource represents a hardware or software entity that is capable of following and evidencing the pace of time upon demand with a prefixed maximum resolution, usually with the usage of its reference clock. The TimerResource will make evident the arrival of the programmed duration time after the instant of its last starting or resetting. When the attribute is Periodic is set to true the timer will indicate the arrival of a new finalization of the programmed interval in a periodic repetitive way, if set to false it will do it only one time after it is started. As any TimingResource, the services and the concrete mechanisms used by a TimerResource to offer them are to be furtherly refined as necessary according to the hardware or software nature of the timer and its reference clock.</body>
    </ownedComment>
    <generalization xmi:id="_BRTG4IukEeCrt4LXEOI4YA" general="_BOg4oYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOVScIukEeCrt4LXEOI4YA" name="Classifier">
    <ownedComment xmi:id="_vu5agZ2TEeCg6sqGpS8R3g">
      <body>An abstract concept representing some kind of design-time specification. This concept includes all kinds of descriptors such as classifiers, collaborations, data types, etc.

In the context of the duality classifier-instance, a classifier represents a generic pattern that acts as a design-time specification to which any instance made from it must conform. This concept includes all kinds of descriptors such as classifiers, collaborations, data types, etc. It is generally assumed that every instance element in the domain model may have an implicit or explicit classifier. Properties are used to describe particular aspects of a Classifier.</body>
    </ownedComment>
    <generalization xmi:id="_BRGSkIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOVScYukEeCrt4LXEOI4YA" name="ExecutionStep">
    <ownedComment xmi:id="_vu5agp2TEeCg6sqGpS8R3g">
      <body>An ExecutionStep is a primitive functional operation, modeling a sequential computation on a ProcessingHost.

</body>
    </ownedComment>
    <generalization xmi:id="_BQP-AIukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOVScoukEeCrt4LXEOI4YA" name="SchedulingPolicy">
    <ownedComment xmi:id="_vu5ag52TEeCg6sqGpS8R3g">
      <body>It provides or determines the set of rules necessary to arrange scheduling at run time.

It provides or determines the set of rules necessary to arrange scheduling at run time. The concept of scheduling policy as it is presented here corresponds to the scheduling mechanism described in section 6.1.1 of SPT, since it refers specifically to the order to choose threads for execution.</body>
    </ownedComment>
    <generalization xmi:id="_BQNhwIukEeCrt4LXEOI4YA" general="_BOXHooukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOVSc4ukEeCrt4LXEOI4YA" name="HW_Device">
    <ownedComment xmi:id="_vu5ahJ2TEeCg6sqGpS8R3g">
      <body>HW_Device is a high level concept from the HW_Device package.

HW_Device is a high level metaclass. It denotes any resource attached to the platform in order to expand its functionality. Example: sensors, displays (HW_I/O), power regulators (HW_Support).</body>
    </ownedComment>
    <generalization xmi:id="_BQDwwIukEeCrt4LXEOI4YA" general="_BO7vYoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQEX0IukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOV5gIukEeCrt4LXEOI4YA" name="EnumerationSpecification">
    <ownedComment xmi:id="_vu5ahZ2TEeCg6sqGpS8R3g">
      <body>EnumerationSpecification defines the value instance of an enumeration literal.

EnumerationSpecification defines the value instance of an enumeration literal.</body>
    </ownedComment>
    <generalization xmi:id="_BQo_koukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOV5gYukEeCrt4LXEOI4YA" name="PrecedenceRelation1">
    <ownedComment xmi:id="_vvCkcJ2TEeCg6sqGpS8R3g">
      <body>

The relationship between successive Steps. The precedence relations play the role of the connectors.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOV5goukEeCrt4LXEOI4YA" name="Release">
    <ownedComment xmi:id="_vvCkcZ2TEeCg6sqGpS8R3g">
      <body>Release represents the de-allocation or liberation of some &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; from the resource.

Release corresponds to the de-allocation of some &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; from the resource. For example, for a resource representing storage, the amount could be the memory size. As another example, a resource could represent a single element (maximum amount available is &amp;#226;&amp;#8364;&amp;#339;1&amp;#226;&amp;#8364;&amp;#65533;), and release could be used to model the unlock in a mutually exclusive access situation.</body>
    </ownedComment>
    <generalization xmi:id="_BP-RMIukEeCrt4LXEOI4YA" general="_BOMvlYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOV5g4ukEeCrt4LXEOI4YA" name="TupleItemValue">
    <ownedComment xmi:id="_vvCkcp2TEeCg6sqGpS8R3g">
      <body>

TupleItemValue assigns a value specification to instances of the called attributes of a TupleType.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOWgkIukEeCrt4LXEOI4YA" name="Subtype">
    <ownedComment xmi:id="_vvCkc52TEeCg6sqGpS8R3g">
      <body>

A Subtype is a data type derived from an existing data type, designated the base data type, by restricting the value space to a subset of that to the base data type while maintaining all operations.</body>
    </ownedComment>
    <generalization xmi:id="_BRJ88IukEeCrt4LXEOI4YA" general="_BOfDcoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOWgkYukEeCrt4LXEOI4YA" name="ClockResource">
    <ownedComment xmi:id="_vvCkdJ2TEeCg6sqGpS8R3g">
      <body>A ClockResource represents a hardware or software entity that is capable of following and evidencing the pace of time upon demand with a prefixed resolution.

A ClockResource represents a hardware or software entity that is capable of following and evidencing the pace of time upon demand with a prefixed resolution. The services and the concrete mechanisms used by a ClockResource to offer them are to be further refined as necessary according to the hardware or software nature of the clock.</body>
    </ownedComment>
    <generalization xmi:id="_BQ76gIukEeCrt4LXEOI4YA" general="_BOg4oYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOWgkoukEeCrt4LXEOI4YA" name="WorkloadGenerator">
    <ownedComment xmi:id="_vvCkdZ2TEeCg6sqGpS8R3g">
      <body>A mechanism that optionally may serve to create an event stream to trigger a behavior. It may be defined internally by a state machine.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOXHoIukEeCrt4LXEOI4YA" name="PhysicalTime">
    <ownedComment xmi:id="_vvCkdp2TEeCg6sqGpS8R3g">
      <body>Physical time is an abstract concept in MARTE. Physical time does not directly participate in the model.

Physical time is considered as a continuous and unbounded progression of physical instants. Physical time is assumed to progress monotonically (with respect to any particular observer) and only in the forward direction. For a given observer, it can be modeled as a dense time base.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOXHoYukEeCrt4LXEOI4YA" name="HW_StorageManager">
    <ownedComment xmi:id="_vvMVcJ2TEeCg6sqGpS8R3g">
      <body>HW_StorageManager is a storage broker concept from the HW_Storage package.

HW_StorageManager denotes an abstract memory broker which manages the access or/and the content of some controlled memories. Example: HW_Processor, HW_MMU, HW_DMA.</body>
    </ownedComment>
    <generalization xmi:id="_BRRRsIukEeCrt4LXEOI4YA" general="_BOLhcYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRRRsYukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRR4wIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOXHooukEeCrt4LXEOI4YA" name="AccesControlPolicy">
    <ownedComment xmi:id="_vvMVcZ2TEeCg6sqGpS8R3g">
      <body>The AccesControlPolicy determines the rules for regulating access to the resources controlled by a broker.

The AccesControlPolicy determines the rules for regulating access to the resources controlled by a broker.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOXusIukEeCrt4LXEOI4YA" name="AcquireStep">
    <ownedComment xmi:id="_vvMVcp2TEeCg6sqGpS8R3g">
      <body>

</body>
    </ownedComment>
    <generalization xmi:id="_BRLLEIukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOXusYukEeCrt4LXEOI4YA" name="HW_ResourceService">
    <ownedComment xmi:id="_vvMVc52TEeCg6sqGpS8R3g">
      <body>HW_ResourceService is the main behavior concept of the Hardware Resource Model.

HW_ResourceService denotes a service that one HW_ Resource provides and others require. It is mainly used within the logical model where HW_Resources are classified depending on their functionalities. Collaborations of resources by means of their services characterize the execution platform. An HW_ResourceService could be detailed by behavior views. Example: read/write services of an HW_Memory.</body>
    </ownedComment>
    <generalization xmi:id="_BPqvMoukEeCrt4LXEOI4YA" general="_BOMvlYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOXusoukEeCrt4LXEOI4YA" name="HW_PowerDescriptor">
    <ownedComment xmi:id="_vvMVdJ2TEeCg6sqGpS8R3g">
      <body>HW_PowerDescriptor is the main feature of the HW_Power package.

HW_PowerDescriptor is a power description feature. It may be attached to an HW_Component and its HW_ResourceServices. This feature is composed of two instantaneous measures: the power consumption and the heat dissipation. Such properties are crucial for hardware power analysis. Example: an Intel Pentium processor clocked at 200MHz consumes about 3W when idle but more than 15W under max load.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOYVwIukEeCrt4LXEOI4YA" name="RtAction">
    <ownedComment xmi:id="_vvMVdZ2TEeCg6sqGpS8R3g">
      <body>A real-time action is an action that may specify real-time characteristics by the means of a real-time feature. It may also define a synchronization kind and a message size, both related to the execution of the action.

An RtAction is an Action specialized with the additional aforementioned attributes of &amp;#226;&amp;#8364;&amp;#339;real-time&amp;#226;&amp;#8364;&amp;#65533; constraints.</body>
    </ownedComment>
    <generalization xmi:id="_BRcQ0IukEeCrt4LXEOI4YA" general="_BOYVwYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOYVwYukEeCrt4LXEOI4YA" name="InvocationAction">
    <ownedComment xmi:id="_vvMVdp2TEeCg6sqGpS8R3g">
      <body>An InvocationAction defines common invocation mechanisms used in the Generic Component Model.

An Invocation action is an abstract class that factorizes invocation mechanisms common client-server and dataflow communications. It is very similar the UML concept of InvocationAction defined in the package UML::BasicActionsNone.</body>
    </ownedComment>
    <generalization xmi:id="_BRbpwYukEeCrt4LXEOI4YA" general="_BOK6Y4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOYVwoukEeCrt4LXEOI4YA" name="RtService">
    <ownedComment xmi:id="_vvMVd52TEeCg6sqGpS8R3g">
      <body>An RtService can specify the real-time features described by its attributes. Generalization &amp;#226;&amp;#8364;&amp;#162; Service (from MARTE::GRM::ResourceCore)

An RtService is a Service specialized with the additional aforementioned attributes of &amp;#226;&amp;#8364;&amp;#339;real-time&amp;#226;&amp;#8364;&amp;#65533; constraints. These attributes apply for all the invocations of the RtService. 621</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOYVw4ukEeCrt4LXEOI4YA" name="ClockConstraint">
    <ownedComment xmi:id="_vvMVeJ2TEeCg6sqGpS8R3g">
      <body>A clock constraint constrains two or more clocks. &amp;#226;&amp;#8364;&amp;#162; Generalizations &amp;#226;&amp;#8364;&amp;#162; NfpConstraint (from NFPs::NFP_Annotation)

A clock constraint constrains two or more clocks. The specification of the constraint is expressed by a clock expression.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOY80IukEeCrt4LXEOI4YA" name="EnumerationLiteral">
    <ownedComment xmi:id="_vvMVeZ2TEeCg6sqGpS8R3g">
      <body>An EnumerationLiteral defines an element of the run-time extension of an enumeration data type.

An EnumerationLiteral defines an element of the run-time extension of an enumeration data type. An EnumerationLiteral has a name that can be used to identify it within its enumeration datatype. The enumeration literal name is scoped within and must be unique within its enumeration. The run-time values corresponding to enumeration literals can be compared for equality.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOY80YukEeCrt4LXEOI4YA" name="RtUnit">
    <ownedComment xmi:id="_vvMVep2TEeCg6sqGpS8R3g">
      <body>A real-time unit is similar to the active object of UML but with a more detailed semantics description.

A real-time unit is similar to the active object of UML but with a more detailed semantics description. It owns at least one schedulable resource but can also have several ones. If its dynamic attribute is set to true, the resources are created dynamically when required. In the other case, the real-time unit has a pool of scheduling resources. When no schedulable resources are available in the possible, the real-time unit may either wait indefinitely for a resource to be released, or wait only a given amount of time (specified by its poolWaitingTime attribute), or dynamically increase its pool of thread to adapt to the demand, or generate an exception. A real-time unit may own behaviors. It also owns a message queue used to store incoming messages. The size of this message queue may be infinite or limited. In the latter case, the queue size is specified by its maxSize attribute. In addition, a real-time unit owns a specific behavior, called operational mode. This behavior takes usually the form of a state-based behavior where states represent a configuration of the real-time unit and transition denotes reconfigurations of the unit.</body>
    </ownedComment>
    <generalization xmi:id="_BQIpQYukEeCrt4LXEOI4YA" general="_BORBAoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQJ3YIukEeCrt4LXEOI4YA" general="_BPRGkIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQKecIukEeCrt4LXEOI4YA" general="_BO4FAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOY80oukEeCrt4LXEOI4YA" name="Trigger">
    <ownedComment xmi:id="_vvMVe52TEeCg6sqGpS8R3g">
      <body>A Trigger specifies the event and conditions that may trigger a behavior execution.

A Trigger specifies the event and conditions that may trigger a behavior execution. It handles as well any necessary constraints on the event to filter out event occurrences not of interest. Indeed, a Trigger is the concept that relates an Event to a Behavior that may affect instances of the behavioral classifier. Triggers specify what can cause execution of behaviors (e.g., the execution of the effect activity of a transition in a state machine).</body>
    </ownedComment>
    <generalization xmi:id="_BQa9IIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOZj4IukEeCrt4LXEOI4YA" name="Allocation">
    <ownedComment xmi:id="_vvMVfJ2TEeCg6sqGpS8R3g">
      <body>Allocation is a mechanism for associating elements from a logical context, application model elements, to named elements described in a more physical context, execution platform model elements.

An Allocation represents either a possible allocation, in which case, a space exploration tool may determine what the best allocations are, or an actual allocation in the system. The context in which the allocate dependency is used should be sufficient to know in which case we are. When it is not the case, the kind of the constraints may help in determining whether the allocation is required, offered, etc. 605 The purpose of the impliedConstraint association is to explicitly identify what are the constraints that only apply if or when the allocation is performed.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOZj4YukEeCrt4LXEOI4YA" name="HW_Arbiter">
    <ownedComment xmi:id="_vvMVfZ2TEeCg6sqGpS8R3g">
      <body>HW_Arbiter is a communication broker concept from the HW_Communication package.

HW_Arbiter is a communication broker resource. It controls at least one HW_Media and performs arbitration among the multiple masters that are connected. It could implement any arbitration strategy as a provided HW_ResourceService. Note that a bus master is a transient role of an HW_EndPoint during a communication transfer. That is fundamentally different from the HW_Arbiter concept. Example: an HW_Processor is often arbitrating its system bus and it may temporarily delegate this task to an associated HW_DMA.</body>
    </ownedComment>
    <generalization xmi:id="_BQz-sIukEeCrt4LXEOI4YA" general="_BOhfsYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQz-sYukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOZj4oukEeCrt4LXEOI4YA" name="HW_Sensor">
    <ownedComment xmi:id="_vvMVfp2TEeCg6sqGpS8R3g">
      <body>

Sensor is a device that measures a physical quantity and converts it into a signal that can be read by an observer or by an instrument. For example, a mercury thermometer converts the measured temperature into expansion and contraction of a liquid, which can be read on a calibrated glass tube. A thermocouple converts temperature to an output voltage, which can be read by a voltmeter.</body>
    </ownedComment>
    <generalization xmi:id="_BQlVMIukEeCrt4LXEOI4YA" general="_BOlxIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOaK8IukEeCrt4LXEOI4YA" name="AssemblyConnector">
    <ownedComment xmi:id="_vvMVf52TEeCg6sqGpS8R3g">
      <body>An AssemblyConnector represents a specific interaction between ports and/or parts in the context of the definition of a StructuredComponent. An assembly connector defines at least two connector ends, which refers to type-compatible ports or components, depending on which element is connected. An assembly connector may be typed by an association defined between components. In that case, it represents a specific instantiation of this association in a composite structure.

This concept matches the definition of the CompositeStructures::InternalStructures::Connector classifier defined in UML. An assembly connector can be used to link components through ports, in that case both endPort and endPart association roles are used. They can be also used to directly link components, in that case the endPort association role is not used.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOaK8YukEeCrt4LXEOI4YA" name="TimeIntervalMembership">
    <ownedComment xmi:id="_vvWGcJ2TEeCg6sqGpS8R3g">
      <body>A time interval membership relation states that junction instants of a set are within a given time interval.

A time interval membership relation states that junction instants of a set are within a given time interval. Within must be interpreted in a broad sense: A member junction instant can be directly in the given time interval or coincident with a junction instant member of the interval.</body>
    </ownedComment>
    <generalization xmi:id="_BQ8hkIukEeCrt4LXEOI4YA" general="_BOqCkYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOaK8oukEeCrt4LXEOI4YA" name="Parameter">
    <ownedComment xmi:id="_vvWGcZ2TEeCg6sqGpS8R3g">
      <body>It is a typed element that may be owned by a behavior.

A parameter is a typed element that may be owned by a behavior. Values assigned to parameters are to be consistent with its type, and are used to characterize the different scenarios and variations of a behavior.</body>
    </ownedComment>
    <generalization xmi:id="_BRMZMIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOayAIukEeCrt4LXEOI4YA" name="TimeValue">
    <ownedComment xmi:id="_vvWGcp2TEeCg6sqGpS8R3g">
      <body>TimeValue is an abstract class for expressing instant values and duration values.

TimeValue is an abstract class for expressing instant values and duration values. Time values are related to a clock.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOayAYukEeCrt4LXEOI4YA" name="AllocationEnd">
    <ownedComment xmi:id="_vvWGc52TEeCg6sqGpS8R3g">
      <body>AllocationEnd is an abstract class that identifies elements involved in an allocation.

AllocationEnds are elements that have at least one allocation relationship with another element. This is an abstract class, concrete specialized allocation ends are provided to clarify whether the end is a source for the allocation or a target.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOayAoukEeCrt4LXEOI4YA" name="Perf_Workload_Behavior">
    <ownedComment xmi:id="_vvWGdJ2TEeCg6sqGpS8R3g">
      <body>A collection of workload and behavior for this AnalysisContext.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BObZEIukEeCrt4LXEOI4YA" name="NFP_Constraint">
    <ownedComment xmi:id="_vvWGdZ2TEeCg6sqGpS8R3g">
      <body>NFP Constraints are conditions or restrictions to modelled elements providing the ability to define if these are of &amp;#226;&amp;#8364;&amp;#339;required,&amp;#226;&amp;#8364;&amp;#65533; &amp;#226;&amp;#8364;&amp;#339;offered,&amp;#226;&amp;#8364;&amp;#65533; or &amp;#226;&amp;#8364;&amp;#339;contract&amp;#226;&amp;#8364;&amp;#65533; nature.

NFP Constraints are conditions or restrictions to modelled elements. Specifically, NFP constraints support textual expressions to specify assertions regarding performance, scheduling, and other embedded systems&amp;apos; features, and their relationship to other features by means of variables, mathematical, logical, and time expressions.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BObZEYukEeCrt4LXEOI4YA" name="LiteralUnlimitedNatural">
    <ownedComment xmi:id="_vvWGdp2TEeCg6sqGpS8R3g">
      <body>LiteralUnlimitedNatural matches with the UML concept of LiteralUnlimitedNatural. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

A LiteralUnlimitedNatural specifies a constant UnlimitedNatural value. 703</body>
    </ownedComment>
    <generalization xmi:id="_BQvtQIukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BObZEoukEeCrt4LXEOI4YA" name="ProcessingResource">
    <ownedComment xmi:id="_vvWGd52TEeCg6sqGpS8R3g">
      <body>A ProcessingResource generalizes the concepts of CommunicationMedia, ComputingResource, and active DeviceResource.

A ProcessingResource generalizes the concepts of CommunicationMedia, ComputingResource, and active DeviceResource. It introduces an element that abstracts the fundamental capability of performing any behavior assigned to the active classifiers of the modeled system. Fractions of this capacity are brought to the SchedulableResources that require it. The speedFactor attribute is a linear approximation of the relative speed of the unit as compared to the reference one. The reference processing resource is determined by setting its speedFactor to 1.0.</body>
    </ownedComment>
    <generalization xmi:id="_BRQqoYukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BObZE4ukEeCrt4LXEOI4YA" name="Resource">
    <ownedComment xmi:id="_vvWGeJ2TEeCg6sqGpS8R3g">
      <body>A resource represents a physically or logically persistent entity that offers one or more services. Resources and its services are the available means to perform the expected duties and/or satisfy the requirements for which the system under consideration is aimed.

A resource can be a &amp;#226;&amp;#8364;&amp;#339;black box,&amp;#226;&amp;#8364;&amp;#65533; in which case only the provided services are visible, or a &amp;#226;&amp;#8364;&amp;#339;white box,&amp;#226;&amp;#8364;&amp;#65533; in which case its internal structure, in terms of lower level resources, may be visible, and the services provided by the resource may be detailed based on collaborations of these lower level resources. Note that in the case of the platform provider for example, it is up to the modeler to represent it as: &amp;#226;&amp;#8364;&amp;#162; A black box resource (e.g., a real-time operating system), which abstracts the hardware hence considered as internal elements. &amp;#226;&amp;#8364;&amp;#162; A collaboration between a software layer and a hardware layer. &amp;#226;&amp;#8364;&amp;#162; A collaboration between basically hardware elements. In this case, software features of the execution platform may be represented by overheads on raw hardware performance figure. &amp;#226;&amp;#8364;&amp;#162; Any combination of these previous approaches depending on the type of development and analysis method applied by the user. 593 The rationale for deciding if an element in the execution platform should be represented as a resource in the platform model is more related to its criticality in terms of real-time behavior, rather than to its software or hardware nature. Therefore, the interface (i.e., the set of services) provided by the execution platform as a whole may be much simpler than the API (Application Programming Interface) visible to the application software. Of course, a model library describing a given platform may provide several views, corresponding to different anticipated use cases for the platform. A resource may be structurally described in terms of its internal resources - this is represented by the &amp;#226;&amp;#8364;&amp;#339;owner- ownedElement&amp;#226;&amp;#8364;&amp;#65533; association in Resource transitively inherited from ModelElement.</body>
    </ownedComment>
    <generalization xmi:id="_BRhwYYukEeCrt4LXEOI4YA" general="_BORBAoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRiXcIukEeCrt4LXEOI4YA" general="_BOHQBYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOcAIIukEeCrt4LXEOI4YA" name="IntervalSpecification">
    <ownedComment xmi:id="_vvWGeZ2TEeCg6sqGpS8R3g">
      <body>

An Interval defines the range between two value specifications. The semantics of an Interval is always related to Constraints in which it takes part.</body>
    </ownedComment>
    <generalization xmi:id="_BQxicoukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOcAIYukEeCrt4LXEOI4YA" name="HW_Timer">
    <ownedComment xmi:id="_vvfQYJ2TEeCg6sqGpS8R3g">
      <body>HW_Timer is a timed counter from the HW_Timing package.

HW_Timer is a set of independent counters clocked periodically with an inputClock. Each counter may be loaded with an initial value, and then accessed for current ones (example 14.2.4.1). The counter width determines its maximum measurement of cycles. Some HW_Timers allows merge of counters. Example: most of microcontrollers embed timers. 665</body>
    </ownedComment>
    <generalization xmi:id="_BRGSkYukEeCrt4LXEOI4YA" general="_BOPy4IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOcAIoukEeCrt4LXEOI4YA" name="EventKind">
    <ownedComment xmi:id="_vvfQYZ2TEeCg6sqGpS8R3g">
      <body>EventKind is an enumeration type that defines literals used to specify the kind of event used in a timed observation. Literals &amp;#226;&amp;#8364;&amp;#162; start Indicates that the typed elements is the start event of a behavior execution. &amp;#226;&amp;#8364;&amp;#162; finish Indicates that the typed elements is the finish event of a behavior execution. &amp;#226;&amp;#8364;&amp;#162; send Indicates that the typed elements is the sending event of a request. &amp;#226;&amp;#8364;&amp;#162; receive Indicates that the typed elements is the receipt event of a request. &amp;#226;&amp;#8364;&amp;#162; consume Indicates that the typed elements is the start event of the processing of a received request by the receiver.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOcnMIukEeCrt4LXEOI4YA" name="start"/>
    <ownedLiteral xmi:id="_BOcnMYukEeCrt4LXEOI4YA" name="finish"/>
    <ownedLiteral xmi:id="_BOcnMoukEeCrt4LXEOI4YA" name="send"/>
    <ownedLiteral xmi:id="_BOcnM4ukEeCrt4LXEOI4YA" name="receive"/>
    <ownedLiteral xmi:id="_BOcnNIukEeCrt4LXEOI4YA" name="consume"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOcnNYukEeCrt4LXEOI4YA" name="Connector">
    <ownedComment xmi:id="_vvfQYp2TEeCg6sqGpS8R3g">
      <body>A Connector represents a specific interaction path between ports and/or assembly parts in the context of the definition of a StructuredComponent. A connector defines at least two connector ends, which refers to type-compatible ports, assembly part or a component, depending on which element is connected. Generalization &amp;#226;&amp;#8364;&amp;#162; None

This concept mimics UML concept of connector defined in the package UML::CompositeStructures::InternalStructures. A Connector specifies a link between components (either through ports or directly), where each of its ends represents an element which is involved in the connection.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOcnNoukEeCrt4LXEOI4YA" name="CollectionSpecification">
    <ownedComment xmi:id="_vvfQY52TEeCg6sqGpS8R3g">
      <body>

Collection Specifications represent a list of elements of a particular given type. Individual elements of collections are item Value Specifications. Note that there is no restriction on the item value type of a collection type. This means in particular that a collection type may be parameterized with other collection types allowing collections to be nested arbitrarily deep. Size, uniqueness and order nature of item values are specified by the defining data type.</body>
    </ownedComment>
    <generalization xmi:id="_BPyrAYukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOdOQIukEeCrt4LXEOI4YA" name="Configuration">
    <ownedComment xmi:id="_vvfQZJ2TEeCg6sqGpS8R3g">
      <body>A Configuration characterizes a set of participating entities associated to a system, sub-system or whatever composite element. A configuration prescribes the properties that the participating entities exhibit in the configuration context.

A system configuration may be defined by a set of active system elements (e.g., application components, platform components, hardware resources), and/or by a set of operation parameters (e.g., QoS parameters or functional parameters). A configuration can also represent a particular deployment plan of application components in platform entities.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOdOQYukEeCrt4LXEOI4YA" name="SwResource">
    <ownedComment xmi:id="_vvfQZZ2TEeCg6sqGpS8R3g">
      <body>

SwResource model software structural entities provided to the user by execution supports. Commonly, those entities are considered as execution support specific types. By inheritance, SwResource provides to the user a set of ResourceServices and a set of features. Services provided by SwResource gather services provided by software resource to the application 635 (i.e., the work of computing for a ComputingResource for example) and services provided to manage and to broker those resources (i.e., the help to create the software resource for example). A SwResource concept gathers both the resource as such and the manager of that resource.</body>
    </ownedComment>
    <generalization xmi:id="_BQwUUIukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQw7YIukEeCrt4LXEOI4YA" general="_BO4FAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOd1UIukEeCrt4LXEOI4YA" name="PWorkloadGenerator">
    <ownedComment xmi:id="_vvfQZp2TEeCg6sqGpS8R3g">
      <body>A source of system initiation events Generalization: &amp;#226;&amp;#8364;&amp;#162; WorkloadGenerator (from GQAM)

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOd1UYukEeCrt4LXEOI4YA" name="HW_Memory">
    <ownedComment xmi:id="_vvfQZ52TEeCg6sqGpS8R3g">
      <body>HW_Memory is a high level metaclass from the HW_Storage package.

HW_memory is the generic metaclass that denotes any form of data storage during some interval of time. It is a protected HW_Resource that may offer read/write HW_ResourceServices. The timings attribute (F.9.58) is a simple way to annotate detailed timing durations of some HW_Memory services or behaviors. Such details are necessary for performance analysis or simulation. Example: SDRAMs, hard drives, their buffers.</body>
    </ownedComment>
    <generalization xmi:id="_BRNAQIukEeCrt4LXEOI4YA" general="_BOLhcYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRNnUIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOd1UoukEeCrt4LXEOI4YA" name="ResourceAmount">
    <ownedComment xmi:id="_vvfQaJ2TEeCg6sqGpS8R3g">
      <body>A ResourceAmount represents a generic quantity of the &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; provided by the resource.

A ResourceAmount represents a generic quantity of the &amp;#226;&amp;#8364;&amp;#339;amount&amp;#226;&amp;#8364;&amp;#65533; provided by the resource. This may be mapped to any significant quantification of the resource, like memory units, utilization, power, etc. This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BRIHwIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOecYIukEeCrt4LXEOI4YA" name="Repl_Policy">
    <ownedComment xmi:id="_vvfQaZ2TEeCg6sqGpS8R3g">
      <body>Repl_Policy is an enumeration of the following replacement policies: &amp;#226;&amp;#8364;&amp;#162; LRU Least Recently Used &amp;#226;&amp;#8364;&amp;#162; NFU Not Frequently Used &amp;#226;&amp;#8364;&amp;#162; FIFO First In First Out &amp;#226;&amp;#8364;&amp;#162; random &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOecYYukEeCrt4LXEOI4YA" name="HW_Resource1">
    <ownedComment xmi:id="_vvfQap2TEeCg6sqGpS8R3g">
      <body>HW_Resource is the main concept of the Hardware Logical Model.

HW_Resource is the most abstract concept of the Hardware Logical Model. It redefines the HW_Resource from the HW_General to denote a logical entity. It may have a clock and endpoints. As most of other hardware logical concepts are inheriting from HW_Resource, they benefit from the same structure.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOecYoukEeCrt4LXEOI4YA" name="InvocationOccurrence">
    <ownedComment xmi:id="_vvfQa52TEeCg6sqGpS8R3g">
      <body>An InvocationOccurrence is a run time instance that represents the start of a communication in transit between a sender instance and a receiver instance, through the inquiry of an actionExecution.

An InvocationOccurrence is a run time instance that represents the start of a communication in transit between a sender instance and a receiver instance, through the inquiry of an actionExecution. This actionExecution, representing the invocation of a behavioral feature, is executed by a sender instance resulting in the InvocationOcurrence. The invocation event may represent the sending of a signal or the call to an operation. As a result of the invocationOccurrence a Request is generated. An InvocationOccurrence may result in a number of requests being generated (as in a signal broadcast).</body>
    </ownedComment>
    <generalization xmi:id="_BPyrA4ukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOfDcIukEeCrt4LXEOI4YA" name="Env_Condition">
    <ownedComment xmi:id="_vvfQbJ2TEeCg6sqGpS8R3g">
      <body>Env_Condition is an environmental condition tupletype from the HW_Layout package.

An Env_Condition is characterized by its type (F.9.4), a given state (F.9.3), a short description, and an interval of supported values. It is a safety condition applied to an HW_Component in a particular state (e.g., SMP card 14.2.4.3). The value range of an Env_Condition at storage (non-operating) time is generally wide. Example: embedded systems are often operating in hostile environments.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOfDcYukEeCrt4LXEOI4YA" name="TimeBaseRelation">
    <ownedComment xmi:id="_vvpBYJ2TEeCg6sqGpS8R3g">
      <body>A time instant relation states that a set of time bases are temporally dependent in some way.

A time instant relation states that a set of time bases are temporally dependent in some way. More precisely, some instants of the time bases are temporally related. The related time bases must be directly or indirectly owned by the multiple time base owning this time base relation. This constraint is expressed in the MultipleTimeBase description (constraint [1], page 451). This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BQo_kIukEeCrt4LXEOI4YA" general="_BOiGwIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOfDcoukEeCrt4LXEOI4YA" name="DataType">
    <ownedComment xmi:id="_vvpBYZ2TEeCg6sqGpS8R3g">
      <body>DateType matches with the UML concept of DataType. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

A data type is a special kind of classifier, similar to a class. It differs from a class in that instances of a data type are identified only by their value. All copies of an instance of a data type and any instances of that data type with the same value are considered to be the same instance. Instances of a data type that have attributes (i.e., is a structured data type) are considered to be the same if the structure is the same and the values of the corresponding attributes are the same. If a data type has attributes, then instances of that data type will contain attribute values matching the attributes.</body>
    </ownedComment>
    <generalization xmi:id="_BPyrAoukEeCrt4LXEOI4YA" general="_BOVScIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOfqgIukEeCrt4LXEOI4YA" name="SwSchedulableResource">
    <ownedComment xmi:id="_vvpBYp2TEeCg6sqGpS8R3g">
      <body>

SchedulableResources are resources, which execute concurrently to other concurrent resources. The competition for execution among the set of schedulable resources is supervised by a scheduler. In fact, a scheduler interleaves their execution based on a scheduling algorithm. Common SchedulableResources are POSIX Thread, ARINC-653 Process, and OSEK/VDX Task. By default, schedulableResources share the same address space but preserve their own contexts (program counter, registers, signal mask, stack, etc.).</body>
    </ownedComment>
    <generalization xmi:id="_BP8cAIukEeCrt4LXEOI4YA" general="_BO1owIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BP8cAYukEeCrt4LXEOI4YA" general="_BOPL0oukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOfqgYukEeCrt4LXEOI4YA" name="PoolMgtPolicy">
    <ownedComment xmi:id="_vvpBY52TEeCg6sqGpS8R3g">
      <body>PoolMgtPolicy is an enumeration, which literals specify the kind of pool management policy used for schedulable resources of a real-time unit. Literals &amp;#226;&amp;#8364;&amp;#162; infiniteWait If the pool is empty, then the real-time unit waits indefinitely until a computing resource is released. &amp;#226;&amp;#8364;&amp;#162; timedWait If the pool is empty, then the real-time unit waits for a bounded time until a computing resource is released. An exception is raised if no computing resource is available by the end of the waiting time. &amp;#226;&amp;#8364;&amp;#162; create If the pool is empty, then the real-time unit creates a new computing resource and adds it to the pool. &amp;#226;&amp;#8364;&amp;#162; exception If the pool is empty, then the real-time unit raises an exception. &amp;#226;&amp;#8364;&amp;#162; Other Other pool management policy.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOfqgoukEeCrt4LXEOI4YA" name="infiniteWait"/>
    <ownedLiteral xmi:id="_BOfqg4ukEeCrt4LXEOI4YA" name="timedWait"/>
    <ownedLiteral xmi:id="_BOgRkIukEeCrt4LXEOI4YA" name="create"/>
    <ownedLiteral xmi:id="_BOgRkYukEeCrt4LXEOI4YA" name="exception"/>
    <ownedLiteral xmi:id="_BOgRkoukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOgRk4ukEeCrt4LXEOI4YA" name="NFP">
    <ownedComment xmi:id="_vvpBZJ2TEeCg6sqGpS8R3g">
      <body>Non-Functional Properties (NFPs) declares an attribute of one or more instances in terms of a named relationship to a value or values.

Functional properties, which are primarily concerned with the purpose of an application (i.e., what it does); and non- functional properties (NFPs), which are more concerned with its fitness for purpose (i.e., how well it does it or it has to do it). NFPs are specified by the designer in the models and attached to different model elements.</body>
    </ownedComment>
    <generalization xmi:id="_BQcyUYukEeCrt4LXEOI4YA" general="_BORBA4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOgRlIukEeCrt4LXEOI4YA" name="LogicalClock">
    <ownedComment xmi:id="_vvpBZZ2TEeCg6sqGpS8R3g">
      <body>A logical clock provides access to a logical time, that is, a model of time in which only the ordering of instants is meaningful. There is no implicit reference to the physical time.

A logical clock provides access to a logical time, that is, a model of time in which only the ordering of instants is meaningful. There is no implicit reference to the physical time. Logical clocks are often used in conjunction with a time structure model accessible through its timeBase property. A logical clock can also be defined by any event (its definingEvent). In this case, the logical clock ticks at each occurrence of this event.</body>
    </ownedComment>
    <generalization xmi:id="_BRLyIIukEeCrt4LXEOI4YA" general="_BOg4oIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOg4oIukEeCrt4LXEOI4YA" name="Clock">
    <ownedComment xmi:id="_vvpBZp2TEeCg6sqGpS8R3g">
      <body>A clock provides access to time.

A clock provides access to a discrete time base, and possibly to a dense time base, but through a discrete time base. The instants of this time base correspond to &amp;#226;&amp;#8364;&amp;#339;ticks&amp;#226;&amp;#8364;&amp;#65533; of the clock. A clock associates time values with instants of the time base. These values may be from a discrete or a dense set of values. A Clock accepts units (acceptedUnits property). Unit is defined in the NFP_Nature package. One of these accepted units is the defaultUnit, which is attached to the currentTime value. Clock is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BPo6AYukEeCrt4LXEOI4YA" general="_BOHQBYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOg4oYukEeCrt4LXEOI4YA" name="TimingResource">
    <ownedComment xmi:id="_vvpBZ52TEeCg6sqGpS8R3g">
      <body>A TimingResource represents a hardware or software entity that is capable of following and evidencing the pace of time.

A TimingResource represents a hardware or software entity that is capable of following and evidencing the pace of time. It is defined as a kind of chronometric clock, and may represent a clock itself or a timer, in which case it acts according to the clock that it has as a reference. According to the concrete kind of resource or timing mechanism that it represents, the referenced clock may be another chronometric clock or a logical clock, as defined in the Time chapter. A TimingResource has concrete services for its management and operation.</body>
    </ownedComment>
    <generalization xmi:id="_BQt4EYukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOhfsIukEeCrt4LXEOI4YA" name="ActionExecution">
    <ownedComment xmi:id="_vvpBaJ2TEeCg6sqGpS8R3g">
      <body>An ActionExecution is a kind of behaviorExecution that corresponds to an instance of an Action, and consequently expresses an atomic piece of behaviorExecution.

An ActionExecution is a kind of behaviorExecution that corresponds to an instance of an Action, and consequently expresses an atomic piece of behaviorExecution. The context in which an actionExecution is performed is obtained by means of the host association inherited from behaviorExcecution, which relates the action to its container CompBehaviorExecution, and transitively to the instance of the behavioredClassifier in which it is effectively performed. 535</body>
    </ownedComment>
    <generalization xmi:id="_BPvnsYukEeCrt4LXEOI4YA" general="_BOHQCoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOhfsYukEeCrt4LXEOI4YA" name="HW_CommunicationResource">
    <ownedComment xmi:id="_vvpBaZ2TEeCg6sqGpS8R3g">
      <body>HW_CommunicationResource is a high level concept from the HW_Communication package.

HW_CommunicationResource is a high level concept which groups all communication actors. It could be a communication media, an arbiter or an end point. Example: PCI bus (HW_Bus), DMA (HW_Arbiter), a port or an antenna (HW_EndPoint).</body>
    </ownedComment>
    <generalization xmi:id="_BQRzMIukEeCrt4LXEOI4YA" general="_BOx-YIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQSaQIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOiGwIukEeCrt4LXEOI4YA" name="TimeStructureRelation">
    <ownedComment xmi:id="_vvpBap2TEeCg6sqGpS8R3g">
      <body>A time structure relation states that junction instants of different time bases are temporally related in some way. The relation applies either to a set of junction instants or to a set of time bases.

A time structure relation states that junction instants of different time bases are temporally related in some way. The relation applies either to a set of junction instants or to a set of time bases. The latter case is a convenient way to specify multiple temporal relations between junction instants. This is an abstract class.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOiGwYukEeCrt4LXEOI4YA" name="Delay">
    <ownedComment xmi:id="_vvpBa52TEeCg6sqGpS8R3g">
      <body>Delay is a special kind of TimedAction that represents a null action lasting for a given duration.

Delay is a special kind of TimedAction that represents a null action lasting for a given duration.</body>
    </ownedComment>
    <generalization xmi:id="_BQ4QIIukEeCrt4LXEOI4YA" general="_BOviIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOiGwoukEeCrt4LXEOI4YA" name="PStep">
    <ownedComment xmi:id="_vvpBbJ2TEeCg6sqGpS8R3g">
      <body>A step in a scenario.

PStep establishes the sequence of the BehaviorScenario. It may be refined to a BehaviorScenario with a separate step for each service. A refined PStep is purely a holder for its refinement sub-BehaviorScenario, and does not have a host or demands of its own. The BehaviorScenario for a refined PStep is defined implicitly as the operand of a CombinedFragment or StructuredActivity. The probability attribute is required for a PStep immediately following a branch (OR-fork) in the BehaviorScenario (default value is equal probabilities for all paths). On other PSteps it indicates an optional execution (default = 1). The noSync attribute is meaningful only on a PStep immediately following a fork in the flow of the scenario (par CombinedFragment, asynchronous message, or Fork ActivityNode). It indicates that the subpath following this PStep does not join with the parallel subpaths, but continues until it terminates on its own. It may continue after the join of the other paths. In particular, on an asynchronous message within an operand of a CombinedFragment, it shows that the operand terminates without waiting for the subpath from the asynchronous message. The default value is false.</body>
    </ownedComment>
    <generalization xmi:id="_BQf1oIukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOit0IukEeCrt4LXEOI4YA" name="WorkloadEvent">
    <ownedComment xmi:id="_vvpBbZ2TEeCg6sqGpS8R3g">
      <body>

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOit0YukEeCrt4LXEOI4YA" name="PExtOpDemand">
    <ownedComment xmi:id="_vvyLUJ2TEeCg6sqGpS8R3g">
      <body>A data structure for a demand for an operation which is defined only for the performance modeling environment, and is identified by name. It is the type of an extOpDemand attribute.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOjU4IukEeCrt4LXEOI4YA" name="BroadcastSignalAction">
    <ownedComment xmi:id="_vvyLUZ2TEeCg6sqGpS8R3g">
      <body>A BroadcastSignalAction is an action that broadcasts a signal to its environment. Generalization &amp;#226;&amp;#8364;&amp;#162; InvocationAction (from MARTE::CoreElements::GeneralComponent)

This concept matches the BroadcastSignalAction classifier defined in UML.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOjU4YukEeCrt4LXEOI4YA" name="InstantIntervalSpecification">
    <ownedComment xmi:id="_vvyLUp2TEeCg6sqGpS8R3g">
      <body>

Instant Interval Specifications are special kinds of interval specifications that have instant expressions as upper and lower bounds.</body>
    </ownedComment>
    <generalization xmi:id="_BQgcsYukEeCrt4LXEOI4YA" general="_BOcAIIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOj78IukEeCrt4LXEOI4YA" name="StartOccurrence">
    <ownedComment xmi:id="_vvyLU52TEeCg6sqGpS8R3g">
      <body>A StartOccurrence represents the start of a BehaviorExecution.

A StartOccurrence represents the start of a BehaviorExecution. The occurrence is tied to the start of the associated behaviorExecution.</body>
    </ownedComment>
    <generalization xmi:id="_BQeAcIukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOj78YukEeCrt4LXEOI4YA" name="TimedConstraint">
    <ownedComment xmi:id="_vvyLVJ2TEeCg6sqGpS8R3g">
      <body>TimedConstraint is an abstract superclass of TimedInstantConstraint and TimedDurationConstraint. It allows to constraint when an event may occur or constraint the duration of some execution or even constraint the temporal distance between two event occurrences.

TimedConstraint is an abstract superclass of TimedInstantConstraint and TimedDurationConstraint. It allows to constraint when an event may occur or constraint the duration of some execution or event constraint the temporal distance between two event occurrences. Since a timed constraint is a timed element, it refers to clocks. 571</body>
    </ownedComment>
    <generalization xmi:id="_BQa9IYukEeCrt4LXEOI4YA" general="_BObZEIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQbkMIukEeCrt4LXEOI4YA" general="_BOr3wIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOj78oukEeCrt4LXEOI4YA" name="VariableCallExpression">
    <ownedComment xmi:id="_vvyLVZ2TEeCg6sqGpS8R3g">
      <body>

Variables are typed elements for passing data in expressions. A variable can be used in expressions where the variable is in scope. A VariableCallExpression is an expression that consists of a reference to a variable.</body>
    </ownedComment>
    <generalization xmi:id="_BRUVAYukEeCrt4LXEOI4YA" general="_BOLhd4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOkjAIukEeCrt4LXEOI4YA" name="HW_PowerSupply">
    <ownedComment xmi:id="_vvyLVp2TEeCg6sqGpS8R3g">
      <body>HW_PowerSupply is a power supplier from the HW_Power package.

HW_PowerSupply is a particular HW_Component that supplies power for the hardware platform. Example: batteries.</body>
    </ownedComment>
    <generalization xmi:id="_BRjlkIukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOkjAYukEeCrt4LXEOI4YA" name="InstantPredicate">
    <ownedComment xmi:id="_vvyLV52TEeCg6sqGpS8R3g">
      <body>InstantPredicate is a predicate on an instant expression.

InstantPredicate is a predicate on an instant expression. Note that the expression may involve a TimedInstantObservation, say t, a TimedDurationObservation, say d, and use &amp;#226;&amp;#8364;&amp;#339;t+d,&amp;#226;&amp;#8364;&amp;#65533; which effectively denotes an instant.</body>
    </ownedComment>
    <generalization xmi:id="_BQ3pEIukEeCrt4LXEOI4YA" general="_BOQZ8IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOlKEIukEeCrt4LXEOI4YA" name="ModelElement">
    <ownedComment xmi:id="_vvyLWJ2TEeCg6sqGpS8R3g">
      <body>Abstract root modeling element.

This abstract class defines a root for most of the concepts defined in this specification. It plays a role similar to the NamedElement concept in the UML metamodel. The ownedElement - owner association is used to bring it containing capabilities, which can be used to defined composite model elements.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOlKEYukEeCrt4LXEOI4YA" name="SchedulingObserver">
    <ownedComment xmi:id="_vvyLWZ2TEeCg6sqGpS8R3g">
      <body>SchedulingObserver provides prediction about scheduling metrics such as overlaps, the maximum number of suspensions caused by shared resources or the blocking time caused by the used shared resources. All these metrics are relative to the interval defined by the reference and observed events.

SchedulingObserver provides prediction about scheduling metrics such as overlaps, the maximum number of suspensions caused by shared resources or the blocking time caused by the used shared resources. All these metrics are relative to the interval defined by the reference and observed events.</body>
    </ownedComment>
    <generalization xmi:id="_BQM6sYukEeCrt4LXEOI4YA" general="_BOS2MYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOlKEoukEeCrt4LXEOI4YA" name="Timing">
    <ownedComment xmi:id="_vvyLWp2TEeCg6sqGpS8R3g">
      <body>Timing is a memory timing tupletype from the HW_Storage package.

Timing is a generic tupletype that annotates a timing measurement. Memory timings are necessary for performance analysis and accurate simulation. Example: tCAS of an HW_RAM is the CAS (Column Address Strobe) latency. It is often measured in clock cycles.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOlxIIukEeCrt4LXEOI4YA" name="JuctionInstant">
    <ownedComment xmi:id="_vvyLW52TEeCg6sqGpS8R3g">
      <body>A junction instant represents a point in time. All instants owned by a discrete time base are junction instants. Some instants of a dense time base may be junction instants

A junction instant represents a point in time. A junction instant can be referred to by a time instant relation.</body>
    </ownedComment>
    <generalization xmi:id="_BRaboIukEeCrt4LXEOI4YA" general="_BPGugIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOlxIYukEeCrt4LXEOI4YA" name="HW_I/O">
    <ownedComment xmi:id="_vv78UJ2TEeCg6sqGpS8R3g">
      <body>HW_I/O is an input/output device from the HW_Device package.

HW_I/O (Input/Output) is a generic concept. It represents any device that is interacting with its environment. It may be only an input device like a camera, an output one like a speaker or both like a touch screen. Example: for embedded systems, HW_I/O is well adapted to symbolize sensors and actuators.</body>
    </ownedComment>
    <generalization xmi:id="_BQ6sYIukEeCrt4LXEOI4YA" general="_BOVSc4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOmYMIukEeCrt4LXEOI4YA" name="OpaqueExpression">
    <ownedComment xmi:id="_vv78UZ2TEeCg6sqGpS8R3g">
      <body>OpaqueExpression matches with the UML concept of OpaqueExpression. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

The expression body may consist of a sequence of text strings - each in a different language - representing alternative representations of the same content. When multiple language strings are provided, the language of each separate string is determined by its corresponding entry in the &amp;#226;&amp;#8364;&amp;#339;language&amp;#226;&amp;#8364;&amp;#65533; attribute (by sequence order). The interpretation of the text strings is language specific. Languages are matched to body strings by order. If the languages are unspecified, they might be implicit from the expression bodies or the context. It is assumed that a linguistic analyzer for the specified languages will evaluate the bodies. The times at which the bodies will be evaluated are not specified.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOmYMYukEeCrt4LXEOI4YA" name="EndToEndFlow">
    <ownedComment xmi:id="_vv78Up2TEeCg6sqGpS8R3g">
      <body>End-to-end flows describe a unit of processing work in the analyzed system, which contend for use of the processing resources. This is a conceptual entity only, which is represented by its concrete elements: end-to-end stimuli and end-to- end response.

End-to-end flows describe a unit of processing work in the analyzed system, which contend for use of the processing resources. As a conceptual entity, end-to-end flow allows to define a set of timing requirements and timing predictions. Timing requirements include deadlines, maximum miss ratios and maximum jitters. Timing predictions are typically provided by analysis tools and include latencies, jitters, and other scheduling metrics.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOm_QIukEeCrt4LXEOI4YA" name="Variable">
    <ownedComment xmi:id="_vv78U52TEeCg6sqGpS8R3g">
      <body>

Variables are typed elements for passing data in expressions. The variable can be used in expressions where the variable is in scope. Variable creates a variable with a given name, data type, and nature (input, output, input/output).</body>
    </ownedComment>
    <generalization xmi:id="_BQsp8IukEeCrt4LXEOI4YA" general="_BOLhd4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOm_QYukEeCrt4LXEOI4YA" name="FlowSpecification">
    <ownedComment xmi:id="_vv78VJ2TEeCg6sqGpS8R3g">
      <body>A FlowSpecification provides a way to define structured elements that a non-atomic flow port may relay. It defines a series of flow properties with their own types and flow direction.

A FlowSpecification provides a way to define structured elements that a non-atomic flow port may relay. It defines a series of flow properties with their own types and flow direction. This concept matches the FlowSpecification concept defined in SysML.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOnmUIukEeCrt4LXEOI4YA" name="HW_Unit">
    <ownedComment xmi:id="_vv78VZ2TEeCg6sqGpS8R3g">
      <body>HW_Unit is a physical entity from the HW_Layout package.

HW_Unit is an identified area of an integrated circuit. It is a part of an HW_Chip or an enclosing HW_Unit. Example: the ALU and the FPU are subunits of the EU (Execution Unit), which is in turn a unit of the processor chip.</body>
    </ownedComment>
    <generalization xmi:id="_BQxicIukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOnmUYukEeCrt4LXEOI4YA" name="AccesControlPolicy1">
    <ownedComment xmi:id="_vv78Vp2TEeCg6sqGpS8R3g">
      <body>The ResourceControlPolicy determines the rules for regulating the management of resources.

The ResourceControlPolicy determines the rules for regulating the management of resources, what includes creating, maintaining, and deleting resources.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOoNYIukEeCrt4LXEOI4YA" name="HW_Component1">
    <ownedComment xmi:id="_vv78V52TEeCg6sqGpS8R3g">
      <body>HW_Component is the main physical entity of the HW_Power package.

HW_Component redefines the same named concept from the merged HW_Layout package. It denotes any hardware physical resource. It may consume power when running provided services and leaks once idle.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOoNYYukEeCrt4LXEOI4YA" name="SaCommunicationHost">
    <ownedComment xmi:id="_vv78WJ2TEeCg6sqGpS8R3g">
      <body>In a communication host (e.g., network and bus), the related schedulable resource element is CommunicationChannel, which may be characterized by concrete scheduling parameters (like the packet size). 685

In a communication host (e.g., network, bus), the related schedulable resource element is CommunicationChannel, which may be characterized by concrete scheduling parameters (like the packet size).</body>
    </ownedComment>
    <generalization xmi:id="_BRbCsIukEeCrt4LXEOI4YA" general="_BOTdQoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOo0cIukEeCrt4LXEOI4YA" name="BasicQuantity">
    <ownedComment xmi:id="_vv78WZ2TEeCg6sqGpS8R3g">
      <body>Basic quantities are primitive quantities. Many other quantities can be derived out of the combination of the basic quantities (see Derived Quantity). Example of basic quantities are length, mass, time, current, temperature and luminous intensity. The units of measure for the basic quantities are organized in systems of measures, such as the universally accepted Syst&amp;#195;&amp;#168;me International (SI) or International System of Units.

Basic quantities are primitive quantities. They may be used to obtain derived quantities. Example of basic quantities are length, mass, time, current, temperature, and luminous intensity. The units of measure for the basic quantities are organized in systems of measures, such as the universally accepted Syst&amp;#195;&amp;#168;me International (SI) or International System of Units. 551</body>
    </ownedComment>
    <generalization xmi:id="_BQ43MIukEeCrt4LXEOI4YA" general="_BPfwEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOo0cYukEeCrt4LXEOI4YA" name="InteractionPort">
    <ownedComment xmi:id="_vv78Wp2TEeCg6sqGpS8R3g">
      <body>An InteractionPort specifies an interaction point on a structured component. It factorizes the common structural properties of ports used in the Generic Component Model.

An InteractionPort is an abstract class that specifies an interaction point of a structured component. It factorizes the common structural properties of ports used in the Generic Component Model.</body>
    </ownedComment>
    <generalization xmi:id="_BP9qIoukEeCrt4LXEOI4YA" general="_BOGo9YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOpbgIukEeCrt4LXEOI4YA" name="PpUnit">
    <ownedComment xmi:id="_vv78W52TEeCg6sqGpS8R3g">
      <body>A protected passive unit is used to represent shared information among real-time units. It does not own any schedulable resource. Meanwhile, it provides protection mechanisms to support concurrent accesses by multiple real-time units.

A protected passive unit is used by real-time units to carry information, while providing protection mechanisms against concurrent accesses. It does not own any computing resource but defines behaviors and services. A protected passive unit may specify its concurrency policy globally, using its concPolicy attribute. It may also specify its concurrency policy 619 locally through the concPolicy attribute of the RtService classifier. The execution kind of a protected passive unit is either immediateRemote or deferred. In both cases, the computing resource of the real-time unit invoking the service of the protected passive unit is used.</body>
    </ownedComment>
    <generalization xmi:id="_BQCioYukEeCrt4LXEOI4YA" general="_BORBAoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQDJsIukEeCrt4LXEOI4YA" general="_BOKTWYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOpbgYukEeCrt4LXEOI4YA" name="ReleaseStep">
    <ownedComment xmi:id="_vwFtUJ2TEeCg6sqGpS8R3g">
      <body>

</body>
    </ownedComment>
    <generalization xmi:id="_BQ1M0IukEeCrt4LXEOI4YA" general="_BPd64IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOqCkIukEeCrt4LXEOI4YA" name="SwMutualExclusionResource">
    <ownedComment xmi:id="_vwFtUZ2TEeCg6sqGpS8R3g">
      <body>

MutualExclusionResource describe resources commonly used for synchronize access to shared variables. As examples, Boolean semaphore (one token that anybody can release even if it does not get it), mutex (i.e., a Boolean semaphore associated with a propriety concept. Only resource, which gets the mutex, can release it), and counting semaphore (several token may be got and released) are MutualExclusionResource.</body>
    </ownedComment>
    <generalization xmi:id="_BPrWQIukEeCrt4LXEOI4YA" general="_BOwJMYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BPrWQYukEeCrt4LXEOI4YA" general="_BOH3EIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOqCkYukEeCrt4LXEOI4YA" name="TimeInstantRelation">
    <ownedComment xmi:id="_vwFtUp2TEeCg6sqGpS8R3g">
      <body>A time instant relation states that junction instants of a set are temporally related in some way.

A time instant relation states that junction instants of a set are temporally related in some way. The concrete relation can be coincidence, precedence, or membership of a time interval. The related junction instants must be owned by time bases directly or indirectly included in the multiple time base owing this time instant relation. This constraint is expressed in the MultipleTimeBase description (constraint [2], page 451). This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BRoeEIukEeCrt4LXEOI4YA" general="_BOiGwIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOqpoIukEeCrt4LXEOI4YA" name="ReceiveOccurrence">
    <ownedComment xmi:id="_vwFtU52TEeCg6sqGpS8R3g">
      <body>A ReceiveOccurrence is a run time instance that represents the reception of a communication in transit between a sender instance and a receiver instance.

A ReceiveOccurrence is a run time instance that represents the reception of a communication in transit between a sender instance and a receiver instance. Once the generated request arrives at the receiver instances, a ReceiveOccurrence occurs, which according to the triggers expected may subsequently launch the behaviors of the receiver instance or of any of its internal instances. Like in the Common Behaviors Domain Model of UML, two kinds of requests are determined according to the kind of invocation occurrence that caused it: the sending of a signal, and the invocation of an operation. The former is used to trigger a reaction in the receiver in an asynchronous way without a reply. The latter applies an operation to an instance, which may be synchronous or asynchronous and may require a reply from the receiver to the sender.</body>
    </ownedComment>
    <generalization xmi:id="_BQaWEYukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOqpoYukEeCrt4LXEOI4YA" name="ExecutionKind">
    <ownedComment xmi:id="_vwFtVJ2TEeCg6sqGpS8R3g">
      <body>ExecutionKind is an enumeration, which literals specify the kind of execution of a behavioral feature. Literals &amp;#226;&amp;#8364;&amp;#162; deferred The event occurrence matching the service invocation is stored in the queue of the behavior attached to the object. &amp;#226;&amp;#8364;&amp;#162; remoteImmediate The execution is performed immediately with a computing resource of the calling object. &amp;#226;&amp;#8364;&amp;#162; localImmediate The execution is performed immediately with a computing resource of the called object.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOqpooukEeCrt4LXEOI4YA" name="deferred"/>
    <ownedLiteral xmi:id="_BOqpo4ukEeCrt4LXEOI4YA" name="remoteImmediate"/>
    <ownedLiteral xmi:id="_BOqppIukEeCrt4LXEOI4YA" name="localImmediate"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOrQsIukEeCrt4LXEOI4YA" name="HW_Support">
    <ownedComment xmi:id="_vwFtVZ2TEeCg6sqGpS8R3g">
      <body>HW_Support is a support device from the HW_Device package.

HW_Support is an abstract concept that denotes a non functional resource from a logical point of view. However support resources are necessary to insure the platform execution. HW_Power package components are typically support resources. Example: regulators, batteries, heat sinks.</body>
    </ownedComment>
    <generalization xmi:id="_BQ5eQIukEeCrt4LXEOI4YA" general="_BOVSc4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOrQsYukEeCrt4LXEOI4YA" name="TupleSpecification">
    <ownedComment xmi:id="_vwFtVp2TEeCg6sqGpS8R3g">
      <body>

Tuple Specifications denotes structured values of possibly different types. It contains a name, a type, and a value for each item of the tuple value. There is no restriction on the kind of types that can be used to define item values of tuples. In particular, a Tuple Specification may contain other tuple and collection values.</body>
    </ownedComment>
    <generalization xmi:id="_BRn3AYukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOr3wIukEeCrt4LXEOI4YA" name="TimedElement">
    <ownedComment xmi:id="_vwFtV52TEeCg6sqGpS8R3g">
      <body>TimedElement is an abstract class, generalization of all other timed concepts. It associates a non empty set of clocks with a model element.

TimedElement is an abstract class, generalization of all other timed concepts. It associates a non empty set of clocks with a model element. The semantics of the association with clocks depends on the kind of timed element.</body>
    </ownedComment>
    <generalization xmi:id="_BQiR4YukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BOr3wYukEeCrt4LXEOI4YA" name="MessageResourceKind">
    <ownedComment xmi:id="_vwFtWJ2TEeCg6sqGpS8R3g">
      <body>The MessageResourceKind enumerates common mechanisms provide by platform to exchange data. Literals &amp;#226;&amp;#8364;&amp;#162; Blackboard Defines a one message buffer. &amp;#226;&amp;#8364;&amp;#162; MessageQueue Defines a multiple message buffer. &amp;#226;&amp;#8364;&amp;#162; Pipe Defines POSIX Pipe mechanism, which allows data flow among separate memory partition. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined mechanism. &amp;#226;&amp;#8364;&amp;#162; Other Other mechanisms.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BOr3woukEeCrt4LXEOI4YA" name="Blackboard"/>
    <ownedLiteral xmi:id="_BOr3w4ukEeCrt4LXEOI4YA" name="MessageQueue"/>
    <ownedLiteral xmi:id="_BOr3xIukEeCrt4LXEOI4YA" name="Pipe"/>
    <ownedLiteral xmi:id="_BOr3xYukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BOr3xoukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOse0IukEeCrt4LXEOI4YA" name="Activate">
    <ownedComment xmi:id="_vwFtWZ2TEeCg6sqGpS8R3g">
      <body>Enable the activation of a certain amount of a resource.

Activate allows for the application of an activation service on a given quantity. For example, activate a communication service with the amount of data to be transferred as a parameter.</body>
    </ownedComment>
    <generalization xmi:id="_BQsp8YukEeCrt4LXEOI4YA" general="_BOMvlYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOse0YukEeCrt4LXEOI4YA" name="FlowProperty">
    <ownedComment xmi:id="_vwFtWp2TEeCg6sqGpS8R3g">
      <body>A FlowProperty defines the type and the direction of a single flow element carried through flow ports. It may relate to a Class or a DataType. 613 Generalization &amp;#226;&amp;#8364;&amp;#162; Property (from MARTE::CoreElements::Foundations)

A FlowProperty defines the type and the direction of a single element carried in a dataflow. It can relate either to a Class or a DataType. Depending on its direction attribute, it may represent a flow element entering and/or leaving a component through a flow port. The type and direction of a flow property are used to evaluate whether flow ports are type- compatible.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOtF4IukEeCrt4LXEOI4YA" name="ModeBehavior">
    <ownedComment xmi:id="_vwO3QJ2TEeCg6sqGpS8R3g">
      <body>A ModeBehavior specifies a set of modes mutually exclusive, i.e., only one mode can be active in a given time instant. Particularly, the dynamics of modes is represented by connecting modes by means of ModeTransitions.

Working in a given mode may imply that a set of system entities are active during that operational fragment. We factorize such mode-sensitive system entities in BehavioredClassifier. A BehavioredClassifier can be active in zero or more operational modes. Furthermore, a BehavioredClasiffier that represents a system, subsystem or any composite entity can have a set of modes modeled as a ModeBehavior.</body>
    </ownedComment>
    <generalization xmi:id="_BPvAooukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOtF4YukEeCrt4LXEOI4YA" name="StartEvent">
    <ownedComment xmi:id="_vwO3QZ2TEeCg6sqGpS8R3g">
      <body>A StartEvent represents the start of a Behavior.

A StartEvent represents the start of a Behavior. The event is tied to the start of the associated behavior.</body>
    </ownedComment>
    <generalization xmi:id="_BQWrsIukEeCrt4LXEOI4YA" general="_BPH8oIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOts8IukEeCrt4LXEOI4YA" name="MutualExclusionProtocol">
    <ownedComment xmi:id="_vwO3Qp2TEeCg6sqGpS8R3g">
      <body>It provides or determines the set of rules necessary to arrange contending access to shared protected resources at run time.

MutualExclusionProtocols are defined in scheduling theory to avoid or minimize the priority inversion problem with the minimum impact on the pessimism of the analysis technique to apply. The protocols are to be implemented by the scheduler and consequently they must be compatible with the scheduling policy implemented by them. To be effectively applied some of them require each resource to be characterized with additional ProtectionParameters, which typically represent the scope of schedulable resources that will make use of the passive mutually exclusive resource.</body>
    </ownedComment>
    <generalization xmi:id="_BQBUgYukEeCrt4LXEOI4YA" general="_BOXHooukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOts8YukEeCrt4LXEOI4YA" name="HW_Processor">
    <ownedComment xmi:id="_vwO3Q52TEeCg6sqGpS8R3g">
      <body>HW_Processor is a computing resource from the HW_Computing package.

HW_Processor is a generic computing resource that symbolizes a processor. HW_Processor contains at least one instruction set architecture (F.9.27), caches (F.9.12) organized under categories and levels, memory management units ([1]) to handle its addressing and branch predictors (F.9.9) to speed pipelined computing. mips (million instructions per second) and ipc (instructions per clock) attributes characterize the throughput of the HW_Processor, while other attributes concern the microarchitecture. Example: ARM-7 embedded processor, TI-C6000 VLIW DSP&amp;#226;&amp;#8364;&amp;#166; DSPs are specialized repetitive processors, designed specifically for Digital Signal Processing.</body>
    </ownedComment>
    <generalization xmi:id="_BQjgAIukEeCrt4LXEOI4YA" general="_BPgXIIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOuUAIukEeCrt4LXEOI4YA" name="TimedInstantConstraint">
    <ownedComment xmi:id="_vwO3RJ2TEeCg6sqGpS8R3g">
      <body>A TimedInstantConstraint defines a constraint on when an event may occur.

A TimedInstantConstraint defines a constraint on when an event may occur.</body>
    </ownedComment>
    <generalization xmi:id="_BQengIukEeCrt4LXEOI4YA" general="_BOj78YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOuUAYukEeCrt4LXEOI4YA" name="SchedulingParameters">
    <ownedComment xmi:id="_vwO3RZ2TEeCg6sqGpS8R3g">
      <body>Values given to a SchedulableResource to quantify its merits to receive processing capacity in comparison with others scheduled under the same scheduler.

Values given to a SchedulableResource to quantify its merits to receive processing capacity in comparison with others scheduled under the same scheduler. A fine characterization is necessary to address the wide range of parameters that correspond to each of the different kinds of policies available.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOu7EIukEeCrt4LXEOI4YA" name="CompResPolicy">
    <ownedComment xmi:id="_vwO3Rp2TEeCg6sqGpS8R3g">
      <body>CompResPolicy is used to specify the scheduling policy of resources managed by an incoming message queue.

CompResPolicy reifies a scheduling policy defined as a literal of the SchedulingPolicyKind enumeration in the General Resource Model (GRM). It is used along with the redefined association: schedulingPolicy to specify the scheduling policy of computing resources for an incoming message queue.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOu7EYukEeCrt4LXEOI4YA" name="BoundedSubtype">
    <ownedComment xmi:id="_vwO3R52TEeCg6sqGpS8R3g">
      <body>

BoundedSubtype is a kind of Subtype. BoundedType creates a subtype of any ordered datatype by placing upper and/or lower bounds on the value space (minValue and MaxValue).</body>
    </ownedComment>
    <generalization xmi:id="_BRX_YIukEeCrt4LXEOI4YA" general="_BOWgkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOviIIukEeCrt4LXEOI4YA" name="LatencyObserver">
    <ownedComment xmi:id="_vwO3SJ2TEeCg6sqGpS8R3g">
      <body>LatencyObserver specifies a duration observation between startObs and endObs TimedInstantObservations, with a miss ratio assertion (percentage), a utility function, which places a value on the duration, and a jitter constraint. Jitter is the difference between maximum and minimum duration.

LatencyObserver specifies a duration observation between startObs and endObs TimedInstantObservations, with a miss ratio assertion (percentage), a utility function, which places a value on the duration, and a jitter constraint. Jitter is the difference between maximum and minimum duration.</body>
    </ownedComment>
    <generalization xmi:id="_BP-4QIukEeCrt4LXEOI4YA" general="_BOS2MYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOviIYukEeCrt4LXEOI4YA" name="TimedAction">
    <ownedComment xmi:id="_vwO3SZ2TEeCg6sqGpS8R3g">
      <body>Processings) TimedAction is a generic concept for modeling action that have known start and finish times or a known duration, and whose instants and durations are bound to clocks.

TimedAction is a generic concept for modeling actions that have known start and finish times or a known duration, and whose instants and durations are bound to clocks. This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BP6m0IukEeCrt4LXEOI4YA" general="_BPJx0IukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BP6m0YukEeCrt4LXEOI4YA" general="_BOK6Y4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOwJMIukEeCrt4LXEOI4YA" name="CommunicationEndPoint">
    <ownedComment xmi:id="_vwO3Sp2TEeCg6sqGpS8R3g">
      <body>A CommunicationEndPoint represents a mechanism for connecting and delivering data to a communication media.

A CommunicationEndPoint acts as a terminal for connecting to a communication media, and it is characterized by the size of the packet handled by the endpoint. This size may or may not correspond to the media element size. Concrete services provided by a CommunicationEndPoint include the sending and receiving of data, as well as a notification service able to trigger an activity in the application.</body>
    </ownedComment>
    <generalization xmi:id="_BRSf0IukEeCrt4LXEOI4YA" general="_BOx-YIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOwJMYukEeCrt4LXEOI4YA" name="SwSynchronizationResource">
    <ownedComment xmi:id="_vwYoQJ2TEeCg6sqGpS8R3g">
      <body>

This resource defines interaction mechanisms to synchronize concurrent execution flow. Real-time platform provides several basic communication mechanisms to synchronize resources. Two usual specializations are the mutual exclusion synchronization and the event synchronization. In using synchronization mechanisms, concurrent resources want either to notify or to make sure that they are in specified parts of their code at the same time or not (i.e., mutual exclusion).</body>
    </ownedComment>
    <generalization xmi:id="_BRD2UIukEeCrt4LXEOI4YA" general="_BPaQgIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BREdYIukEeCrt4LXEOI4YA" general="_BOKTWYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOwwQIukEeCrt4LXEOI4YA" name="ClockConstraintSpecification">
    <ownedComment xmi:id="_vwYoQZ2TEeCg6sqGpS8R3g">
      <body>A value specification that specifies constraints imposed to clocks.

A value specification that specifies constraints imposed to clocks. An example of clock constraint specification is that two clocks are harmonic with one twice faster than the other. A dedicated language (CCSL: Clock Constraint Specification Language) is proposed with MARTE (Annex C).</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOwwQYukEeCrt4LXEOI4YA" name="ChoiceSpecification">
    <ownedComment xmi:id="_vwYoQp2TEeCg6sqGpS8R3g">
      <body>

Choice Specification denotes a value of a choice data type (ChoiceType). It contains the name of one of the attribute members (chosenAlternative), which determines the chosen data type, and a value that conforms to the chosen data type. The derived attribute &amp;#226;&amp;#8364;&amp;#339;chosenAlternative&amp;#226;&amp;#8364;&amp;#65533; can be constructed with basis on an explicitly chosen data type. When the chosen data type is undefined in a given choice value specification, the chosen alternative can be deduced from the default alternative attribute of the corresponding choice type. Choice Type generates a data type each of whose values is a single value from any of a set of alternative data types. Choice Type combines different types into a single data type. Instances of choice data types belong to only one of the member types. This type is similar to the C union type and the Ada/Pascal &amp;#226;&amp;#8364;&amp;#339;variant-record.&amp;#226;&amp;#8364;&amp;#65533;</body>
    </ownedComment>
    <generalization xmi:id="_BPskYIukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BPskYYukEeCrt4LXEOI4YA" general="_BOPL0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOxXUIukEeCrt4LXEOI4YA" name="Request">
    <ownedComment xmi:id="_vwYoQ52TEeCg6sqGpS8R3g">
      <body>A Request is an instance of a communication in transit between a calling instance and a called one.

A Request, which fully corresponds to the Request concept of UML 2, is an instance of a communication in transit between a calling instance and a called one. In fact, a request is an instance capturing the data that was passed to the action causing the invocation event (the arguments that must match the parameters of the invoked behavioral feature); information about the nature of the request (i.e., the behavioral feature that was invoked); the identities of the sender and receiver instances; as well as sufficient information about the behavior execution to enable the return of a reply from the invoked behavior, where appropriate. Eventually the request may include additional information, like a time stamp. Each request is targeted at exactly one receiver instance and caused by exactly one sending instance, but an occurrence of an invocation event may result in a number of requests being generated (as in a signal broadcast). The receiver may be the same instance that is the sender, it may be local (i.e., an instance held inside the currently executing instance, or the currently executing instance itself, or the instance owning the currently executing instance), or it may be remote. The manner of transmitting the request, the amount of time required to transmit it, the order in which the transmissions reach their receiver instances, and the path for reaching the receiver instances are to be defined and annotated by using any of the different communication mechanisms available, like rendezvous, message queuing, interrupts, etc.</body>
    </ownedComment>
    <generalization xmi:id="_BRlawIukEeCrt4LXEOI4YA" general="_BPTi0IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOxXUYukEeCrt4LXEOI4YA" name="InMsgQueue">
    <ownedComment xmi:id="_vwYoRJ2TEeCg6sqGpS8R3g">
      <body>An incoming message queue plays the role of broker for schedulable resources owned by a real-time unit. It stores incoming messages before schedulable resources can process them. A schedulable resource can be assigned to handle a message when its gets available, based on a scheduling policy.

An incoming message queue stores incoming messages before they can be executed by a schedulable resource owned by a real-time unit. Messages are handled in the queue based on a defined scheduling policy. The size of the message queue may be either infinite or limited.</body>
    </ownedComment>
    <generalization xmi:id="_BQZH8IukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQZH8YukEeCrt4LXEOI4YA" general="_BOLhcYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOx-YIukEeCrt4LXEOI4YA" name="CommunicationResource">
    <ownedComment xmi:id="_vwYoRZ2TEeCg6sqGpS8R3g">
      <body>A CommunicationResource generalizes the two kinds of communication resources defined. It holds a collection of communication services.

A CommunicationResource generalizes the two kinds of communication resources defined, communicationMedia and communicationEndpoint. It represents any resource used for communication and may be considered as a collector of communication services.</body>
    </ownedComment>
    <generalization xmi:id="_BQToYIukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOylcIukEeCrt4LXEOI4YA" name="TimeInterval">
    <ownedComment xmi:id="_vwYoRp2TEeCg6sqGpS8R3g">
      <body>A time interval denotes a set of junction instants belonging to a time base and characterized by its lower and upper bound.

A time interval of a time base denotes the set of junction instants belonging to this time base and temporally after the lower junction instant and before the upper junction instants. Two Booleans indicate whether the bounds belong or not to the interval. Note that the bounds and the members are restricted to junction instants because they are the only observable instants. 579</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOylcYukEeCrt4LXEOI4YA" name="Refinement">
    <ownedComment xmi:id="_vwYoR52TEeCg6sqGpS8R3g">
      <body>Refinement is a relationship where a general element is refined into more specialized ones. It is the opposite of an abstraction.

Contrary to an allocation that deals with independent models, refinement works by changing the focus on an underlying similar structure. A refinement applies either to application model elements only or to execution platform model elements only. Constraint [1] If the general end is an ApplicationAllocationEnd, then the refined ends must be ApplicationAllocationEnd as well. [2] If the general end is an ExecutionPlatformAllocationEnd, then the refined ends must also be ExecutionPlatformAllocationEnd. 607</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOzMgIukEeCrt4LXEOI4YA" name="BehaviorScenario">
    <ownedComment xmi:id="_vwYoSJ2TEeCg6sqGpS8R3g">
      <body>A BehaviorScenario defines the behaviour in response to a request event, including the sequence of steps and their use of resources.

</body>
    </ownedComment>
    <generalization xmi:id="_BP9DEIukEeCrt4LXEOI4YA" general="_BPJx0IukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BP9qIIukEeCrt4LXEOI4YA" general="_BONWoYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOzMgYukEeCrt4LXEOI4YA" name="Unit">
    <ownedComment xmi:id="_vwYoSZ2TEeCg6sqGpS8R3g">
      <body>A unit defines a quantity in terms of which the magnitudes of other quantities that have the same dimension can be stated.

A unit defines a quantity in terms of which the magnitudes of other quantities that have the same dimension can be stated. A unit often relies on precise and reproducible ways to measure the unit. For example, a unit of length such as meter may be specified as a multiple of a particular wavelength of light. A unit may also specify less stable or precise ways to express some value, such as a cost expressed in some currency, or a severity rating measured by a numerical scale.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOzzkIukEeCrt4LXEOI4YA" name="HW_Resource">
    <ownedComment xmi:id="_vwhyMJ2TEeCg6sqGpS8R3g">
      <body>HW_Resource is the main concept of the Hardware Resource Model.

HW_Resource is the most abstract concept of the Hardware Resource Model. It denotes an hardware entity that provides one or many services (HW_ResourceService), and may require some services from other resources. HW_Resource could be basic or composed of ownedHW sub-resources. Each HW_Resource can be refined to a logical resource or/and a physical component. As most of other hardware concepts are inheriting from HW_Resource, they benefit from the same structure. Example: Every hardware entity is an HW_Resource</body>
    </ownedComment>
    <generalization xmi:id="_BRZNgIukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BOzzkYukEeCrt4LXEOI4YA" name="PrimitiveType">
    <ownedComment xmi:id="_vwhyMZ2TEeCg6sqGpS8R3g">
      <body>PrimitiveType matches with the UML concept of PrimitiveType. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

The run-time instances of a primitive type are data values. The values are in many-to-one correspondence to mathematical elements defined outside of UML (for example, the various integers). Instances of primitive types do not have identity. If two instances have the same representation, then they are indistinguishable. Additionally, in VSL, a primitive data type may have operations defined through Operation features. The algebra of primitive data types is defined axiomatically outside of UML.</body>
    </ownedComment>
    <generalization xmi:id="_BQaWEIukEeCrt4LXEOI4YA" general="_BOfDcoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO0aoIukEeCrt4LXEOI4YA" name="InstantValue">
    <ownedComment xmi:id="_vwhyMp2TEeCg6sqGpS8R3g">
      <body>An instant value is a time value that denotes instants of the time base associated with its onClock clock.

An instant value is a time value that denotes junction instants of the time base associated with its onClock clock. When the onClock clock has a maximal value, due to clock roll-over, an instant value may denote many instants.</body>
    </ownedComment>
    <generalization xmi:id="_BP_fUIukEeCrt4LXEOI4YA" general="_BOayAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BO0aoYukEeCrt4LXEOI4YA" name="NotificationResourceKind">
    <ownedComment xmi:id="_vwhyM52TEeCg6sqGpS8R3g">
      <body>The NotificationResourceKind enumerates common mechanisms provide by support to notify occurrence. Literals &amp;#226;&amp;#8364;&amp;#162; Barrier Barrier mechanism. &amp;#226;&amp;#8364;&amp;#162; Event Event mechanism. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined mechanisms. &amp;#226;&amp;#8364;&amp;#162; Other Other mechanisms.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BO1BsIukEeCrt4LXEOI4YA" name="Barrier"/>
    <ownedLiteral xmi:id="_BO1BsYukEeCrt4LXEOI4YA" name="Event">
      <ownedComment xmi:id="_vxIPJ52TEeCg6sqGpS8R3g">
        <body>An Event is the specification of a kind of change of state that may happen in the modeled system.

An Event is the specification of a kind of change of state that may happen in the modeled system. Event occurrences are often generated as a result of some action either within the system or in the environment surrounding the system.</body>
      </ownedComment>
    </ownedLiteral>
    <ownedLiteral xmi:id="_BO1BsoukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BO1Bs4ukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO1BtIukEeCrt4LXEOI4YA" name="ApplicationAllocationEnd">
    <ownedComment xmi:id="_vwhyNJ2TEeCg6sqGpS8R3g">
      <body>ApplicationAllocationEnd identifies elements that are sources of an allocation.

ApplicationAllocationEnd identifies application model elements that are allocated to resources. Its allocatedTo attribute is derived from any Allocation dependency and allows for tracing the resources on to which this element is allocated.</body>
    </ownedComment>
    <generalization xmi:id="_BRHgsIukEeCrt4LXEOI4YA" general="_BOayAYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO1owIukEeCrt4LXEOI4YA" name="SwConcurrentResource">
    <ownedComment xmi:id="_vwhyNZ2TEeCg6sqGpS8R3g">
      <body>

This resource defines entities, which may execute concurrently sequential part of instructions. SwConcurrentResource is an abstract concept. It provides an executing context to a routine. Typical SwConcurrentResource are schedulableResources, interruptResources, and alarms.</body>
    </ownedComment>
    <generalization xmi:id="_BRc34IukEeCrt4LXEOI4YA" general="_BOdOQYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRde8IukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BReGAIukEeCrt4LXEOI4YA" general="_BPRGkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO1owYukEeCrt4LXEOI4YA" name="ExecutionHost">
    <ownedComment xmi:id="_vwhyNp2TEeCg6sqGpS8R3g">
      <body>A CPU or other device which executes functional steps.

</body>
    </ownedComment>
    <generalization xmi:id="_BPxc4YukEeCrt4LXEOI4YA" general="_BOGo8YukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BPxc4oukEeCrt4LXEOI4YA" general="_BObZEoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BPyD8IukEeCrt4LXEOI4YA" general="_BOLhcIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO2P0IukEeCrt4LXEOI4YA" name="CoincidenceRelation">
    <ownedComment xmi:id="_vwhyN52TEeCg6sqGpS8R3g">
      <body>A coincidence relation relates junction instants which are coincident.

A coincidence relation relates junction instants which are coincident. These instants are owned by distinct time bases.</body>
    </ownedComment>
    <generalization xmi:id="_BQgcsIukEeCrt4LXEOI4YA" general="_BOqCkYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BO2P0YukEeCrt4LXEOI4YA" name="AccessPolicyKind">
    <ownedComment xmi:id="_vwhyOJ2TEeCg6sqGpS8R3g">
      <body>The AccessPolicyKind enumerates common policy to access a resource. Literals &amp;#226;&amp;#8364;&amp;#162; Read Read access only. &amp;#226;&amp;#8364;&amp;#162; ReadWrite Read and write access allowed. &amp;#226;&amp;#8364;&amp;#162; Write Write access only. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined policy. &amp;#226;&amp;#8364;&amp;#162; Other Other user&amp;apos;s specific policy.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BO2P0oukEeCrt4LXEOI4YA" name="Read"/>
    <ownedLiteral xmi:id="_BO2P04ukEeCrt4LXEOI4YA" name="ReadWrite"/>
    <ownedLiteral xmi:id="_BO2P1IukEeCrt4LXEOI4YA" name="Write"/>
    <ownedLiteral xmi:id="_BO224IukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BO224YukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO224oukEeCrt4LXEOI4YA" name="DiscreteTimeBase">
    <ownedComment xmi:id="_vwhyOZ2TEeCg6sqGpS8R3g">
      <body>A DiscreteTimeBase represents an ordered discrete set of instants.

A discrete time base represents an ordered set of discrete instants. A discrete time base can be referred to by a clock, and thus allows access to the time structure.</body>
    </ownedComment>
    <generalization xmi:id="_BP-4QYukEeCrt4LXEOI4YA" general="_BOOkw4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO3d8IukEeCrt4LXEOI4YA" name="HW_Actuator">
    <ownedComment xmi:id="_vwrjMJ2TEeCg6sqGpS8R3g">
      <body>

Actuators are frequently used as mechanisms to introduce motion, or to clamp an object so as to prevent motion. They are devices that transform an input signal (mainly an electrical signal) into motion.</body>
    </ownedComment>
    <generalization xmi:id="_BPr9UIukEeCrt4LXEOI4YA" general="_BOlxIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO3d8YukEeCrt4LXEOI4YA" name="MessageComResource">
    <ownedComment xmi:id="_vwrjMZ2TEeCg6sqGpS8R3g">
      <body>

MessagingComResource defines communication resource to exchange message. Real-time platforms provide several communication mechanisms to exchange data in a concurrent resource context. Commonly, users can manipulate message queues, pipes, blackboards, buffer, etc.</body>
    </ownedComment>
    <generalization xmi:id="_BRoeEYukEeCrt4LXEOI4YA" general="_BOJsQ4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO4FAIukEeCrt4LXEOI4YA" name="ResourceManager">
    <ownedComment xmi:id="_vwrjMp2TEeCg6sqGpS8R3g">
      <body>The ResourceManager, is responsible for creating, maintaining, and deleting resources according to a resource control policy.

The ResourceManager, is responsible for creating, maintaining, and deleting resources according to a resource control policy. For example, a buffer pool manager is responsible for creating a set of buffers from one or more chunks of heap memory. Once created and initialized, the resources are typically handed over to a resource broker. In most practical cases, the resource manager and the resource broker are the same entity. However, since this is not always true the two concepts are modeled separately (they can be easily combined by designating the same entity as serving both purposes).</body>
    </ownedComment>
    <generalization xmi:id="_BRmB0IukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BO4sEIukEeCrt4LXEOI4YA" name="ConditionType">
    <ownedComment xmi:id="_vwrjM52TEeCg6sqGpS8R3g">
      <body>ConditionType is an enumeration defining the various condition types. Literals &amp;#226;&amp;#8364;&amp;#162; temperature &amp;#226;&amp;#8364;&amp;#162; humidity &amp;#226;&amp;#8364;&amp;#162; altitude &amp;#226;&amp;#8364;&amp;#162; vibration &amp;#226;&amp;#8364;&amp;#162; shock &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BO4sEYukEeCrt4LXEOI4YA" name="temperature"/>
    <ownedLiteral xmi:id="_BO4sEoukEeCrt4LXEOI4YA" name="humidity"/>
    <ownedLiteral xmi:id="_BO4sE4ukEeCrt4LXEOI4YA" name="altitude"/>
    <ownedLiteral xmi:id="_BO4sFIukEeCrt4LXEOI4YA" name="vibration"/>
    <ownedLiteral xmi:id="_BO4sFYukEeCrt4LXEOI4YA" name="shock"/>
    <ownedLiteral xmi:id="_BO4sFoukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BO4sF4ukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO5TIIukEeCrt4LXEOI4YA" name="SwTimerResource">
    <ownedComment xmi:id="_vwrjNJ2TEeCg6sqGpS8R3g">
      <body>A SwTimerResource represents an entity that is capable of following and evidencing the pace of time upon demand with a prefixed maximum resolution, at programmable time intervals.

An SwTimerResource represents an entity that is capable of following and evidencing the pace of time upon demand with a prefixed maximum resolution, usually with the usage of its reference clock. The SwTimerResource will make evident the arrival of the programmed duration time after the instant of its last starting or resetting.</body>
    </ownedComment>
    <generalization xmi:id="_BRPcgYukEeCrt4LXEOI4YA" general="_BOUrYoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO5TIYukEeCrt4LXEOI4YA" name="HW_DMA">
    <ownedComment xmi:id="_vwrjNZ2TEeCg6sqGpS8R3g">
      <body>HW_DMA (Direct Memory Access) is a memory manager from the HW_Storage package.

HW_DMA is mainly a memory manager. It allows access to the controlled HW_Memory for reading and/or writing independently of the HW_Processor by taking the control of the communication media. The attribute nbChannels corresponds to the number of simultaneous transfers that the HW_DMA can handle. Example: DMA controller is typically part of the motherboard chipset.</body>
    </ownedComment>
    <generalization xmi:id="_BQlVMYukEeCrt4LXEOI4YA" general="_BOXHoYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQl8QIukEeCrt4LXEOI4YA" general="_BOZj4YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO56MIukEeCrt4LXEOI4YA" name="EnumerationType">
    <ownedComment xmi:id="_vwrjNp2TEeCg6sqGpS8R3g">
      <body>EnumerationType matches with the UML concept of Enumeration. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

The run-tistances of an Enumeration data type are data values. Each such value corresponds to exactly one Enumeration Literal.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO6hQIukEeCrt4LXEOI4YA" name="TimedDurationObservation">
    <ownedComment xmi:id="_vwrjN52TEeCg6sqGpS8R3g">
      <body>A TimedDurationObservation denotes some interval of time, observed on one clock or two clocks.

A TimedDurationObservation denotes some interval of time, associated with execution, request, or two event occurrences, and observed on one clock or two clocks. The latter case occurs for instance when a message is sent to a distant site, with a receiver clock distinct from the sender clock. The duration may be the time elapsed between the occurrences of the start and the finish events of an execution. The duration may also be the time elapsed between two of the three events associated with a message (its sending, its receipt, and the start of its processing by the receiver). More generally, the duration may be the time elapsed between the occurrences of two distinct events.</body>
    </ownedComment>
    <generalization xmi:id="_BRkMoIukEeCrt4LXEOI4YA" general="_BPWmJIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO6hQYukEeCrt4LXEOI4YA" name="AnnotatedModel">
    <ownedComment xmi:id="_vwrjOJ2TEeCg6sqGpS8R3g">
      <body>An annotated model is a model with additional semantic expressing concepts from a given modeling concern or domain viewpoint. An annotated model contains annotated model elements.

An annotated model is a model with additional semantic required for a given modeling concern or domain. An annotated model may contain annotated model elements.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO7IUIukEeCrt4LXEOI4YA" name="HW_ResourceService1">
    <ownedComment xmi:id="_vw1UMJ2TEeCg6sqGpS8R3g">
      <body>HW_ResourceService is the main behavior concept from the hardware Physical Model.

HW_ResourceService redefines the same named concept of the HW_General and it denotes a powered HW_Component service. It is associated with a power description which corresponds to the instantaneous consumption of the HW_Component when it is running this service.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BO7IUYukEeCrt4LXEOI4YA" name="ConstraintKind">
    <ownedComment xmi:id="_vw1UMZ2TEeCg6sqGpS8R3g">
      <body>Kind of constraints qualifies NFP constraints by either required, offered, or contract nature. Literals &amp;#226;&amp;#8364;&amp;#162; required &amp;#226;&amp;#8364;&amp;#162; offered &amp;#226;&amp;#8364;&amp;#162; constract

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BO7IUoukEeCrt4LXEOI4YA" name="required"/>
    <ownedLiteral xmi:id="_BO7vYIukEeCrt4LXEOI4YA" name="offered"/>
    <ownedLiteral xmi:id="_BO7vYYukEeCrt4LXEOI4YA" name="constract"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO7vYoukEeCrt4LXEOI4YA" name="DeviceResource">
    <ownedComment xmi:id="_vw1UMp2TEeCg6sqGpS8R3g">
      <body>A DeviceResource typically represents an external device that may be manipulated or invoked by the platform, but whose internal behavior is not a relevant part of the model under consideration.

A DeviceResource typically represents an external device that may require specific services in the platform for its usage and/or management. Active device resources may also be used to represent external specific purpose processing units, whose capabilities and responsibilities are somehow abstracted away. The implicit assumption is that their internal behavior is not a relevant part of the model under consideration.</body>
    </ownedComment>
    <generalization xmi:id="_BRAzAYukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO8WcIukEeCrt4LXEOI4YA" name="ConnectorEnd">
    <ownedComment xmi:id="_vw1UM52TEeCg6sqGpS8R3g">
      <body>A ConnectorEnd is an endpoint of a connector enabling to identify the elements of a StructuredComponent that are involved in a connection. Concretely, a ConnectorEnd may reference an InteractionPort (via its endPort property), an AssemblyPart (endPart), or a Port in the context of an AssemblyPart (using both endPort and endPart properties).

This concept matches the definition of the CompositeStructures::InternalStructures::ConnectorEnd metaclass defined in UML.</body>
    </ownedComment>
    <generalization xmi:id="_BQeAdIukEeCrt4LXEOI4YA" general="_BOH3FYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO89gIukEeCrt4LXEOI4YA" name="ResourceReference">
    <ownedComment xmi:id="_vw1UNJ2TEeCg6sqGpS8R3g">
      <body>A ResourceReference is an abstract class that will be used to create links to concrete instances of resources in order to manage them.

A ResourceReference provides a way to designate instances of a resource that will be created and eliminated at run-time. This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BQMToIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO89gYukEeCrt4LXEOI4YA" name="PRequestedService">
    <ownedComment xmi:id="_vw1UNZ2TEeCg6sqGpS8R3g">
      <body>A &amp;#226;&amp;#8364;&amp;#339;service,&amp;#226;&amp;#8364;&amp;#65533; that is an Action of some kind, supplied by an Operation supplied by an Object or Component through its interface. If the Object or Component has a behavior definition for the Operation, the BehaviorScenario for this definition is included in the calling scenario; if not, then a BehaviorScenario can be referenced explicitly. A third shorthand way to define the &amp;#226;&amp;#8364;&amp;#339;service&amp;#226;&amp;#8364;&amp;#65533; (as a kind of stub for a full definition) is through its inherited attributes as a PExecutionStep.

The host and process associations are determined through the configuration information in the UML model, such as the process context of the Object or Component, and its deployment.</body>
    </ownedComment>
    <generalization xmi:id="_BQeAc4ukEeCrt4LXEOI4YA" general="_BOGo9IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO9kkIukEeCrt4LXEOI4YA" name="ChronometricClock">
    <ownedComment xmi:id="_vw1UNp2TEeCg6sqGpS8R3g">
      <body>A chronometric clock is a clock bound to physical time. Some properties are specific to a clock; others are related to a pair of clocks.

A chronometric clock is a clock bound to physical time. It can yield a &amp;#226;&amp;#8364;&amp;#339;time reading.&amp;#226;&amp;#8364;&amp;#65533; Clock characteristics reflect imperfections of clocks to accurately follow physical time evolutions.</body>
    </ownedComment>
    <generalization xmi:id="_BRetEIukEeCrt4LXEOI4YA" general="_BOg4oIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO-LoIukEeCrt4LXEOI4YA" name="EntryPoint">
    <ownedComment xmi:id="_vw1UN52TEeCg6sqGpS8R3g">
      <body>

The EntryPoint supplies the routine (i.e., operations) executed in the context of the SwConcurrentResource. At creations of concurrent resources, users are usually invited to define as parameter a sequence of actions to be executed in the context provided by the concurrent resource. For example, the POSIX standard provides a computing resource creation service named &amp;#226;&amp;#8364;&amp;#339;pthread_create&amp;#226;&amp;#8364;&amp;#65533; where users define the entry point of that resource by the parameter &amp;#226;&amp;#8364;&amp;#339;start_routine.&amp;#226;&amp;#8364;&amp;#65533;</body>
    </ownedComment>
    <generalization xmi:id="_BRIHwYukEeCrt4LXEOI4YA" general="_BOZj4IukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO-ysIukEeCrt4LXEOI4YA" name="MemoryPartition">
    <ownedComment xmi:id="_vw-eIJ2TEeCg6sqGpS8R3g">
      <body>

MemoryPartition represents a virtual address space. It insures that each concurrent resource associated to a specific memory partition can only access its own memory space.</body>
    </ownedComment>
    <generalization xmi:id="_BRCoMIukEeCrt4LXEOI4YA" general="_BOdOQYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO-ysYukEeCrt4LXEOI4YA" name="Operation">
    <ownedComment xmi:id="_vw-eIZ2TEeCg6sqGpS8R3g">
      <body>An Operation is a behavioral feature that a component provides or requires to/from other components. An operation is used in client-server like communications when a component invokes a behavior through a service call and expects a reply to be provided.

An Operation represents an externally visible behavior owned by a component. A service is used in client-server like communications as a contract between components: the owner component provides a service through one of its ports to other components, which require the service. Using a request/reply communication schema, a component that requires a service may invoke it through an operation call. The client component expects then a reply to be provided by the service provider.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BO_ZwIukEeCrt4LXEOI4YA" name="CompositeBehavior">
    <ownedComment xmi:id="_vw-eIp2TEeCg6sqGpS8R3g">
      <body>A CompositeBehavior is a kind of Behavior that may contain other Behaviors.

A CompositeBehavior is a kind of Behavior that may contain other Behaviors, which in turn may be either composite or atomic.</body>
    </ownedComment>
    <generalization xmi:id="_BQcyUIukEeCrt4LXEOI4YA" general="_BOOkxIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPAA0IukEeCrt4LXEOI4YA" name="HW_Drive">
    <ownedComment xmi:id="_vw-eI52TEeCg6sqGpS8R3g">
      <body>HW_Drive is a mass storage memory from the HW_Storage package.

HW_Drive is a permanent storage memory. In some HW_Drives, the storage medium is permanently seated inside. In others, the medium can be replaced. From a functional point of view, sectorSize attribute corresponds to the smallest physical amount of memory that can be allocated. Example: 0.85-inch hard disk drives with over 4 GB storage space.</body>
    </ownedComment>
    <generalization xmi:id="_BRXYUIukEeCrt4LXEOI4YA" general="_BPmdwYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPAA0YukEeCrt4LXEOI4YA" name="TimedExecution">
    <ownedComment xmi:id="_vw-eJJ2TEeCg6sqGpS8R3g">
      <body>Executions) This is a generic concept of an execution that may be assigned start and finish instant values and duration values on clocks.

A TimedExecution is a BehaviorExecutionSpecification and a TimedElement. As a TimedElement, it refers to clocks. The startInstant (finishInstant, repectively) property specifies the InstantValue of the start (finish, respectively) event occurrence of the execution of this TimedExecution on one of its on clocks. The executionDuration property specifies the DurationValue of the execution of this TimedExecution on one of its on clocks.</body>
    </ownedComment>
    <generalization xmi:id="_BQU2goukEeCrt4LXEOI4YA" general="_BOHQCoukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQVdkIukEeCrt4LXEOI4YA" general="_BOr3wIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPAn4IukEeCrt4LXEOI4YA" name="AnalysisContext">
    <ownedComment xmi:id="_vw-eJZ2TEeCg6sqGpS8R3g">
      <body>For each kind of analysis, there is one analysis context in a UML model. This class identifies elements (diagrams) that are of interest for the given analysis. Global parameters of the Context.

The contextParams are a set of annotation variables defining global properties of this analysis context. Properties of the workload, behaviour, and resources may be defined as functions of these variables.</body>
    </ownedComment>
    <generalization xmi:id="_BRFEcYukEeCrt4LXEOI4YA" general="_BOQZ84ukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BRFrgIukEeCrt4LXEOI4YA" general="_BOdOQIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPBO8IukEeCrt4LXEOI4YA" name="Measure">
    <ownedComment xmi:id="_vw-eJp2TEeCg6sqGpS8R3g">
      <body>A Measure is a (statistical) function (e.g., mean, max, min, mean) characterizing the set of sample realizations.

A Measure is a (statistical) function (e.g., mean, max, min, median, variance, standard deviation, histogram, etc.) characterizing a set of samples realizations. Measures may be computed either directly by applying one function to the set of realization values, or by using theoretical functions of the probability distribution given for the respective quantitative NFP.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPB2AIukEeCrt4LXEOI4YA" name="TimedEvent">
    <ownedComment xmi:id="_vw-eJ52TEeCg6sqGpS8R3g">
      <body>A TimedEvent is an event whose occurrences are bound to clocks.

A TimedEvent is an event whose occurrences are bound to clocks. The when property specifies the instant value of the first occurrence of this TimedEvent. The every optional property specifies repetitive occurrences.</body>
    </ownedComment>
    <generalization xmi:id="_BQmjUIukEeCrt4LXEOI4YA" general="_BPH8oIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQnxcIukEeCrt4LXEOI4YA" general="_BOr3wIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPB2AYukEeCrt4LXEOI4YA" name="DerivedQuantity">
    <ownedComment xmi:id="_vw-eKJ2TEeCg6sqGpS8R3g">
      <body>Derived Quantities (e.g., area, volume, force, frequency) may be obtained from the basic quantities by known formulas.

Derived physical quantities (which are the majority of quantities) are defined by a mathematical expression involving either the fundamental (basic) quantities or other derived quantities.</body>
    </ownedComment>
    <generalization xmi:id="_BRnP8IukEeCrt4LXEOI4YA" general="_BPfwEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPCdEIukEeCrt4LXEOI4YA" name="CacheType">
    <ownedComment xmi:id="_vw-eKZ2TEeCg6sqGpS8R3g">
      <body>CacheType is an enumeration defining the possible cache types. Literals &amp;#226;&amp;#8364;&amp;#162; data &amp;#226;&amp;#8364;&amp;#162; instruction &amp;#226;&amp;#8364;&amp;#162; unified both data and instruction &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPCdEYukEeCrt4LXEOI4YA" name="data"/>
    <ownedLiteral xmi:id="_BPCdEoukEeCrt4LXEOI4YA" name="instruction"/>
    <ownedLiteral xmi:id="_BPCdE4ukEeCrt4LXEOI4YA" name="unified"/>
    <ownedLiteral xmi:id="_BPCdFIukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BPDEIIukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPDrMIukEeCrt4LXEOI4YA" name="HW_Card">
    <ownedComment xmi:id="_vxIPIJ2TEeCg6sqGpS8R3g">
      <body>HW_Card is a physical entity from the HW_Layout package.

HW_Card symbolizes a printed circuit board. It is typically a composite HW_Component that comprises other sub components like chips and electrical devices. Example: A motherboard is an HW_Card.</body>
    </ownedComment>
    <generalization xmi:id="_BRhwYIukEeCrt4LXEOI4YA" general="_BORoE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPDrMYukEeCrt4LXEOI4YA" name="ConcurrentAccessProtocolKind">
    <ownedComment xmi:id="_vxIPIZ2TEeCg6sqGpS8R3g">
      <body>The ConcurrentAccessProtocolKind enumerates common protocol to access mutually a shared resource. Literals &amp;#226;&amp;#8364;&amp;#162; NoPreemption Lock the concurrency to avoid preemption when a resource is accessing a shared variable. &amp;#226;&amp;#8364;&amp;#162; PCP Priority Ceiling protocol. &amp;#226;&amp;#8364;&amp;#162; PIP Priority Inheritance Protocol. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined policy. &amp;#226;&amp;#8364;&amp;#162; Other Other user&amp;apos;s specific policy.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPDrMoukEeCrt4LXEOI4YA" name="NoPreemption"/>
    <ownedLiteral xmi:id="_BPESQIukEeCrt4LXEOI4YA" name="PCP"/>
    <ownedLiteral xmi:id="_BPESQYukEeCrt4LXEOI4YA" name="PIP"/>
    <ownedLiteral xmi:id="_BPESQoukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BPESQ4ukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPESRIukEeCrt4LXEOI4YA" name="LiteralBoolean">
    <ownedComment xmi:id="_vxIPIp2TEeCg6sqGpS8R3g">
      <body>LiteralBoolean matches with the UML concept of LiteralBoolean. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

A LiteralBoolean specifies a constant Boolean value. 701</body>
    </ownedComment>
    <generalization xmi:id="_BPz5IIukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPE5UIukEeCrt4LXEOI4YA" name="PortType">
    <ownedComment xmi:id="_vxIPI52TEeCg6sqGpS8R3g">
      <body>PortType is an enumeration. Literals &amp;#226;&amp;#8364;&amp;#162; male 669 &amp;#226;&amp;#8364;&amp;#162; female &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPE5UYukEeCrt4LXEOI4YA" name="male"/>
    <ownedLiteral xmi:id="_BPE5UoukEeCrt4LXEOI4YA" name="female"/>
    <ownedLiteral xmi:id="_BPE5U4ukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BPE5VIukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPFgYIukEeCrt4LXEOI4YA" name="PrecedenceRelation">
    <ownedComment xmi:id="_vxIPJJ2TEeCg6sqGpS8R3g">
      <body>A precedence relation relates two junction instants, from distinct time bases, which are temporally ordered.

A precedence relation relates two junction instants, from distinct time bases, which are temporally ordered: the before junction instant precedes the after junction instant.</body>
    </ownedComment>
    <generalization xmi:id="_BRUVAIukEeCrt4LXEOI4YA" general="_BOqCkYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPGHcIukEeCrt4LXEOI4YA" name="AssemblyPart">
    <ownedComment xmi:id="_vxIPJZ2TEeCg6sqGpS8R3g">
      <body>An AssemblyPart is a property that relates to a StructuredComponent. It is used to reference instances of a StructuredComponents is used in the definition of the structure of another one.

The type attribute of an AssemblyPart refers to a StructuredComponent. It means that this specific component is instantiated and used in an assembly to define the structure of another StructuredComponent.</body>
    </ownedComment>
    <generalization xmi:id="_BQ1M0YukEeCrt4LXEOI4YA" general="_BOGo9YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPGugIukEeCrt4LXEOI4YA" name="Instant">
    <ownedComment xmi:id="_vxIPJp2TEeCg6sqGpS8R3g">
      <body>An instant represents an element of a time base (a point in time).

An instant represents a point in time. It is owned by a time base in which it occupies a unique position with respect to the other instants of this time base.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPH8oIukEeCrt4LXEOI4YA" name="Event">
    <generalization xmi:id="_BPvnsIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPIjsIukEeCrt4LXEOI4YA" name="SchedPolicyKind">
    <ownedComment xmi:id="_vxRZEJ2TEeCg6sqGpS8R3g">
      <body>This class is an enumerated value with the scheduling policies most widely known. Literals &amp;#226;&amp;#8364;&amp;#162; EarliestDeadlineFirst &amp;#226;&amp;#8364;&amp;#162; FIFO &amp;#226;&amp;#8364;&amp;#162; FixedPriority &amp;#226;&amp;#8364;&amp;#162; LeastLaxityFirst &amp;#226;&amp;#8364;&amp;#162; RoundRobin &amp;#226;&amp;#8364;&amp;#162; TableDriven &amp;#226;&amp;#8364;&amp;#162; Undef &amp;#226;&amp;#8364;&amp;#162; Other

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPIjsYukEeCrt4LXEOI4YA" name="EarliestDeadlineFirst"/>
    <ownedLiteral xmi:id="_BPIjsoukEeCrt4LXEOI4YA" name="FIFO"/>
    <ownedLiteral xmi:id="_BPIjs4ukEeCrt4LXEOI4YA" name="FixedPriority"/>
    <ownedLiteral xmi:id="_BPIjtIukEeCrt4LXEOI4YA" name="LeastLaxityFirst"/>
    <ownedLiteral xmi:id="_BPIjtYukEeCrt4LXEOI4YA" name="RoundRobin"/>
    <ownedLiteral xmi:id="_BPIjtoukEeCrt4LXEOI4YA" name="TableDriven"/>
    <ownedLiteral xmi:id="_BPIjt4ukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BPIjuIukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPJKwIukEeCrt4LXEOI4YA" name="HW_Bridge">
    <ownedComment xmi:id="_vxRZEZ2TEeCg6sqGpS8R3g">
      <body>HW_Bridge is a particular HW_Media from the HW_Communication package.

The HW_Bridge typically handles communications between two or more HW_Medias. It may realize complex protocol translations. Like any HW_Media, HW_Bridge has a maximum bandwidth. Example: PCI-to-ISA Bridge behaves as a PCI target on a PCI bus and as an ISA master on an ISA bus.</body>
    </ownedComment>
    <generalization xmi:id="_BRG5oIukEeCrt4LXEOI4YA" general="_BOOkwoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPJx0IukEeCrt4LXEOI4YA" name="TimedProcessing">
    <ownedComment xmi:id="_vxRZEp2TEeCg6sqGpS8R3g">
      <body>Processings) TimedProcessing is a generic concept for modeling activities that have known start and finish times or a known duration, and whose instants and durations are bound to clocks.

TimedProcessing is a generic concept for modeling activities that have known start and finish times or a known duration, and whose instants and durations are bound to clocks. This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BPtLcIukEeCrt4LXEOI4YA" general="_BOr3wIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPJx0YukEeCrt4LXEOI4YA" name="TimedDurationConstraint">
    <ownedComment xmi:id="_vxRZE52TEeCg6sqGpS8R3g">
      <body>A TimedDurationConstraint defines a constraint on the duration of some execution or the temporal distance between two event occurrences.

A TimedDurationConstraint defines a constraint on the duration of some execution or the temporal distance between two event occurrences.</body>
    </ownedComment>
    <generalization xmi:id="_BQG0EYukEeCrt4LXEOI4YA" general="_BOj78YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPKY4IukEeCrt4LXEOI4YA" name="LiteralNull">
    <ownedComment xmi:id="_vxRZFJ2TEeCg6sqGpS8R3g">
      <body>LiteralNull matches with the UML concept of LiteralNull. We show below only the associations, attributes, and constraints that are relevant for the VSL specification.

LiteralNull is intended to be used to explicitly model the lack of a value.</body>
    </ownedComment>
    <generalization xmi:id="_BRAL8IukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPK_8IukEeCrt4LXEOI4YA" name="HW_MMU">
    <ownedComment xmi:id="_vxRZFZ2TEeCg6sqGpS8R3g">
      <body>HW_MMU is a memory manager from the HW_Storage package.

HW_MMU (Memory Management Unit) is an HW_StorageManager It manages and speeds processor accesses to memory by translating virtual addresses to physical ones via associative caches called Translation Lookaside Buffers (TLB). In general, TLB entry stores the virtual address of a memory page with its corresponding physical address. It also includes information about the page use that is necessary for memory protection if supported. Example: all today processors have integrated HW_MMUs.</body>
    </ownedComment>
    <generalization xmi:id="_BQMToYukEeCrt4LXEOI4YA" general="_BOXHoYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPLnAIukEeCrt4LXEOI4YA" name="TimedMessage">
    <ownedComment xmi:id="_vxRZFp2TEeCg6sqGpS8R3g">
      <body>Processings) TimedMessage is a generic concept for modeling communications that have known start, finish, or consumption times or a known duration, and whose instants and durations are bound to clocks.

TimedMessage is a generic concept for modeling communications that have known start, finish, or consumption times or a known duration, and whose instants and durations are bound to clocks. This is an abstract class.</body>
    </ownedComment>
    <generalization xmi:id="_BQhq0IukEeCrt4LXEOI4YA" general="_BPJx0IukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQiR4IukEeCrt4LXEOI4YA" general="_BOxXUIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPMOEIukEeCrt4LXEOI4YA" name="MemoryOrganization">
    <ownedComment xmi:id="_vxRZF52TEeCg6sqGpS8R3g">
      <body>MemoryOrganizaion is a memory organization tupletype from the HW_Storage package.

The memory (HW_RAM and HW_ROM) is organized under banks of rows and columns of words. Consequently, the memory size is the product of all these attributes. Such detailed description of the memory organization is necessary for performance analysis and HW_Memory simulation. Example: 64Mo SDRAM could be organized under 4096x256x4x16bit.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPMOEYukEeCrt4LXEOI4YA" name="TimeNatureKind">
    <ownedComment xmi:id="_vxbKEJ2TEeCg6sqGpS8R3g">
      <body>TimeNatureKind is an enumeration type that defines literals used to specify the nature discrete or dense of a time base or a time value.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPMOEoukEeCrt4LXEOI4YA" name="discrete"/>
    <ownedLiteral xmi:id="_BPMOE4ukEeCrt4LXEOI4YA" name="dense"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPM1IIukEeCrt4LXEOI4YA" name="AbstractNFP">
    <ownedComment xmi:id="_vxbKEZ2TEeCg6sqGpS8R3g">
      <body>AbstractNFP defines the abstract concept of Non-Functional Property (NFP) as quantitative or qualitative information.

A non-functional property (NFP) is also called extra-functional property or even quality of service depending of the application domain. It describes how a computing system behaves.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPNcMIukEeCrt4LXEOI4YA" name="NotificationKind">
    <ownedComment xmi:id="_vxbKEp2TEeCg6sqGpS8R3g">
      <body>The NotificationKind enumerates common policy to access a resource. Literals &amp;#226;&amp;#8364;&amp;#162; Bounded Each occurrence increments a counter. &amp;#226;&amp;#8364;&amp;#162; Memorized Occurrences are memorized in a buffer. &amp;#226;&amp;#8364;&amp;#162; Memoryless Occurrences are not memorized in a buffer, hence multiple occurrences are lost. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined. &amp;#226;&amp;#8364;&amp;#162; Other User&amp;apos;s specific policy.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPNcMYukEeCrt4LXEOI4YA" name="Bounded"/>
    <ownedLiteral xmi:id="_BPNcMoukEeCrt4LXEOI4YA" name="Memorized"/>
    <ownedLiteral xmi:id="_BPNcM4ukEeCrt4LXEOI4YA" name="Memoryless"/>
    <ownedLiteral xmi:id="_BPNcNIukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BPNcNYukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPODQIukEeCrt4LXEOI4YA" name="DirectionKind1">
    <ownedComment xmi:id="_vxbKE52TEeCg6sqGpS8R3g">
      <body>DirectionKind is an enumeration, which literals specify the direction of flow elements or signals. It is used with atomic flow (or message) ports to specify the direction of a flow element or a signal that types the port. It can be also used with non-atomic flow (or message) ports to specify the direction of a flow specification, or the direction of its owned properties. Literals &amp;#226;&amp;#8364;&amp;#162; in Direction of the information flow is from outside to inside of the owning entity. When related to a signal, it is usual to say that the signal is consumed. &amp;#226;&amp;#8364;&amp;#162; out Direction of the information flow is from inside to outside of the owning entity. When related to a signal, it is usual to say that the signal is produced or published. &amp;#226;&amp;#8364;&amp;#162; inout Bidirectional information flow.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPODQYukEeCrt4LXEOI4YA" name="in"/>
    <ownedLiteral xmi:id="_BPODQoukEeCrt4LXEOI4YA" name="out"/>
    <ownedLiteral xmi:id="_BPODQ4ukEeCrt4LXEOI4YA" name="inout"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPOqUIukEeCrt4LXEOI4YA" name="QuantitativeNFP">
    <ownedComment xmi:id="_vxbKFJ2TEeCg6sqGpS8R3g">
      <body>Quantitative NFP are measurable, countable, or comparable properties. A given quantitative NFP may be characterized by a set of Sample Realizations and Measures.

A Quantitative NFP is a non-functional property that is measurable, countable, or comparable, and can be represented by an amount that is a numerical value.</body>
    </ownedComment>
    <generalization xmi:id="_BP0gMIukEeCrt4LXEOI4YA" general="_BPM1IIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPOqUYukEeCrt4LXEOI4YA" name="MutualExclusionResourceKind">
    <ownedComment xmi:id="_vxbKFZ2TEeCg6sqGpS8R3g">
      <body>The MutualExlusionResourceKind enumerates common mechanisms provide by platform to synchronize resource. Literals &amp;#226;&amp;#8364;&amp;#162; BooleanSemaphore Binary semaphore. It is a flag available or unavailable. There is no proprietary purpose. Anybody can give the semaphore even if it does not take it. &amp;#226;&amp;#8364;&amp;#162; CountSemaphore Counting semaphore for which every time the semaphore is given the count is incremented; every time the semaphore is given the count is decremented. &amp;#226;&amp;#8364;&amp;#162; Mutex Binary semaphore associated with a propriety concept, resource can give the semaphore if and only if the resource takes it. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined mechanisms. 629 &amp;#226;&amp;#8364;&amp;#162; Other Other mechanisms.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPPRYIukEeCrt4LXEOI4YA" name="BooleanSemaphore"/>
    <ownedLiteral xmi:id="_BPPRYYukEeCrt4LXEOI4YA" name="CountSemaphore"/>
    <ownedLiteral xmi:id="_BPPRYoukEeCrt4LXEOI4YA" name="Mutex"/>
    <ownedLiteral xmi:id="_BPPRY4ukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BPPRZIukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPP4cIukEeCrt4LXEOI4YA" name="RealTimeFeature">
    <ownedComment xmi:id="_vxbKFp2TEeCg6sqGpS8R3g">
      <body>A real-time feature defines special characteristics that can be attached to a real-time service, a real-time action, a message, or a signal.

A real-time feature is used to define special real-time characteristics: a real-time service, a real-time action, a message, or a signal.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPP4cYukEeCrt4LXEOI4YA" name="HW_RAM">
    <ownedComment xmi:id="_vxbKF52TEeCg6sqGpS8R3g">
      <body>HW_RAM is a processing memory from the HW_Storage package.

HW_RAM (Random Access Memory) is a processing memory that provides fast read/write services. Unlike HW_Drives, it allows data accesses in any order with the same timing. Each HW_RAM have a special memory organization (F.9.51), which implies its size and its behavior. Such properties coupled with memory timings are necessary for performance simulation. HW_RAM may be static or dynamic. Dynamic ones needs periodical refreshing (example 14.2.4.2). Typically HW_RAMs are volatile memories, as they lose their stored data once powered off. Hence, non volatile memories have permanent power supply or an associated HW_ROM. Example: SDRAM (Synchronous Dynamic RAM) main memory card.</body>
    </ownedComment>
    <generalization xmi:id="_BQeAcYukEeCrt4LXEOI4YA" general="_BOPL0YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPQfgIukEeCrt4LXEOI4YA" name="InterruptKind">
    <ownedComment xmi:id="_vxk7EJ2TEeCg6sqGpS8R3g">
      <body>The InterruptKind enumerates different kinds of interrupt. Literals &amp;#226;&amp;#8364;&amp;#162; HardwareInterrupt The interrupt source is a hardware one. &amp;#226;&amp;#8364;&amp;#162; ProcessorDetectedException Software interrupts produced by the CPU control unit while it detects an anomalous condition in executing an instruction. Some examples of &amp;#226;&amp;#8364;&amp;#339;Processor-detected&amp;#226;&amp;#8364;&amp;#65533; exceptions are faults (divide error, device not ready) and aborts (double fault). &amp;#226;&amp;#8364;&amp;#162; ProgrammedException Software interrupts produced by an explicit request of the programmer. Some examples of &amp;#226;&amp;#8364;&amp;#339;ProgrammedException&amp;#226;&amp;#8364;&amp;#65533; exceptions are traps (breakpoints, debug). &amp;#226;&amp;#8364;&amp;#162; Undef Undefined mechanism. &amp;#226;&amp;#8364;&amp;#162; Other: Others mechanisms.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPQfgYukEeCrt4LXEOI4YA" name="HardwareInterrupt"/>
    <ownedLiteral xmi:id="_BPQfgoukEeCrt4LXEOI4YA" name="ProcessorDetectedException"/>
    <ownedLiteral xmi:id="_BPQfg4ukEeCrt4LXEOI4YA" name="ProgrammedException"/>
    <ownedLiteral xmi:id="_BPQfhIukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BPQfhYukEeCrt4LXEOI4YA" name="Other:"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPRGkIukEeCrt4LXEOI4YA" name="ConcurrencyResource">
    <ownedComment xmi:id="_vxk7EZ2TEeCg6sqGpS8R3g">
      <body>A ConcurrencyResource is a protected active resource that is capable of performing its associated flow of execution concurrently with others, all of which take their processing capacity from a potentially different protected active resource (eventually a ComputingResource). Concurrency may be physical or logical, when it is logical the supplying processing resource needs to be arbitrated with a certain policy.

A ConcurrencyResource is a protected active resource that is capable of performing its associated flow of execution concurrently with others, all of which take their processing capacity from a potentially different protected active resource (eventually a ComputingResource). Concurrency may be physical or logical, when it is logical the supplying processing resource needs to be arbitrated with a certain policy. This root concept is further specialized in the Scheduling package.</body>
    </ownedComment>
    <generalization xmi:id="_BRVjIIukEeCrt4LXEOI4YA" general="_BObZE4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPRtoIukEeCrt4LXEOI4YA" name="PBehaviorDemand">
    <ownedComment xmi:id="_vxk7Ep2TEeCg6sqGpS8R3g">
      <body>A data structure describing a demand for executing a behavior, the type of a behaviorDemand attribute.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPSUsIukEeCrt4LXEOI4YA" name="ValueProperty">
    <ownedComment xmi:id="_vxk7E52TEeCg6sqGpS8R3g">
      <body>Value properties declares an attribute of one or more instances in terms of a named relationship to a value or values.

Value properties declares an attribute of one or more instances in terms of a named relationship to a value or values. 557</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPSUsYukEeCrt4LXEOI4YA" name="HW_Cache">
    <ownedComment xmi:id="_vxk7FJ2TEeCg6sqGpS8R3g">
      <body>HW_Cache is a processing memory from the HW_Storage package.

An HW_Cache is an HW_ProcessingMemory where frequently used data can be stored for rapid access. HW_Caches may vary depending on their level, type (F.9.2) and structure (F.9.1). Example: PowerPC G4 processor owns 32KB L1 instruction and data caches and 512KB L2 on-chip cache.</body>
    </ownedComment>
    <generalization xmi:id="_BP2VYYukEeCrt4LXEOI4YA" general="_BOPL0YukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPS7wIukEeCrt4LXEOI4YA" name="TimedInstantObservation">
    <ownedComment xmi:id="_vxk7FZ2TEeCg6sqGpS8R3g">
      <body>A TimedInstantObservation denotes an instant in time, observed on a given clock.

A TimedInstantObservation denotes an instant in time, associated with an event occurrence and observed on a given clock. The obsKind attribute may specify the kind of the observed event.</body>
    </ownedComment>
    <generalization xmi:id="_BQt4EIukEeCrt4LXEOI4YA" general="_BPWmJIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPTi0IukEeCrt4LXEOI4YA" name="Instance">
    <ownedComment xmi:id="_vxk7Fp2TEeCg6sqGpS8R3g">
      <body>An abstract concept representing some kind of run-time instance that is created based on one or more type specifications (descriptors). This concept includes all kinds of instances, including objects, data values, etc.

In the context of the duality classifier-instance, an instance represents a concrete reification of a classifier. The classifier is referred to as the type of the instance. An instance may have multiple types, which can be used either to represent different viewpoints of the model element or a composition of partial descriptions, including multiple inheritance for example. An instance may expose a number of concrete behaviors at run time; these are expressed by means of a set of composite behavior executions.</body>
    </ownedComment>
    <generalization xmi:id="_BQdZYIukEeCrt4LXEOI4YA" general="_BOlKEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPUJ4IukEeCrt4LXEOI4YA" name="SharedResource">
    <ownedComment xmi:id="_vxk7F52TEeCg6sqGpS8R3g">
      <body>Execution Hosts own shared resources as for example I/O devices, DMA channels, critical sections or network adapters. Shared resources are dynamically allocated to schedulable resources by means of an access policy. Common access policies are FIFO, priority ceiling protocol, highest locker, priority queue, and priority inheritance protocol.

Execution Hosts own shared resources as for example I/O devices, DMA channels, critical sections or network adapters. Shared resources are dynamically allocated to schedulable resources by means of an access policy. Common access policies are FIFO, priority ceiling protocol, highest locker, priority queue, and priority inheritance protocol.</body>
    </ownedComment>
    <generalization xmi:id="_BP1uUYukEeCrt4LXEOI4YA" general="_BObZEIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPUw8IukEeCrt4LXEOI4YA" name="LiteralReal">
    <ownedComment xmi:id="_vxk7GJ2TEeCg6sqGpS8R3g">
      <body>

A value to represent the mathematical concept of a real number. A Real value may be used to specify approximate values that hold continuous quantities, without committing a specific representation such as a floating point data type with restrictions on precision and scale.</body>
    </ownedComment>
    <generalization xmi:id="_BQYg4IukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPUw8YukEeCrt4LXEOI4YA" name="QueuePolicyKind">
    <ownedComment xmi:id="_vxuFAJ2TEeCg6sqGpS8R3g">
      <body>The QueuePolicyKind enumerates algorithms provide by resources to order a queue. Literals &amp;#226;&amp;#8364;&amp;#162; FIFO The first element put in the queue is the first outgoing. &amp;#226;&amp;#8364;&amp;#162; LIFO The last element put in the queue is the first outgoing. &amp;#226;&amp;#8364;&amp;#162; Priority Each element is annotated with a priority. &amp;#226;&amp;#8364;&amp;#162; Undef Undefined. &amp;#226;&amp;#8364;&amp;#162; Other Other algorithms.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPUw8oukEeCrt4LXEOI4YA" name="FIFO"/>
    <ownedLiteral xmi:id="_BPVYAIukEeCrt4LXEOI4YA" name="LIFO"/>
    <ownedLiteral xmi:id="_BPVYAYukEeCrt4LXEOI4YA" name="Priority"/>
    <ownedLiteral xmi:id="_BPVYAoukEeCrt4LXEOI4YA" name="Undef"/>
    <ownedLiteral xmi:id="_BPVYA4ukEeCrt4LXEOI4YA" name="Other"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPVYBIukEeCrt4LXEOI4YA" name="PLD_Class">
    <ownedComment xmi:id="_vxuFAZ2TEeCg6sqGpS8R3g">
      <body>PLD_Class is an enumeration. Literals &amp;#226;&amp;#8364;&amp;#162; symetricalArray &amp;#226;&amp;#8364;&amp;#162; rowBased &amp;#226;&amp;#8364;&amp;#162; seaOfGates &amp;#226;&amp;#8364;&amp;#162; hierarchicalPLD &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPVYBYukEeCrt4LXEOI4YA" name="symetricalArray"/>
    <ownedLiteral xmi:id="_BPV_EIukEeCrt4LXEOI4YA" name="rowBased"/>
    <ownedLiteral xmi:id="_BPV_EYukEeCrt4LXEOI4YA" name="seaOfGates"/>
    <ownedLiteral xmi:id="_BPV_EoukEeCrt4LXEOI4YA" name="hierarchicalPLD"/>
    <ownedLiteral xmi:id="_BPV_E4ukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BPV_FIukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPWmIIukEeCrt4LXEOI4YA" name="AggregationKind">
    <ownedComment xmi:id="_vxuFAp2TEeCg6sqGpS8R3g">
      <body>It is an enumeration type that defines literals used to specify the kind of aggregation between a classifier and its properties. Literals &amp;#226;&amp;#8364;&amp;#162; None Indicates that there is no aggregation, the property is defined by itself. &amp;#226;&amp;#8364;&amp;#162; shared Indicates that the property is defined by itself and it may be used by one or more classifiers as part of their respective specifications. &amp;#226;&amp;#8364;&amp;#162; composite Indicates that the property is owned by one classifier as part of its definition.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPWmIYukEeCrt4LXEOI4YA" name="None"/>
    <ownedLiteral xmi:id="_BPWmIoukEeCrt4LXEOI4YA" name="shared"/>
    <ownedLiteral xmi:id="_BPWmI4ukEeCrt4LXEOI4YA" name="composite"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPWmJIukEeCrt4LXEOI4YA" name="TimedObservation">
    <ownedComment xmi:id="_vxuFA52TEeCg6sqGpS8R3g">
      <body>TimedObservation is an abstract superclass of TimedInstantObservation and TimedDurationObservation. It allows time expressions to refer to either in a common way.

TimedObservation is an abstract superclass of TimedInstantObservation and TimedDurationObservation. It allows time expressions to refer to either in a common way. Since a timed observation is a timed element, it refers to clocks. The observation is made in the context of a (sub)system behavior execution. This execution can be represented, for instance, by a sequence diagram. When the observationContext is not defined, the observation is valid for any behavior execution.</body>
    </ownedComment>
    <generalization xmi:id="_BP4xoIukEeCrt4LXEOI4YA" general="_BOr3wIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPXNMIukEeCrt4LXEOI4YA" name="SecondaryScheduler">
    <ownedComment xmi:id="_vxuFBJ2TEeCg6sqGpS8R3g">
      <body>A SecondaryScheduler is defined as a kind of Scheduler, for which the processing capacity to share among its schedulable resources is not obtained directly from processing units, but from other schedulable resources instead.

The SecondaryScheduler concept is introduced to support hierarchical scheduling schemes. It is conceived as a kind of Scheduler, for which the processing capacity that will be shared among its schedulable resources is not obtained directly from processing units, but from other schedulable resource instead, which is in its turn effectively scheduled by another scheduler. These intermediate schedulableResource, play the role of a virtual processing resource, conducting the fraction of capacity they receive from their host scheduler to its dependent secondaryScheduler.</body>
    </ownedComment>
    <generalization xmi:id="_BQIpQIukEeCrt4LXEOI4YA" general="_BOLhcIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPX0QIukEeCrt4LXEOI4YA" name="SharedDataComResource">
    <ownedComment xmi:id="_vxuFBZ2TEeCg6sqGpS8R3g">
      <body>

SharedDataComResource define specific resource used to share the same area of memory among concurrent resources. They allow concurrent resources to exchange safely information by reading and writing the same area in memory.</body>
    </ownedComment>
    <generalization xmi:id="_BQHbIIukEeCrt4LXEOI4YA" general="_BOJsQ4ukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPYbUIukEeCrt4LXEOI4YA" name="WritePolicy">
    <ownedComment xmi:id="_vxuFBp2TEeCg6sqGpS8R3g">
      <body>WritePolicy is an enumeration. Literals &amp;#226;&amp;#8364;&amp;#162; writeBack Cache write is not immediately reflected to the backing memory. &amp;#226;&amp;#8364;&amp;#162; writeThrough Writes are immediately mirrored. &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPYbUYukEeCrt4LXEOI4YA" name="writeBack"/>
    <ownedLiteral xmi:id="_BPYbUoukEeCrt4LXEOI4YA" name="writeThrough"/>
    <ownedLiteral xmi:id="_BPYbU4ukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BPYbVIukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPZCYIukEeCrt4LXEOI4YA" name="HW_ROM">
    <ownedComment xmi:id="_vx32AJ2TEeCg6sqGpS8R3g">
      <body>HW_ROM is a storage memory from the HW_Storage package.

HW_ROM for Read-Only Memory is a class of permanent storage memories that provides essentially read services. It can also be rewritable depending of the HW_ROM type (F.9.57). Each HW_ROM have a special memory organization (F.9.51). Example: a program ROM of a microcontroller, a mobile phone memory, a BIOS memory.</body>
    </ownedComment>
    <generalization xmi:id="_BQ-WwIukEeCrt4LXEOI4YA" general="_BPmdwYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPZpcIukEeCrt4LXEOI4YA" name="ModeTransition">
    <ownedComment xmi:id="_vx32AZ2TEeCg6sqGpS8R3g">
      <body>A mode transition describes the modeled system or subsystem under mode switching. 543

The dynamics of modes is represented by connecting modes by means of ModeTransitions. A mode transition describes the modeled system or subsystem under mode switching. A mode transition can be produced in response to a Trigger. A Trigger is related to an Event that determines the conditions causing the triggering action.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPaQgIukEeCrt4LXEOI4YA" name="SwInteractionResource">
    <ownedComment xmi:id="_vx32Ap2TEeCg6sqGpS8R3g">
      <body>

InteractionResource is an abstract concept, which denotes generic mechanism to interact among concurrent executing resources. Synchronization and Communication are specific kind of interaction.</body>
    </ownedComment>
    <generalization xmi:id="_BP3jgIukEeCrt4LXEOI4YA" general="_BOdOQYukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BP4KkIukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BP4KkYukEeCrt4LXEOI4YA" general="_BOwJMIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPa3kIukEeCrt4LXEOI4YA" name="StructuredComponent">
    <ownedComment xmi:id="_vx32A52TEeCg6sqGpS8R3g">
      <body>A StructuredComponent is a self-contained entity of a system, which encapsulates structured data and behavior. StructuredComponents may interact directly or through their ports, preventing access to their internal features by other means. The structure of a component is defined in terms of assembly parts, which type refers to external structured components, and connectors. Parts may be linked using connectors provided related components or ports are type- compatible.

This concept matches the CompositeStructures::InternalStructures::StructuredClassier classifier defined in UML. As in UML, the &amp;#226;&amp;#8364;&amp;#339;parts&amp;#226;&amp;#8364;&amp;#65533; association role is derived, based on a selection of properties with an &amp;#226;&amp;#8364;&amp;#339;isComposite&amp;#226;&amp;#8364;&amp;#65533; attribute set to true.</body>
    </ownedComment>
    <generalization xmi:id="_BRMZMYukEeCrt4LXEOI4YA" general="_BORBAoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPbeoIukEeCrt4LXEOI4YA" name="SaCommunicationStep">
    <ownedComment xmi:id="_vx32BJ2TEeCg6sqGpS8R3g">
      <body>An SaCommunicationStep is a kind of step that represents a usage of a communication channel. Generalizations: &amp;#226;&amp;#8364;&amp;#162; CommunicationStep (from GQAM) Attributes: &amp;#226;&amp;#8364;&amp;#162; deadline: NFP_Duration [0..1] Maximal time bound on the completion of this particular transmission that must be met. &amp;#226;&amp;#8364;&amp;#162; spareCapacity: NFP_Duration [0..1] Amount of execution time that can be added to the step without affecting schedulability. &amp;#226;&amp;#8364;&amp;#162; schedulabilitySlack: NFP_Real [0..1] Percentage by which the execution time of the step can be increased (positive values) or should be decreased (negative values) in order to reach the schedulability limit.

An SaCommunicationStep is a kind of step that represents a usage of a communication channel.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPbeoYukEeCrt4LXEOI4YA" name="UsageTypedAmount">
    <ownedComment xmi:id="_vx32BZ2TEeCg6sqGpS8R3g">
      <body>A UsageTypedAmount represents the amount and concrete types of magnitudes that characterize what can be used from a Resource.

The concept of UsageTypeAmount is used to collect in one structure all the types of usages that are defined in this specification. Some types are demands that imply effectively the consumption of resources like energy, execTime, msgSize, or allocatedMemory; allocatedMemory can in fact be negative since it may be returned to the system. Others like powerPeak, and usedMemory imply the necessity to have the mentioned amount as available; powerPeak is the maximum power that is demanded, while usedMemory is the amount of memory that is typically temporarily allocated (like in the stack for example) to perform an action, but which is promptly returned to the system. The multiplicities allow for different statistical or purpose dependent annotations of the same magnitude.</body>
    </ownedComment>
    <generalization xmi:id="_BRFEcIukEeCrt4LXEOI4YA" general="_BOd1UoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPcFsIukEeCrt4LXEOI4YA" name="ROM_Type">
    <ownedComment xmi:id="_vx32Bp2TEeCg6sqGpS8R3g">
      <body>ROM_Type is an enumeration. Literals &amp;#226;&amp;#8364;&amp;#162; maskedROM Not erasable ROM &amp;#226;&amp;#8364;&amp;#162; EPROM Erasable Programmable ROM (only erasable by exposition to strong ultraviolet light). &amp;#226;&amp;#8364;&amp;#162; OTP_EPROM One Time Programmable EPROM (inerasable once programmed). &amp;#226;&amp;#8364;&amp;#162; EEPROM Electrically EPROM (electrically erasable). &amp;#226;&amp;#8364;&amp;#162; Flash &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPcFsYukEeCrt4LXEOI4YA" name="maskedROM"/>
    <ownedLiteral xmi:id="_BPcFsoukEeCrt4LXEOI4YA" name="EPROM"/>
    <ownedLiteral xmi:id="_BPcFs4ukEeCrt4LXEOI4YA" name="OTP_EPROM"/>
    <ownedLiteral xmi:id="_BPcFtIukEeCrt4LXEOI4YA" name="EEPROM"/>
    <ownedLiteral xmi:id="_BPcFtYukEeCrt4LXEOI4YA" name="Flash"/>
    <ownedLiteral xmi:id="_BPcswIukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BPcswYukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPcswoukEeCrt4LXEOI4YA" name="MultipleTimeBase">
    <ownedComment xmi:id="_vx32B52TEeCg6sqGpS8R3g">
      <body>A multiple time base represents a multiform time. It consists of a set of time bases.

A multiple time base represents a multiform time structure. It owns one or many time bases. Multiple time bases can be nested. The set of instants indirectly owned by the top multiple time base is partially ordered. This partial ordering of instants characterizes the time structure.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPdT0IukEeCrt4LXEOI4YA" name="LiteralDefault">
    <ownedComment xmi:id="_vyA_8J2TEeCg6sqGpS8R3g">
      <body>

A Default Literal allows specifying a default value. If a default value exists, it is assigned to the value, otherwise the value remains as a Null value.</body>
    </ownedComment>
    <generalization xmi:id="_BQqNsIukEeCrt4LXEOI4YA" general="_BPfJAIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPd64IukEeCrt4LXEOI4YA" name="Step">
    <ownedComment xmi:id="_vyA_8Z2TEeCg6sqGpS8R3g">
      <body>A Step is a part of a BehaviorScenario, defined in sequence with other actions, and may be a complex Step containing a BehaviorScenario. A loop is defined as a Step with a repetition count; the loop body is a nested BehaviorScenario.

</body>
    </ownedComment>
    <generalization xmi:id="_BPxc4IukEeCrt4LXEOI4YA" general="_BOzMgIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPeh8IukEeCrt4LXEOI4YA" name="FlowPort">
    <ownedComment xmi:id="_vyA_8p2TEeCg6sqGpS8R3g">
      <body>A FlowPort is a concrete kind of InteractionPort used for data flow communications between structured components. A FlowPort may relay incoming, outgoing or bidirectional flows. The type of data that flows across a flow port is determined by the type of the port when the port is atomic. In the case of a non-atomic flow port, the FlowPort is associated with a set of FlowProperties (where each FlowProperty has its own direction, and is a specification of an item that may flow through the port) Generalization &amp;#226;&amp;#8364;&amp;#162; InteractionPort (from MARTE::CoreElements::GeneralComponent).

FlowPorts have been introduced to enable dataflow-oriented communications between components, where messages that flow across ports represent data items. A flow port specifies the input and output items that may flow between a structured component and its environment. The specification of what can flow is achieved by typing the flow port with a specification of things that flow. This can include typing an atomic flow port with a single type representing the items that flow in or out, or associating the FlowPort with a set of FlowProperties (where each FlowProperty has its own direction, and is a specification of an item that may flow through the port).</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPfJAIukEeCrt4LXEOI4YA" name="LiteralSpecification">
    <ownedComment xmi:id="_vyA_852TEeCg6sqGpS8R3g">
      <body>LiteralSpecification matches with the UML concept of LiteralSpecification. We show below only the associations, attributes and constraints that are relevant for the VSL specification.

A literal specification is an abstract specialization of ValueSpecification that identifies a literal constant being modeled.</body>
    </ownedComment>
    <generalization xmi:id="_BPvAoYukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPfwEIukEeCrt4LXEOI4YA" name="Quantity">
    <ownedComment xmi:id="_vyA_9J2TEeCg6sqGpS8R3g">
      <body>A physical property characterizing some aspect of nature that can be measured.

A physical quantity is either a quantity within physics that can be measured (e.g., mass, volume), or the result of a measurement. Physical quantities are usually associated with a set of valid measure units.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPgXIIukEeCrt4LXEOI4YA" name="HW_ComputingResource">
    <ownedComment xmi:id="_vyA_9Z2TEeCg6sqGpS8R3g">
      <body>HW_ComputingResource is a high level concept from the HW_Computing package.

HW_ComputingResource is a high level concept that denotes an active execution resource. Such resources are often clocked and may support a range of operating frequencies. Example: CPUs (HW_Processor), FPGAs (HW_PLD) are programmable computing resources.</body>
    </ownedComment>
    <generalization xmi:id="_BQLFgYukEeCrt4LXEOI4YA" general="_BOGo8YukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQLskIukEeCrt4LXEOI4YA" general="_BOzzkIukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPg-MIukEeCrt4LXEOI4YA" name="Dimension">
    <ownedComment xmi:id="_vyA_9p2TEeCg6sqGpS8R3g">
      <body>A Dimension is relationship between a quantity and a set of base quantities in a given system of quantities.

The dimension of a derived quantity is expressed using the base dimension and base exponents properties. Both properties represent ordered collections. The correspondence between the referenced base dimension and its exponent is done thanks to collection indices.</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPg-MYukEeCrt4LXEOI4YA" name="DeviceBroker">
    <ownedComment xmi:id="_vyKw8J2TEeCg6sqGpS8R3g">
      <body>

A DeviceBroker (i.e., driver) interfaces peripheral devices to the software execution support. It makes devices accessible for software. It initializes the software interface to access the device (i.e., a driver). Commonly, deviceBroker resources are based on file mechanisms.</body>
    </ownedComment>
    <generalization xmi:id="_BPphEIukEeCrt4LXEOI4YA" general="_BOMvlIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BPphEYukEeCrt4LXEOI4YA" general="_BOdOQYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPhlQIukEeCrt4LXEOI4YA" name="Jitter">
    <ownedComment xmi:id="_vyKw8Z2TEeCg6sqGpS8R3g">
      <body>

JitterExpression is a duration expression that denotes an unwanted variation (delta) in an event occurrence instant that should occur in periodic intervals.</body>
    </ownedComment>
    <generalization xmi:id="_BPwOwIukEeCrt4LXEOI4YA" general="_BORBAYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPiMUIukEeCrt4LXEOI4YA" name="NotificationResource">
    <ownedComment xmi:id="_vyKw8p2TEeCg6sqGpS8R3g">
      <body>

NotificationResource supports control flow by notifying the occurrences of conditions to awaiting concurrent resources, such as POSIX Signal, OSEK\VDX Event, ARINC-653 Event&amp;#226;&amp;#8364;&amp;#166; Occurrences can be memorized (i.e., memorized in a buffer), bounded (i.e., each occurrence increments a counter) or memoryless (i.e., not memorized in a buffer, hence multiple occurrences are lost).</body>
    </ownedComment>
    <generalization xmi:id="_BQrb0IukEeCrt4LXEOI4YA" general="_BOwJMYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPizYIukEeCrt4LXEOI4YA" name="ClientServerKind">
    <ownedComment xmi:id="_vyKw852TEeCg6sqGpS8R3g">
      <body>ClientServerKind is an enumeration, which literals specify the kind of behavioral features related to ClientServerPorts. Literals &amp;#226;&amp;#8364;&amp;#162; provided The behavioral feature is provided by the port of the owning entity. &amp;#226;&amp;#8364;&amp;#162; required The behavioral feature is provided by the port of the owning entity. &amp;#226;&amp;#8364;&amp;#162; proreq The behavioral feature is both provided and required.

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPizYYukEeCrt4LXEOI4YA" name="provided"/>
    <ownedLiteral xmi:id="_BPizYoukEeCrt4LXEOI4YA" name="required"/>
    <ownedLiteral xmi:id="_BPizY4ukEeCrt4LXEOI4YA" name="proreq"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPjacIukEeCrt4LXEOI4YA" name="CompBehaviorExecution">
    <ownedComment xmi:id="_vyKw9J2TEeCg6sqGpS8R3g">
      <body>A CompBehaviorExecution is a kind of behaviorExecution that corresponds to an instance of a compositeBehavior, and consequently is expressed in terms of other behaviorExecutions.

A CompBehaviorExecution is a kind of behaviorExecution that corresponds to an instance of a compositeBehavior, and consequently may be expressed in terms of other behaviorExecutions. The set of participants gives access to the instances that interact to make emerge and are involved in the execution of the composite behavior. This set may include the interacting structural features of its host instance specification.</body>
    </ownedComment>
    <generalization xmi:id="_BQt4EoukEeCrt4LXEOI4YA" general="_BOHQCoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPkokIukEeCrt4LXEOI4YA" name="PLD_Technology">
    <ownedComment xmi:id="_vyKw9Z2TEeCg6sqGpS8R3g">
      <body>PLD_Technology is an enumeration. Literals &amp;#226;&amp;#8364;&amp;#162; SRAM &amp;#226;&amp;#8364;&amp;#162; antifuse &amp;#226;&amp;#8364;&amp;#162; flash &amp;#226;&amp;#8364;&amp;#162; other &amp;#226;&amp;#8364;&amp;#162; undef

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPkokYukEeCrt4LXEOI4YA" name="SRAM"/>
    <ownedLiteral xmi:id="_BPkokoukEeCrt4LXEOI4YA" name="antifuse"/>
    <ownedLiteral xmi:id="_BPkok4ukEeCrt4LXEOI4YA" name="flash"/>
    <ownedLiteral xmi:id="_BPkolIukEeCrt4LXEOI4YA" name="other"/>
    <ownedLiteral xmi:id="_BPkolYukEeCrt4LXEOI4YA" name="undef"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPlPoIukEeCrt4LXEOI4YA" name="GetAmountAvailable">
    <ownedComment xmi:id="_vyUh8J2TEeCg6sqGpS8R3g">
      <body>GetAmountAvailable returns the amount of the resource that is currently available.

&amp;#226;&amp;#8364;&amp;#162; GetAmountAvailable returns the amount of the resource that is currently available.</body>
    </ownedComment>
    <generalization xmi:id="_BRf7MIukEeCrt4LXEOI4YA" general="_BOMvlYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPl2sIukEeCrt4LXEOI4YA" name="EventTrace">
    <ownedComment xmi:id="_vyUh8Z2TEeCg6sqGpS8R3g">
      <body>A trace of events that can be the source for the request event stream.

</body>
    </ownedComment>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPmdwIukEeCrt4LXEOI4YA" name="TimeExpression">
    <ownedComment xmi:id="_vyUh8p2TEeCg6sqGpS8R3g">
      <body>

TimeExpression is an expression that factorizes different kinds of time related expressions, including instants, durations and jitters. The Time Expression is given by &amp;#226;&amp;#8364;&amp;#339;expr&amp;#226;&amp;#8364;&amp;#65533; that may contain usage of the observations (obsExpr) given by ObsCallExpression. In the case where there are no &amp;#226;&amp;#8364;&amp;#339;obsExpr,&amp;#226;&amp;#8364;&amp;#65533; the &amp;#226;&amp;#8364;&amp;#339;expr&amp;#226;&amp;#8364;&amp;#65533; will contain a time constant. In the case where there is no &amp;#226;&amp;#8364;&amp;#339;expr,&amp;#226;&amp;#8364;&amp;#65533; there shall be a single &amp;#226;&amp;#8364;&amp;#339;obsExpr&amp;#226;&amp;#8364;&amp;#65533; that indicates the instant or duration expression value. 707</body>
    </ownedComment>
    <generalization xmi:id="_BQl8QYukEeCrt4LXEOI4YA" general="_BOH3FoukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPmdwYukEeCrt4LXEOI4YA" name="HW_StorageMemory">
    <ownedComment xmi:id="_vyUh852TEeCg6sqGpS8R3g">
      <body>HW_StorageMemory is an abstract concept from the HW_Storage package.

HW_StorageMemory in opposition to HW_ProcessingMemory symbolizes permanent and relatively time-consuming storage resources. It may be speed up by associating a cache buffer for frequently accessed data. Example: Flash memory, HW_Drive.</body>
    </ownedComment>
    <generalization xmi:id="_BQZvAIukEeCrt4LXEOI4YA" general="_BOd1UYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPnE0IukEeCrt4LXEOI4YA" name="TerminationOccurrence">
    <ownedComment xmi:id="_vyUh9J2TEeCg6sqGpS8R3g">
      <body>A TerminationOccurrence represents the finalization of a BehaviorExecution.

A TerminationOccurrence represents the finalization of a BehaviorExecution. The occurrence is tied to the finalization of the associated behaviorExecution. 549</body>
    </ownedComment>
    <generalization xmi:id="_BQpmoIukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Enumeration" xmi:id="_BPoS8IukEeCrt4LXEOI4YA" name="StatisticalQualifierKind">
    <ownedComment xmi:id="_vyUh9Z2TEeCg6sqGpS8R3g">
      <body>A statistical qualifier kind lists the type of &amp;#226;&amp;#8364;&amp;#339;statistical&amp;#226;&amp;#8364;&amp;#65533; measure of a given property. Literals &amp;#226;&amp;#8364;&amp;#162; max &amp;#226;&amp;#8364;&amp;#162; min &amp;#226;&amp;#8364;&amp;#162; mean &amp;#226;&amp;#8364;&amp;#162; range &amp;#226;&amp;#8364;&amp;#162; percentile &amp;#226;&amp;#8364;&amp;#162; distribution &amp;#226;&amp;#8364;&amp;#162; deterministic

</body>
    </ownedComment>
    <ownedLiteral xmi:id="_BPoS8YukEeCrt4LXEOI4YA" name="max"/>
    <ownedLiteral xmi:id="_BPoS8oukEeCrt4LXEOI4YA" name="min"/>
    <ownedLiteral xmi:id="_BPoS84ukEeCrt4LXEOI4YA" name="mean"/>
    <ownedLiteral xmi:id="_BPoS9IukEeCrt4LXEOI4YA" name="range"/>
    <ownedLiteral xmi:id="_BPoS9YukEeCrt4LXEOI4YA" name="percentile"/>
    <ownedLiteral xmi:id="_BPoS9oukEeCrt4LXEOI4YA" name="distribution"/>
    <ownedLiteral xmi:id="_BPoS94ukEeCrt4LXEOI4YA" name="deterministic"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_BPo6AIukEeCrt4LXEOI4YA" name="TerminationEvent">
    <ownedComment xmi:id="_vydr4J2TEeCg6sqGpS8R3g">
      <body>A TerminationEvent represents the finalization of a Behavior.

A TerminationEvent represents the finalization of a Behavior. The event is tied to the finalization of the associated behavior. A TerminationOccurrence represents the finalization of a BehaviorExecution. A TerminationOccurrence represents the finalization of a BehaviorExecution. The occurrence is tied to the finalization of the associated behaviorExecution.</body>
    </ownedComment>
    <generalization xmi:id="_BQUPcIukEeCrt4LXEOI4YA" general="_BPH8oIukEeCrt4LXEOI4YA"/>
    <generalization xmi:id="_BQU2gIukEeCrt4LXEOI4YA" general="_BOIeIYukEeCrt4LXEOI4YA"/>
  </packagedElement>
</uml:Model>
