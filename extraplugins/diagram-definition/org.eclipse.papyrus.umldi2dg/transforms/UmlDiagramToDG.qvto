/**
 * Copyright (c) 2014 CEA LIST.
 *  
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *  CEA LIST - Initial API and implementation
 */
import UmlDefinitions;

modeltype DC uses "http://www.omg.org/spec/DD/20110901/DC";
modeltype DG uses "http://www.omg.org/spec/DD/20110901/DG";
modeltype DI uses "http://www.omg.org/spec/DD/20110901/DI";
modeltype UMLDI uses "http://www.omg.org/spec/UML/20131001/UMLDI";
modeltype UML uses "http://www.eclipse.org/uml2/4.0.0/UML";
	
library UmlDiagramToDG;

abstract mapping UMLDI::UmlDiagramElement::diagramElementToGraphicalElement() : DG::GraphicalElement {
	style := self.localUmlStyle.map styleToStyle();
}

mapping UMLDI::UmlDiagram::rootDiagramToGraphicalElement() : DG::RootCanvas 
	inherits UMLDI::UmlDiagramElement::diagramElementToGraphicalElement
{
	script += "platform:/plugin/org.eclipse.papyrus.umldi2dg/scripts/UmlLayouts.js";
	definitions := umlDefinitions;
	member += self.ownedUmlDiagramElement->map ownedElementToGraphicalElement();
}

mapping UMLDI::UmlDiagramElement::ownedElementToGraphicalElement() : DG::GraphicalElement 
	disjuncts UMLDI::UmlLabel::labelToText,
			  UMLDI::UmlCompartment::compartmentToCanvas,
			  UMLDI::UmlShape::shapeToCanvas,
			  UMLDI::UmlEdge::edgeToGroup; 

mapping UMLDI::UmlLabel::labelToText() : DG::Text 
	inherits UMLDI::UmlDiagramElement::diagramElementToGraphicalElement
{
	init {
		if (self.umlModelElement->size() = 1) then {
			result := self.umlModelElement->at(1).oclAsType(UML::Element).map labelToText(self);
		} endif;
	}
	bounds := self.bounds.clone().oclAsType(DC::Bounds);
}

mapping UMLDI::UmlCompartment::compartmentToCanvas() : DG::Canvas 
	inherits UMLDI::UmlDiagramElement::diagramElementToGraphicalElement
{
	bounds := object DC::Bounds { x := self.bounds.x; y := self.bounds.y; };
	member += self.map compartmentToLine();
	member += self.ownedUmlDiagramElement->map ownedElementToGraphicalElement();
}

mapping UMLDI::UmlCompartment::compartmentToLine() : DG::Line { 
	init {
		if (self.umlModelElement->size() = 1) then {
			result := self.umlModelElement->at(1).oclAsType(UML::Element).map compartmentToLine(self);
		} endif;
	}
}

mapping UMLDI::UmlShape::shapeToCanvas() : DG::Canvas 
	inherits UMLDI::UmlDiagramElement::diagramElementToGraphicalElement
{
	bounds := object DC::Bounds { x := self.bounds.x; y := self.bounds.y; };
	member += self.map shapeToGraphicalElement();
	member += self.ownedUmlDiagramElement->map ownedElementToGraphicalElement();
}

mapping UMLDI::UmlShape::shapeToGraphicalElement() : DG::GraphicalElement { 
	init {
		if (self.umlModelElement->size() = 1) then {
			result := self.umlModelElement->at(1).oclAsType(UML::Element).map shapeToGraphicalElement(self);
		} endif;
	}
}

mapping UMLDI::UmlEdge::edgeToGroup() : DG::Group  
	inherits UMLDI::UmlDiagramElement::diagramElementToGraphicalElement
{
	member += self.map edgeToPath();
	member += self.ownedUmlDiagramElement->map ownedElementToGraphicalElement();
}

mapping UMLDI::UmlEdge::edgeToPath() : DG::Path {  
	init {
		if (self.umlModelElement->size() = 1) then {
			result := self.umlModelElement->at(1).oclAsType(UML::Element).map edgeToPath(self);
		} endif;
	}
	command += object DG::MoveTo { point := self.waypoint->first().clone().oclAsType(DC::Point) };
	self.waypoint->excluding(self.waypoint->first())->forEach(p) {
		command +=  object DG::LineTo { point := p.clone().oclAsType(DC::Point) };
	};
}

mapping UMLDI::UmlStyle::styleToStyle() : DG::Style {
	fontName := self.fontName;
	fontSize := self.fontSize;
}

mapping UML::Element::labelToText(label : UMLDI::UmlLabel) : DG::Text {
	data := "NoRef";
}

mapping UML::Element::compartmentToLine(compartment : UMLDI::UmlCompartment) : DG::Line {
	start := object DC::Point { x := 0; y := 0; };
	_end := object DC::Point { x := compartment.bounds.width; y := 0; }
}

mapping UML::Element::shapeToGraphicalElement(shape : UMLDI::UmlShape) : DG::GraphicalElement {
	init {
		result := object DG::Rectangle {
			bounds := object DC::Bounds { 
				x := 0; 
				y := 0; 
				width := shape.bounds.width;
				height := shape.bounds.height 
			};
		};
	}
}

mapping UML::Element::edgeToPath(edge : UMLDI::UmlEdge) : DG::Path {
}

