/*
* generated by Xtext
*/
grammar InternalConstraintWithVSLl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.papyrus.constraintwithvsl.editor.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.papyrus.constraintwithvsl.editor.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.papyrus.constraintwithvsl.editor.xtext.services.ConstraintWithVSLlGrammarAccess;

}

@parser::members {

 	private ConstraintWithVSLlGrammarAccess grammarAccess;
 	
    public InternalConstraintWithVSLlParser(TokenStream input, IAstFactory factory, ConstraintWithVSLlGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/papyrus/constraintwithvsl/editor/xtext/parser/antlr/internal/InternalConstraintWithVSLl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ConstraintRule";	
   	}
   	
   	@Override
   	protected ConstraintWithVSLlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConstraintRule
entryRuleConstraintRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstraintRuleRule(), currentNode); }
	 iv_ruleConstraintRule=ruleConstraintRule 
	 { $current=$iv_ruleConstraintRule.current; } 
	 EOF 
;

// Rule ConstraintRule
ruleConstraintRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstraintRuleAccess().getSpecificationConstraintSpecificationParserRuleCall_0(), currentNode); 
	    }
		lv_specification_0_0=ruleConstraintSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraintRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"specification",
	        		lv_specification_0_0, 
	        		"ConstraintSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
;





// Entry rule entryRuleConstraintSpecification
entryRuleConstraintSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstraintSpecificationRule(), currentNode); }
	 iv_ruleConstraintSpecification=ruleConstraintSpecification 
	 { $current=$iv_ruleConstraintSpecification.current; } 
	 EOF 
;

// Rule ConstraintSpecification
ruleConstraintSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstraintSpecificationAccess().getExpressionExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraintSpecificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpAndOrXorExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_exp_0_0=ruleAndOrXorExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"AndOrXorExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleAndOrXorExpression
entryRuleAndOrXorExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndOrXorExpressionRule(), currentNode); }
	 iv_ruleAndOrXorExpression=ruleAndOrXorExpression 
	 { $current=$iv_ruleAndOrXorExpression.current; } 
	 EOF 
;

// Rule AndOrXorExpression
ruleAndOrXorExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndOrXorExpressionAccess().getExpEqualityExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOrXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'and' 
    {
        createLeafNode(grammarAccess.getAndOrXorExpressionAccess().getOpAndKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOrXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'or' 
    {
        createLeafNode(grammarAccess.getAndOrXorExpressionAccess().getOpOrKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOrXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_3=	'xor' 
    {
        createLeafNode(grammarAccess.getAndOrXorExpressionAccess().getOpXorKeyword_1_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOrXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndOrXorExpressionAccess().getExpEqualityExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndOrXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'==' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'<>' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpRelationalExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpConditionalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"ConditionalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'<' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'>' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_3=	'<=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_4=	'>=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpConditionalExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleConditionalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"ConditionalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalExpressionRule(), currentNode); }
	 iv_ruleConditionalExpression=ruleConditionalExpression 
	 { $current=$iv_ruleConditionalExpression.current; } 
	 EOF 
;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpAdditiveExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_op_1_0=	'?' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getOpQuestionMarkKeyword_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_0, "?", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_exp_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_4_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_3=	'mod' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpModKeyword_1_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
(
		lv_op_0_1=	'not' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_0_2=	'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_0_3=	'+' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_0_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryUnaryExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_unary_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"unary",
	        		lv_unary_1_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpPrimaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_exp_2_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrefixValueSpecificationParserRuleCall_0_0(), currentNode); 
	    }
		lv_prefix_0_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prefix",
	        		lv_prefix_0_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSuffixSuffixExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_suffix_2_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_2_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleValueSpecification
entryRuleValueSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueSpecificationRule(), currentNode); }
	 iv_ruleValueSpecification=ruleValueSpecification 
	 { $current=$iv_ruleValueSpecification.current; } 
	 EOF 
;

// Rule ValueSpecification
ruleValueSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getLiteralParserRuleCall_0(), currentNode); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getNameOrChoiceOrBehaviorCallParserRuleCall_1(), currentNode); 
    }
    this_NameOrChoiceOrBehaviorCall_1=ruleNameOrChoiceOrBehaviorCall
    { 
        $current = $this_NameOrChoiceOrBehaviorCall_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getIntervalParserRuleCall_2(), currentNode); 
    }
    this_Interval_2=ruleInterval
    { 
        $current = $this_Interval_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getCollectionOrTupleParserRuleCall_3(), currentNode); 
    }
    this_CollectionOrTuple_3=ruleCollectionOrTuple
    { 
        $current = $this_CollectionOrTuple_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getTupleParserRuleCall_4(), currentNode); 
    }
    this_Tuple_4=ruleTuple
    { 
        $current = $this_Tuple_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getTimeExpressionParserRuleCall_5(), currentNode); 
    }
    this_TimeExpression_5=ruleTimeExpression
    { 
        $current = $this_TimeExpression_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getVariableDeclarationParserRuleCall_6(), currentNode); 
    }
    this_VariableDeclaration_6=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_6.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getValueSpecificationAccess().getLeftParenthesisKeyword_7_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getExpressionParserRuleCall_7_1(), currentNode); 
    }
    this_Expression_8=ruleExpression
    { 
        $current = $this_Expression_8.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getValueSpecificationAccess().getRightParenthesisKeyword_7_2(), null); 
    }
))
;





// Entry rule entryRuleSuffixExpression
entryRuleSuffixExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSuffixExpressionRule(), currentNode); }
	 iv_ruleSuffixExpression=ruleSuffixExpression 
	 { $current=$iv_ruleSuffixExpression.current; } 
	 EOF 
;

// Rule SuffixExpression
ruleSuffixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getPropertyCallExpressionParserRuleCall_0(), currentNode); 
    }
    this_PropertyCallExpression_0=rulePropertyCallExpression
    { 
        $current = $this_PropertyCallExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getOperationCallExpressionParserRuleCall_1(), currentNode); 
    }
    this_OperationCallExpression_1=ruleOperationCallExpression
    { 
        $current = $this_OperationCallExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePropertyCallExpression
entryRulePropertyCallExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyCallExpressionRule(), currentNode); }
	 iv_rulePropertyCallExpression=rulePropertyCallExpression 
	 { $current=$iv_rulePropertyCallExpression.current; } 
	 EOF 
;

// Rule PropertyCallExpression
rulePropertyCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPropertyCallExpressionAccess().getPropertyPropertyCrossReference_0_0(), "property"); 
	}

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getPropertyCallExpressionAccess().getFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyCallExpressionAccess().getSuffixSuffixExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_suffix_2_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_2_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleOperationCallExpression
entryRuleOperationCallExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationCallExpressionRule(), currentNode); }
	 iv_ruleOperationCallExpression=ruleOperationCallExpression 
	 { $current=$iv_ruleOperationCallExpression.current; } 
	 EOF 
;

// Rule OperationCallExpression
ruleOperationCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOperationCallExpressionAccess().getOperationOperationCrossReference_0_0(), "operation"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getOperationCallExpressionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallExpressionAccess().getArgumentsListOfValuesParserRuleCall_2_0(), currentNode); 
	    }
		lv_arguments_2_0=ruleListOfValues		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arguments",
	        		lv_arguments_2_0, 
	        		"ListOfValues", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getOperationCallExpressionAccess().getRightParenthesisKeyword_3(), null); 
    }
(	'.' 
    {
        createLeafNode(grammarAccess.getOperationCallExpressionAccess().getFullStopKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallExpressionAccess().getSuffixSuffixExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_suffix_5_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_5_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralRuleParserRuleCall_0(), currentNode); 
    }
    this_NumberLiteralRule_0=ruleNumberLiteralRule
    { 
        $current = $this_NumberLiteralRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getDateTimeLiteralRuleParserRuleCall_1(), currentNode); 
    }
    this_DateTimeLiteralRule_1=ruleDateTimeLiteralRule
    { 
        $current = $this_DateTimeLiteralRule_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralRuleParserRuleCall_2(), currentNode); 
    }
    this_BooleanLiteralRule_2=ruleBooleanLiteralRule
    { 
        $current = $this_BooleanLiteralRule_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralRuleParserRuleCall_3(), currentNode); 
    }
    this_NullLiteralRule_3=ruleNullLiteralRule
    { 
        $current = $this_NullLiteralRule_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getDefaultLiteralRuleParserRuleCall_4(), currentNode); 
    }
    this_DefaultLiteralRule_4=ruleDefaultLiteralRule
    { 
        $current = $this_DefaultLiteralRule_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralRuleParserRuleCall_5(), currentNode); 
    }
    this_StringLiteralRule_5=ruleStringLiteralRule
    { 
        $current = $this_StringLiteralRule_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNameOrChoiceOrBehaviorCall
entryRuleNameOrChoiceOrBehaviorCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameOrChoiceOrBehaviorCallRule(), currentNode); }
	 iv_ruleNameOrChoiceOrBehaviorCall=ruleNameOrChoiceOrBehaviorCall 
	 { $current=$iv_ruleNameOrChoiceOrBehaviorCall.current; } 
	 EOF 
;

// Rule NameOrChoiceOrBehaviorCall
ruleNameOrChoiceOrBehaviorCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameOrChoiceOrBehaviorCallAccess().getPathQualifiedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_path_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameOrChoiceOrBehaviorCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_0_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNameOrChoiceOrBehaviorCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNameOrChoiceOrBehaviorCallAccess().getIdNamedElementCrossReference_1_0(), "id"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getNameOrChoiceOrBehaviorCallAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameOrChoiceOrBehaviorCallAccess().getArgumentsListOfValuesParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_arguments_3_0=ruleListOfValues		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameOrChoiceOrBehaviorCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"arguments",
	        		lv_arguments_3_0, 
	        		"ListOfValues", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getNameOrChoiceOrBehaviorCallAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); }
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current; } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getQualifiedNameAccess().getPathNamespaceCrossReference_0_0(), "path"); 
	}

)
)	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameAccess().getRemainingQualifiedNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_remaining_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"remaining",
	        		lv_remaining_2_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntervalRule(), currentNode); }
	 iv_ruleInterval=ruleInterval 
	 { $current=$iv_ruleInterval.current; } 
	 EOF 
;

// Rule Interval
ruleInterval returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	']' 
    {
        createLeafNode(grammarAccess.getIntervalAccess().getRightSquareBracketKeyword_0_0(), null); 
    }

    |(
(
		lv_isLowerIncluded_1_0=	'[' 
    {
        createLeafNode(grammarAccess.getIntervalAccess().getIsLowerIncludedLeftSquareBracketKeyword_0_1_0(), "isLowerIncluded"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntervalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isLowerIncluded", lv_isLowerIncluded_1_0, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntervalAccess().getLowerExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_lower_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntervalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntervalAccess().getUpperExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_upper_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntervalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_isUpperIncluded_5_0=	']' 
    {
        createLeafNode(grammarAccess.getIntervalAccess().getIsUpperIncludedRightSquareBracketKeyword_4_0_0(), "isUpperIncluded"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntervalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isUpperIncluded", lv_isUpperIncluded_5_0, "]", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |	'[' 
    {
        createLeafNode(grammarAccess.getIntervalAccess().getLeftSquareBracketKeyword_4_1(), null); 
    }
))
;





// Entry rule entryRuleCollectionOrTuple
entryRuleCollectionOrTuple returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionOrTupleRule(), currentNode); }
	 iv_ruleCollectionOrTuple=ruleCollectionOrTuple 
	 { $current=$iv_ruleCollectionOrTuple.current; } 
	 EOF 
;

// Rule CollectionOrTuple
ruleCollectionOrTuple returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getCollectionOrTupleAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionOrTupleAccess().getListOfValuesListOfValuesParserRuleCall_1_0(), currentNode); 
	    }
		lv_listOfValues_1_0=ruleListOfValues		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionOrTupleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"listOfValues",
	        		lv_listOfValues_1_0, 
	        		"ListOfValues", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getCollectionOrTupleAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleRule(), currentNode); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getTupleAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleAccess().getListOfValueNamePairsListOfValueNamePairsParserRuleCall_1_0(), currentNode); 
	    }
		lv_listOfValueNamePairs_1_0=ruleListOfValueNamePairs		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"listOfValueNamePairs",
	        		lv_listOfValueNamePairs_1_0, 
	        		"ListOfValueNamePairs", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getTupleAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleListOfValues
entryRuleListOfValues returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getListOfValuesRule(), currentNode); }
	 iv_ruleListOfValues=ruleListOfValues 
	 { $current=$iv_ruleListOfValues.current; } 
	 EOF 
;

// Rule ListOfValues
ruleListOfValues returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListOfValuesAccess().getValuesExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_values_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListOfValuesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getListOfValuesAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListOfValuesAccess().getValuesExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_values_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListOfValuesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"values",
	        		lv_values_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleListOfValueNamePairs
entryRuleListOfValueNamePairs returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getListOfValueNamePairsRule(), currentNode); }
	 iv_ruleListOfValueNamePairs=ruleListOfValueNamePairs 
	 { $current=$iv_ruleListOfValueNamePairs.current; } 
	 EOF 
;

// Rule ListOfValueNamePairs
ruleListOfValueNamePairs returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListOfValueNamePairsAccess().getValueNamePairsValueNamePairParserRuleCall_0_0(), currentNode); 
	    }
		lv_valueNamePairs_0_0=ruleValueNamePair		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListOfValueNamePairsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"valueNamePairs",
	        		lv_valueNamePairs_0_0, 
	        		"ValueNamePair", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getListOfValueNamePairsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListOfValueNamePairsAccess().getValueNamePairsValueNamePairParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_valueNamePairs_2_0=ruleValueNamePair		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListOfValueNamePairsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"valueNamePairs",
	        		lv_valueNamePairs_2_0, 
	        		"ValueNamePair", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleValueNamePair
entryRuleValueNamePair returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueNamePairRule(), currentNode); }
	 iv_ruleValueNamePair=ruleValueNamePair 
	 { $current=$iv_ruleValueNamePair.current; } 
	 EOF 
;

// Rule ValueNamePair
ruleValueNamePair returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getValueNamePairRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getValueNamePairAccess().getPropertyPropertyCrossReference_0_0(), "property"); 
	}

)
)	'=' 
    {
        createLeafNode(grammarAccess.getValueNamePairAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getValueNamePairAccess().getValueExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getValueNamePairRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTimeExpression
entryRuleTimeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTimeExpressionRule(), currentNode); }
	 iv_ruleTimeExpression=ruleTimeExpression 
	 { $current=$iv_ruleTimeExpression.current; } 
	 EOF 
;

// Rule TimeExpression
ruleTimeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeExpressionAccess().getInstantObsExpressionParserRuleCall_0(), currentNode); 
    }
    this_InstantObsExpression_0=ruleInstantObsExpression
    { 
        $current = $this_InstantObsExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeExpressionAccess().getDurationObsExpressionParserRuleCall_1(), currentNode); 
    }
    this_DurationObsExpression_1=ruleDurationObsExpression
    { 
        $current = $this_DurationObsExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTimeExpressionAccess().getJitterExpParserRuleCall_2(), currentNode); 
    }
    this_JitterExp_2=ruleJitterExp
    { 
        $current = $this_JitterExp_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInstantObsExpression
entryRuleInstantObsExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstantObsExpressionRule(), currentNode); }
	 iv_ruleInstantObsExpression=ruleInstantObsExpression 
	 { $current=$iv_ruleInstantObsExpression.current; } 
	 EOF 
;

// Rule InstantObsExpression
ruleInstantObsExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@' 
    {
        createLeafNode(grammarAccess.getInstantObsExpressionAccess().getCommercialAtKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstantObsExpressionAccess().getIdInstantObsNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_id_1_0=ruleInstantObsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstantObsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"InstantObsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getInstantObsExpressionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstantObsExpressionAccess().getIndexExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_index_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstantObsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"index",
	        		lv_index_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getInstantObsExpressionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?(	'when' 
    {
        createLeafNode(grammarAccess.getInstantObsExpressionAccess().getWhenKeyword_3_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getInstantObsExpressionAccess().getLeftParenthesisKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstantObsExpressionAccess().getConditionExpressionParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_condition_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstantObsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getInstantObsExpressionAccess().getRightParenthesisKeyword_3_3(), null); 
    }
)?)
;





// Entry rule entryRuleInstantObsName
entryRuleInstantObsName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstantObsNameRule(), currentNode); }
	 iv_ruleInstantObsName=ruleInstantObsName 
	 { $current=$iv_ruleInstantObsName.current; } 
	 EOF 
;

// Rule InstantObsName
ruleInstantObsName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstantObsNameAccess().getPathQualifiedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_path_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstantObsNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_0_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getInstantObsNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getInstantObsNameAccess().getInstantIdTimeObservationCrossReference_1_0(), "instantId"); 
	}

)
))
;





// Entry rule entryRuleDurationObsExpression
entryRuleDurationObsExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDurationObsExpressionRule(), currentNode); }
	 iv_ruleDurationObsExpression=ruleDurationObsExpression 
	 { $current=$iv_ruleDurationObsExpression.current; } 
	 EOF 
;

// Rule DurationObsExpression
ruleDurationObsExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'&' 
    {
        createLeafNode(grammarAccess.getDurationObsExpressionAccess().getAmpersandKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDurationObsExpressionAccess().getIdDurationObsNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_id_1_0=ruleDurationObsName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDurationObsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"DurationObsName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getDurationObsExpressionAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDurationObsExpressionAccess().getIndexExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_index_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDurationObsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"index",
	        		lv_index_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDurationObsExpressionAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?(	'when' 
    {
        createLeafNode(grammarAccess.getDurationObsExpressionAccess().getWhenKeyword_3_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getDurationObsExpressionAccess().getLeftParenthesisKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDurationObsExpressionAccess().getConditionExpressionParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_condition_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDurationObsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDurationObsExpressionAccess().getRightParenthesisKeyword_3_3(), null); 
    }
)?)
;





// Entry rule entryRuleDurationObsName
entryRuleDurationObsName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDurationObsNameRule(), currentNode); }
	 iv_ruleDurationObsName=ruleDurationObsName 
	 { $current=$iv_ruleDurationObsName.current; } 
	 EOF 
;

// Rule DurationObsName
ruleDurationObsName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDurationObsNameAccess().getPathQualifiedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_path_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDurationObsNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_0_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDurationObsNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDurationObsNameAccess().getDurationIdDurationObservationCrossReference_1_0(), "durationId"); 
	}

)
))
;





// Entry rule entryRuleJitterExp
entryRuleJitterExp returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJitterExpRule(), currentNode); }
	 iv_ruleJitterExp=ruleJitterExp 
	 { $current=$iv_ruleJitterExp.current; } 
	 EOF 
;

// Rule JitterExp
ruleJitterExp returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'jitter(' 
    {
        createLeafNode(grammarAccess.getJitterExpAccess().getJitterKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJitterExpAccess().getFirstInstantInstantObsExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_firstInstant_1_0=ruleInstantObsExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJitterExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"firstInstant",
	        		lv_firstInstant_1_0, 
	        		"InstantObsExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'-' 
    {
        createLeafNode(grammarAccess.getJitterExpAccess().getHyphenMinusKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJitterExpAccess().getSecondInstantInstantObsExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_secondInstant_3_0=ruleInstantObsExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJitterExpRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"secondInstant",
	        		lv_secondInstant_3_0, 
	        		"InstantObsExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	')' 
    {
        createLeafNode(grammarAccess.getJitterExpAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclarationRule(), currentNode); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationVariableDirectionKindParserRuleCall_0_0(), currentNode); 
	    }
		lv_variableDeclaration_0_0=ruleVariableDirectionKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variableDeclaration",
	        		lv_variableDeclaration_0_0, 
	        		"VariableDirectionKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'$' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getDollarSignKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	':' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getColonKeyword_3_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeDataTypeNameParserRuleCall_3_0_1_0(), currentNode); 
	    }
		lv_type_4_0=ruleDataTypeName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_4_0, 
	        		"DataTypeName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_0_2_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getLeftParenthesisKeyword_3_0_2_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitValueExpressionParserRuleCall_3_0_2_2_0(), currentNode); 
	    }
		lv_initValue_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initValue",
	        		lv_initValue_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getRightParenthesisKeyword_3_0_2_3(), null); 
    }
)?)
    |(	'=' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_3_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getLeftParenthesisKeyword_3_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitValueExpressionParserRuleCall_3_1_2_0(), currentNode); 
	    }
		lv_initValue_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initValue",
	        		lv_initValue_11_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationAccess().getRightParenthesisKeyword_3_1_3(), null); 
    }
)))
;





// Entry rule entryRuleVariableDirectionKind
entryRuleVariableDirectionKind returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDirectionKindRule(), currentNode); } 
	 iv_ruleVariableDirectionKind=ruleVariableDirectionKind 
	 { $current=$iv_ruleVariableDirectionKind.current.getText(); }  
	 EOF 
;

// Rule VariableDirectionKind
ruleVariableDirectionKind returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='in' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVariableDirectionKindAccess().getInKeyword_0(), null); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVariableDirectionKindAccess().getOutKeyword_1(), null); 
    }

    |
	kw='inout' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getVariableDirectionKindAccess().getInoutKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleDataTypeName
entryRuleDataTypeName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeNameRule(), currentNode); }
	 iv_ruleDataTypeName=ruleDataTypeName 
	 { $current=$iv_ruleDataTypeName.current; } 
	 EOF 
;

// Rule DataTypeName
ruleDataTypeName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeNameAccess().getPathQualifiedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_path_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_0_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDataTypeNameAccess().getTypeDataTypeCrossReference_1_0(), "type"); 
	}

)
))
;





// Entry rule entryRuleNumberLiteralRule
entryRuleNumberLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberLiteralRuleRule(), currentNode); }
	 iv_ruleNumberLiteralRule=ruleNumberLiteralRule 
	 { $current=$iv_ruleNumberLiteralRule.current; } 
	 EOF 
;

// Rule NumberLiteralRule
ruleNumberLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNumberLiteralRuleAccess().getIntegerLiteralRuleParserRuleCall_0(), currentNode); 
    }
    this_IntegerLiteralRule_0=ruleIntegerLiteralRule
    { 
        $current = $this_IntegerLiteralRule_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNumberLiteralRuleAccess().getUnlimitedLiteralRuleParserRuleCall_1(), currentNode); 
    }
    this_UnlimitedLiteralRule_1=ruleUnlimitedLiteralRule
    { 
        $current = $this_UnlimitedLiteralRule_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNumberLiteralRuleAccess().getRealLiteralRuleParserRuleCall_2(), currentNode); 
    }
    this_RealLiteralRule_2=ruleRealLiteralRule
    { 
        $current = $this_RealLiteralRule_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleIntegerLiteralRule
entryRuleIntegerLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerLiteralRuleRule(), currentNode); }
	 iv_ruleIntegerLiteralRule=ruleIntegerLiteralRule 
	 { $current=$iv_ruleIntegerLiteralRule.current; } 
	 EOF 
;

// Rule IntegerLiteralRule
ruleIntegerLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INTEGERLITERAL
		{
			createLeafNode(grammarAccess.getIntegerLiteralRuleAccess().getValueIntegerLiteralTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"IntegerLiteral", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleUnlimitedLiteralRule
entryRuleUnlimitedLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnlimitedLiteralRuleRule(), currentNode); }
	 iv_ruleUnlimitedLiteralRule=ruleUnlimitedLiteralRule 
	 { $current=$iv_ruleUnlimitedLiteralRule.current; } 
	 EOF 
;

// Rule UnlimitedLiteralRule
ruleUnlimitedLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'*' 
    {
        createLeafNode(grammarAccess.getUnlimitedLiteralRuleAccess().getValueAsteriskKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnlimitedLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleRealLiteralRule
entryRuleRealLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRealLiteralRuleRule(), currentNode); }
	 iv_ruleRealLiteralRule=ruleRealLiteralRule 
	 { $current=$iv_ruleRealLiteralRule.current; } 
	 EOF 
;

// Rule RealLiteralRule
ruleRealLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_REALLITERAL
		{
			createLeafNode(grammarAccess.getRealLiteralRuleAccess().getValueRealLiteralTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRealLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"RealLiteral", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDateTimeLiteralRule
entryRuleDateTimeLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDateTimeLiteralRuleRule(), currentNode); }
	 iv_ruleDateTimeLiteralRule=ruleDateTimeLiteralRule 
	 { $current=$iv_ruleDateTimeLiteralRule.current; } 
	 EOF 
;

// Rule DateTimeLiteralRule
ruleDateTimeLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_DATETIMELITERAL
		{
			createLeafNode(grammarAccess.getDateTimeLiteralRuleAccess().getValueDateTimeLiteralTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDateTimeLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"DateTimeLiteral", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleBooleanLiteralRule
entryRuleBooleanLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRuleRule(), currentNode); }
	 iv_ruleBooleanLiteralRule=ruleBooleanLiteralRule 
	 { $current=$iv_ruleBooleanLiteralRule.current; } 
	 EOF 
;

// Rule BooleanLiteralRule
ruleBooleanLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_BOOLEANLITERAL
		{
			createLeafNode(grammarAccess.getBooleanLiteralRuleAccess().getValueBooleanLiteralTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"BooleanLiteral", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNullLiteralRule
entryRuleNullLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralRuleRule(), currentNode); }
	 iv_ruleNullLiteralRule=ruleNullLiteralRule 
	 { $current=$iv_ruleNullLiteralRule.current; } 
	 EOF 
;

// Rule NullLiteralRule
ruleNullLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_NULLLITERAL
		{
			createLeafNode(grammarAccess.getNullLiteralRuleAccess().getValueNullLiteralTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNullLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"NullLiteral", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDefaultLiteralRule
entryRuleDefaultLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefaultLiteralRuleRule(), currentNode); }
	 iv_ruleDefaultLiteralRule=ruleDefaultLiteralRule 
	 { $current=$iv_ruleDefaultLiteralRule.current; } 
	 EOF 
;

// Rule DefaultLiteralRule
ruleDefaultLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'/' 
    {
        createLeafNode(grammarAccess.getDefaultLiteralRuleAccess().getValueSolidusKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefaultLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "/", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringLiteralRule
entryRuleStringLiteralRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRuleRule(), currentNode); }
	 iv_ruleStringLiteralRule=ruleStringLiteralRule 
	 { $current=$iv_ruleStringLiteralRule.current; } 
	 EOF 
;

// Rule StringLiteralRule
ruleStringLiteralRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralRuleAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





RULE_INTEGERLITERAL : ('+'|'-')? (('0'..'9')+|'0x' ('0'..'9'|'A'..'F'|'a'..'f')+|'0b' ('0'..'1')+);

RULE_REALLITERAL : ('+'|'-')? ('0'..'9')+ '.' ('0'..'9')+ ('E' ('+'|'-')? ('0'..'9')+)?;

RULE_DATETIMELITERAL : (('0'..'1' '0'..'9'|'2' '0'..'3') ':' '0'..'5' '0'..'9' (':' '0'..'5' '0'..'9' (':' '0'..'9' '0'..'9')?)? (' ' '0'..'9' '0'..'9' '0'..'9' '0'..'9' '/' ('0' '0'..'9'|'1' '0'..'2') '/' ('0'..'2' '0'..'9'|'3' ('0'|'1')))? (' ' ('Mon'|'Tue'|'Wed'|'Thr'|'Fri'|'Sat'|'Sun'))?|'0'..'9' '0'..'9' '0'..'9' '0'..'9' '/' ('0' '0'..'9'|'1' '0'..'2') '/' ('0'..'2' '0'..'9'|'3' ('0'|'1')) (' ' ('Mon'|'Tue'|'Wed'|'Thr'|'Fri'|'Sat'|'Sun'))?|('Mon'|'Tue'|'Wed'|'Thr'|'Fri'|'Sat'|'Sun'));

RULE_BOOLEANLITERAL : ('true'|'false');

RULE_NULLLITERAL : 'null';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


