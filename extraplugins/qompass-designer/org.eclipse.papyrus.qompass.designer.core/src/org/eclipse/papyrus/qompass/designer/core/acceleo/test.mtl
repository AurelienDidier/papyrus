[comment encoding = UTF-8 /]
[module test('http://www.eclipse.org/uml2/4.0.0/UML')/]

[import org::eclipse::papyrus::qompass::designer::core::acceleo::UMLTool/]
[import org::eclipse::papyrus::qompass::designer::core::acceleo::utils_cpp/]
[import org::eclipse::papyrus::qompass::designer::core::acceleo::EnumService/]

[template public traceOp(operation: Operation)]

// <instance>_<port>_<operation>
// easier: <component>_<port>_<operation>
updateTimestamp ();
if (!hasDeclaredFunctions) {
	declareFunctions();
	hasDeclaredFunctions = true;
}
Tracing::TraceInit::wait();
int processID = Tracing::TraceInit::getProcessID();
OTF_Writer * writer = Tracing::TraceInit::getWriter();
OTF_Writer_writeEnter (writer, timestamp.ticks(), [enumSvcPrefix()/]::id_[operation.class.varName()/]_[operation.varName()/], processID, 0);
OTF_Writer_writeEventComment (writer, timestamp.ticks(), processID, portName);
OTF_Writer_writeEventComment (writer, timestamp.ticks(), processID, instanceName);
Tracing::TraceInit::post();
[if not (type = null)] [type.cppType()/] ret = [/if]rconn->[operation.cppCall()/];
updateTimestamp ();
Tracing::TraceInit::wait();
OTF_Writer_writeLeave (writer, timestamp.ticks(), [enumSvcPrefix()/]::id_[operation.class.varName()/]_[operation.varName()/], processID, 0);
Tracing::TraceInit::post();
[if not (type = null)]return ret;[/if]
[/template]