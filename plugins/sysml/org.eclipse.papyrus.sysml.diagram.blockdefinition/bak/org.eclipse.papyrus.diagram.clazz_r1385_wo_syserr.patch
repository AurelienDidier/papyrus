Index: META-INF/MANIFEST.MF
===================================================================
--- META-INF/MANIFEST.MF	(revision 1437)
+++ META-INF/MANIFEST.MF	(working copy)
@@ -46,8 +46,10 @@
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.eclipse.papyrus.diagram.clazz,
+ org.eclipse.papyrus.diagram.clazz.custom.factory,
  org.eclipse.papyrus.diagram.clazz.custom.policies,
  org.eclipse.papyrus.diagram.clazz.custom.providers,
+ org.eclipse.papyrus.diagram.clazz.edit.commands,
  org.eclipse.papyrus.diagram.clazz.edit.parts,
  org.eclipse.papyrus.diagram.clazz.edit.policies,
  org.eclipse.papyrus.diagram.clazz.parsers,
Index: custom-src/org/eclipse/papyrus/diagram/clazz/custom/factory/CustomUMLeditPartFactory.java
===================================================================
--- custom-src/org/eclipse/papyrus/diagram/clazz/custom/factory/CustomUMLeditPartFactory.java	(revision 1437)
+++ custom-src/org/eclipse/papyrus/diagram/clazz/custom/factory/CustomUMLeditPartFactory.java	(working copy)
@@ -40,44 +40,41 @@
 import org.eclipse.papyrus.diagram.clazz.edit.parts.PackageEditPart;
 import org.eclipse.papyrus.diagram.clazz.edit.parts.PackageEditPartCN;
 import org.eclipse.papyrus.diagram.clazz.edit.parts.UMLEditPartFactory;
-import org.eclipse.papyrus.diagram.clazz.part.UMLVisualIDRegistry;
 
 /**
  * this is custom editpart factory to create our own editpart
  */
 public class CustomUMLeditPartFactory extends UMLEditPartFactory {
 
-	public EditPart createEditPart(EditPart context, Object model) {
-		if(model instanceof View) {
-			View view = (View)model;
-			switch(UMLVisualIDRegistry.getVisualID(view)) {
-			// redefined classes to modify the method createNodePlate
-			case PackageEditPart.VISUAL_ID:
-				return new CPackageEditPart(view);
-			case PackageEditPartCN.VISUAL_ID:
-				return new CPackageEditPartCN(view);
-			case ModelEditPartTN.VISUAL_ID:
-				return new CModelEditPart(view);
-			case ContainmentCircleEditPart.VISUAL_ID:
-				return new CContainmentCircleEditPart(view);
-			case ModelEditPartCN.VISUAL_ID:
-				return new CModelEditPartCN(view);
-			case AssociationNodeEditPart.VISUAL_ID:
-				return new CAssociationNodeEditPart(view);
-			case Dependency2EditPart.VISUAL_ID:
-				return new CDependencyNodeEditPart(view);
-			case AssociationName5EditPart.VISUAL_ID:
-				return new AssociationEndSourceEditPart(view);
-			case AssociationName3EditPart.VISUAL_ID:
-				return new AssociationEndTargetEditPart(view);
-			case AssociationClassRoleSourceEditPart.VISUAL_ID:
-				return new CAssociationClassEndSourceEditPart(view);
-			case AssociationClassRoleTargetEditPart.VISUAL_ID:
-				return new CAssociationClassEndTargetEditPart(view);
-			case DependencyBranchEditPart.VISUAL_ID:
-				return new CDependencyBranchEditPart(view);
-			}
+	protected EditPart createEditPart(EditPart context, View view, int visualId) {
+
+		switch(visualId) {
+		// redefined classes to modify the method createNodePlate
+		case PackageEditPart.VISUAL_ID:
+			return new CPackageEditPart(view);
+		case PackageEditPartCN.VISUAL_ID:
+			return new CPackageEditPartCN(view);
+		case ModelEditPartTN.VISUAL_ID:
+			return new CModelEditPart(view);
+		case ContainmentCircleEditPart.VISUAL_ID:
+			return new CContainmentCircleEditPart(view);
+		case ModelEditPartCN.VISUAL_ID:
+			return new CModelEditPartCN(view);
+		case AssociationNodeEditPart.VISUAL_ID:
+			return new CAssociationNodeEditPart(view);
+		case Dependency2EditPart.VISUAL_ID:
+			return new CDependencyNodeEditPart(view);
+		case AssociationName5EditPart.VISUAL_ID:
+			return new AssociationEndSourceEditPart(view);
+		case AssociationName3EditPart.VISUAL_ID:
+			return new AssociationEndTargetEditPart(view);
+		case AssociationClassRoleSourceEditPart.VISUAL_ID:
+			return new CAssociationClassEndSourceEditPart(view);
+		case AssociationClassRoleTargetEditPart.VISUAL_ID:
+			return new CAssociationClassEndTargetEditPart(view);
+		case DependencyBranchEditPart.VISUAL_ID:
+			return new CDependencyBranchEditPart(view);
 		}
-		return super.createEditPart(context, model);
+		return super.createEditPart(context, view, visualId);
 	}
 }
Index: src/org/eclipse/papyrus/diagram/clazz/edit/parts/UMLEditPartFactory.java
===================================================================
--- src/org/eclipse/papyrus/diagram/clazz/edit/parts/UMLEditPartFactory.java	(revision 1437)
+++ src/org/eclipse/papyrus/diagram/clazz/edit/parts/UMLEditPartFactory.java	(working copy)
@@ -34,521 +34,527 @@
  */
 public class UMLEditPartFactory implements EditPartFactory {
 
-	/**
-	 * @generated
-	 */
 	public EditPart createEditPart(EditPart context, Object model) {
 		if(model instanceof View) {
 			View view = (View)model;
-			switch(UMLVisualIDRegistry.getVisualID(view)) {
+			return createEditPart(context, view, UMLVisualIDRegistry.getVisualID(view));
+		}
+		return createUnrecognizedEditPart(context, model);
+	}
 
-			case ModelEditPart.VISUAL_ID:
-				return new ModelEditPart(view);
+	/**
+	 * @generated
+	 */
+	protected EditPart createEditPart(EditPart context, View view, int visualId) {
 
-			case Dependency2EditPart.VISUAL_ID:
-				return new Dependency2EditPart(view);
+		switch(visualId) {
 
-			case MultiDependencyLabelEditPart.VISUAL_ID:
-				return new MultiDependencyLabelEditPart(view);
+		case ModelEditPart.VISUAL_ID:
+			return new ModelEditPart(view);
 
-			case AssociationClassEditPart.VISUAL_ID:
-				return new AssociationClassEditPart(view);
+		case Dependency2EditPart.VISUAL_ID:
+			return new Dependency2EditPart(view);
 
-			case AssociationClassName2EditPart.VISUAL_ID:
-				return new AssociationClassName2EditPart(view);
+		case MultiDependencyLabelEditPart.VISUAL_ID:
+			return new MultiDependencyLabelEditPart(view);
 
-			case AssociationNodeEditPart.VISUAL_ID:
-				return new AssociationNodeEditPart(view);
+		case AssociationClassEditPart.VISUAL_ID:
+			return new AssociationClassEditPart(view);
 
-			case InstanceSpecificationEditPart.VISUAL_ID:
-				return new InstanceSpecificationEditPart(view);
+		case AssociationClassName2EditPart.VISUAL_ID:
+			return new AssociationClassName2EditPart(view);
 
-			case InstanceSpecificationNameEditPart.VISUAL_ID:
-				return new InstanceSpecificationNameEditPart(view);
+		case AssociationNodeEditPart.VISUAL_ID:
+			return new AssociationNodeEditPart(view);
 
-			case ComponentEditPart.VISUAL_ID:
-				return new ComponentEditPart(view);
+		case InstanceSpecificationEditPart.VISUAL_ID:
+			return new InstanceSpecificationEditPart(view);
 
-			case ComponentNameEditPart.VISUAL_ID:
-				return new ComponentNameEditPart(view);
+		case InstanceSpecificationNameEditPart.VISUAL_ID:
+			return new InstanceSpecificationNameEditPart(view);
 
-			case SignalEditPart.VISUAL_ID:
-				return new SignalEditPart(view);
+		case ComponentEditPart.VISUAL_ID:
+			return new ComponentEditPart(view);
 
-			case SignalNameEditPart.VISUAL_ID:
-				return new SignalNameEditPart(view);
+		case ComponentNameEditPart.VISUAL_ID:
+			return new ComponentNameEditPart(view);
 
-			case InterfaceEditPart.VISUAL_ID:
-				return new InterfaceEditPart(view);
+		case SignalEditPart.VISUAL_ID:
+			return new SignalEditPart(view);
 
-			case InterfaceNameEditPart.VISUAL_ID:
-				return new InterfaceNameEditPart(view);
+		case SignalNameEditPart.VISUAL_ID:
+			return new SignalNameEditPart(view);
 
-			case ModelEditPartTN.VISUAL_ID:
-				return new ModelEditPartTN(view);
+		case InterfaceEditPart.VISUAL_ID:
+			return new InterfaceEditPart(view);
 
-			case ModelNameEditPartTN.VISUAL_ID:
-				return new ModelNameEditPartTN(view);
+		case InterfaceNameEditPart.VISUAL_ID:
+			return new InterfaceNameEditPart(view);
 
-			case EnumerationEditPart.VISUAL_ID:
-				return new EnumerationEditPart(view);
+		case ModelEditPartTN.VISUAL_ID:
+			return new ModelEditPartTN(view);
 
-			case EnumerationNameEditPart.VISUAL_ID:
-				return new EnumerationNameEditPart(view);
+		case ModelNameEditPartTN.VISUAL_ID:
+			return new ModelNameEditPartTN(view);
 
-			case PackageEditPart.VISUAL_ID:
-				return new PackageEditPart(view);
+		case EnumerationEditPart.VISUAL_ID:
+			return new EnumerationEditPart(view);
 
-			case PackageNameEditPart.VISUAL_ID:
-				return new PackageNameEditPart(view);
+		case EnumerationNameEditPart.VISUAL_ID:
+			return new EnumerationNameEditPart(view);
 
-			case ClassEditPart.VISUAL_ID:
-				return new ClassEditPart(view);
+		case PackageEditPart.VISUAL_ID:
+			return new PackageEditPart(view);
 
-			case ClassNameEditPart.VISUAL_ID:
-				return new ClassNameEditPart(view);
+		case PackageNameEditPart.VISUAL_ID:
+			return new PackageNameEditPart(view);
 
-			case PrimitiveTypeEditPart.VISUAL_ID:
-				return new PrimitiveTypeEditPart(view);
+		case ClassEditPart.VISUAL_ID:
+			return new ClassEditPart(view);
 
-			case PrimitiveTypeNameEditPart.VISUAL_ID:
-				return new PrimitiveTypeNameEditPart(view);
+		case ClassNameEditPart.VISUAL_ID:
+			return new ClassNameEditPart(view);
 
-			case DataTypeEditPart.VISUAL_ID:
-				return new DataTypeEditPart(view);
+		case PrimitiveTypeEditPart.VISUAL_ID:
+			return new PrimitiveTypeEditPart(view);
 
-			case DataTypeNameEditPart.VISUAL_ID:
-				return new DataTypeNameEditPart(view);
+		case PrimitiveTypeNameEditPart.VISUAL_ID:
+			return new PrimitiveTypeNameEditPart(view);
 
-			case ConstraintEditPart.VISUAL_ID:
-				return new ConstraintEditPart(view);
+		case DataTypeEditPart.VISUAL_ID:
+			return new DataTypeEditPart(view);
 
-			case ConstraintNameEditPart.VISUAL_ID:
-				return new ConstraintNameEditPart(view);
+		case DataTypeNameEditPart.VISUAL_ID:
+			return new DataTypeNameEditPart(view);
 
-			case CommentEditPart.VISUAL_ID:
-				return new CommentEditPart(view);
+		case ConstraintEditPart.VISUAL_ID:
+			return new ConstraintEditPart(view);
 
-			case CommentBodyEditPart.VISUAL_ID:
-				return new CommentBodyEditPart(view);
+		case ConstraintNameEditPart.VISUAL_ID:
+			return new ConstraintNameEditPart(view);
 
-			case ShortCutDiagramEditPart.VISUAL_ID:
-				return new ShortCutDiagramEditPart(view);
+		case CommentEditPart.VISUAL_ID:
+			return new CommentEditPart(view);
 
-			case DiagramNameEditPart.VISUAL_ID:
-				return new DiagramNameEditPart(view);
+		case CommentBodyEditPart.VISUAL_ID:
+			return new CommentBodyEditPart(view);
 
-			case DurationObservationEditPart.VISUAL_ID:
-				return new DurationObservationEditPart(view);
+		case ShortCutDiagramEditPart.VISUAL_ID:
+			return new ShortCutDiagramEditPart(view);
 
-			case DurationObservationNameEditPart.VISUAL_ID:
-				return new DurationObservationNameEditPart(view);
+		case DiagramNameEditPart.VISUAL_ID:
+			return new DiagramNameEditPart(view);
 
-			case DurationObservationStereotypeLabelEditPart.VISUAL_ID:
-				return new DurationObservationStereotypeLabelEditPart(view);
+		case DurationObservationEditPart.VISUAL_ID:
+			return new DurationObservationEditPart(view);
 
-			case TimeObservationEditPart.VISUAL_ID:
-				return new TimeObservationEditPart(view);
+		case DurationObservationNameEditPart.VISUAL_ID:
+			return new DurationObservationNameEditPart(view);
 
-			case TimeObservationNameEditPart.VISUAL_ID:
-				return new TimeObservationNameEditPart(view);
+		case DurationObservationStereotypeLabelEditPart.VISUAL_ID:
+			return new DurationObservationStereotypeLabelEditPart(view);
 
-			case TimeObservationStereotypeLabelEditPart.VISUAL_ID:
-				return new TimeObservationStereotypeLabelEditPart(view);
+		case TimeObservationEditPart.VISUAL_ID:
+			return new TimeObservationEditPart(view);
 
-			case PropertyEditPart.VISUAL_ID:
-				return new PropertyEditPart(view);
+		case TimeObservationNameEditPart.VISUAL_ID:
+			return new TimeObservationNameEditPart(view);
 
-			case OperationEditPart.VISUAL_ID:
-				return new OperationEditPart(view);
+		case TimeObservationStereotypeLabelEditPart.VISUAL_ID:
+			return new TimeObservationStereotypeLabelEditPart(view);
 
-			case Class2EditPart.VISUAL_ID:
-				return new Class2EditPart(view);
+		case PropertyEditPart.VISUAL_ID:
+			return new PropertyEditPart(view);
 
-			case RedefinableTemplateSignatureEditPart.VISUAL_ID:
-				return new RedefinableTemplateSignatureEditPart(view);
+		case OperationEditPart.VISUAL_ID:
+			return new OperationEditPart(view);
 
-			case ClassifierTemplateParameterEditPart.VISUAL_ID:
-				return new ClassifierTemplateParameterEditPart(view);
+		case Class2EditPart.VISUAL_ID:
+			return new Class2EditPart(view);
 
-			case TemplateParameterEditPart.VISUAL_ID:
-				return new TemplateParameterEditPart(view);
+		case RedefinableTemplateSignatureEditPart.VISUAL_ID:
+			return new RedefinableTemplateSignatureEditPart(view);
 
-			case Property2EditPart.VISUAL_ID:
-				return new Property2EditPart(view);
+		case ClassifierTemplateParameterEditPart.VISUAL_ID:
+			return new ClassifierTemplateParameterEditPart(view);
 
-			case Property3EditPart.VISUAL_ID:
-				return new Property3EditPart(view);
+		case TemplateParameterEditPart.VISUAL_ID:
+			return new TemplateParameterEditPart(view);
 
-			case Operation2EditPart.VISUAL_ID:
-				return new Operation2EditPart(view);
+		case Property2EditPart.VISUAL_ID:
+			return new Property2EditPart(view);
 
-			case Class3EditPart.VISUAL_ID:
-				return new Class3EditPart(view);
+		case Property3EditPart.VISUAL_ID:
+			return new Property3EditPart(view);
 
-			case InstanceSpecificationEditPartCN.VISUAL_ID:
-				return new InstanceSpecificationEditPartCN(view);
+		case Operation2EditPart.VISUAL_ID:
+			return new Operation2EditPart(view);
 
-			case InstanceSpecificationNameEditPartCN.VISUAL_ID:
-				return new InstanceSpecificationNameEditPartCN(view);
+		case Class3EditPart.VISUAL_ID:
+			return new Class3EditPart(view);
 
-			case ComponentEditPartCN.VISUAL_ID:
-				return new ComponentEditPartCN(view);
+		case InstanceSpecificationEditPartCN.VISUAL_ID:
+			return new InstanceSpecificationEditPartCN(view);
 
-			case ComponentNameEditPartCN.VISUAL_ID:
-				return new ComponentNameEditPartCN(view);
+		case InstanceSpecificationNameEditPartCN.VISUAL_ID:
+			return new InstanceSpecificationNameEditPartCN(view);
 
-			case SignalEditPartCN.VISUAL_ID:
-				return new SignalEditPartCN(view);
+		case ComponentEditPartCN.VISUAL_ID:
+			return new ComponentEditPartCN(view);
 
-			case SignalNameEditPartCN.VISUAL_ID:
-				return new SignalNameEditPartCN(view);
+		case ComponentNameEditPartCN.VISUAL_ID:
+			return new ComponentNameEditPartCN(view);
 
-			case InterfaceEditPartCN.VISUAL_ID:
-				return new InterfaceEditPartCN(view);
+		case SignalEditPartCN.VISUAL_ID:
+			return new SignalEditPartCN(view);
 
-			case InterfaceNameEditPartCN.VISUAL_ID:
-				return new InterfaceNameEditPartCN(view);
+		case SignalNameEditPartCN.VISUAL_ID:
+			return new SignalNameEditPartCN(view);
 
-			case ModelEditPartCN.VISUAL_ID:
-				return new ModelEditPartCN(view);
+		case InterfaceEditPartCN.VISUAL_ID:
+			return new InterfaceEditPartCN(view);
 
-			case ModelNameEditPartCN.VISUAL_ID:
-				return new ModelNameEditPartCN(view);
+		case InterfaceNameEditPartCN.VISUAL_ID:
+			return new InterfaceNameEditPartCN(view);
 
-			case EnumerationEditPartCN.VISUAL_ID:
-				return new EnumerationEditPartCN(view);
+		case ModelEditPartCN.VISUAL_ID:
+			return new ModelEditPartCN(view);
 
-			case EnumerationNameEditPartCN.VISUAL_ID:
-				return new EnumerationNameEditPartCN(view);
+		case ModelNameEditPartCN.VISUAL_ID:
+			return new ModelNameEditPartCN(view);
 
-			case EnumerationLiteralEditPart.VISUAL_ID:
-				return new EnumerationLiteralEditPart(view);
+		case EnumerationEditPartCN.VISUAL_ID:
+			return new EnumerationEditPartCN(view);
 
-			case PackageEditPartCN.VISUAL_ID:
-				return new PackageEditPartCN(view);
+		case EnumerationNameEditPartCN.VISUAL_ID:
+			return new EnumerationNameEditPartCN(view);
 
-			case PackageNameEditPartCN.VISUAL_ID:
-				return new PackageNameEditPartCN(view);
+		case EnumerationLiteralEditPart.VISUAL_ID:
+			return new EnumerationLiteralEditPart(view);
 
-			case ClassEditPartCN.VISUAL_ID:
-				return new ClassEditPartCN(view);
+		case PackageEditPartCN.VISUAL_ID:
+			return new PackageEditPartCN(view);
 
-			case ClassNameEditPartCN.VISUAL_ID:
-				return new ClassNameEditPartCN(view);
+		case PackageNameEditPartCN.VISUAL_ID:
+			return new PackageNameEditPartCN(view);
 
-			case ReceptionEditPart.VISUAL_ID:
-				return new ReceptionEditPart(view);
+		case ClassEditPartCN.VISUAL_ID:
+			return new ClassEditPartCN(view);
 
-			case Property4EditPart.VISUAL_ID:
-				return new Property4EditPart(view);
+		case ClassNameEditPartCN.VISUAL_ID:
+			return new ClassNameEditPartCN(view);
 
-			case Operation3EditPart.VISUAL_ID:
-				return new Operation3EditPart(view);
+		case ReceptionEditPart.VISUAL_ID:
+			return new ReceptionEditPart(view);
 
-			case Class5EditPart.VISUAL_ID:
-				return new Class5EditPart(view);
+		case Property4EditPart.VISUAL_ID:
+			return new Property4EditPart(view);
 
-			case PrimitiveTypeEditPartCN.VISUAL_ID:
-				return new PrimitiveTypeEditPartCN(view);
+		case Operation3EditPart.VISUAL_ID:
+			return new Operation3EditPart(view);
 
-			case PrimitiveTypeNameEditPartCN.VISUAL_ID:
-				return new PrimitiveTypeNameEditPartCN(view);
+		case Class5EditPart.VISUAL_ID:
+			return new Class5EditPart(view);
 
-			case DataTypeEditPartCN.VISUAL_ID:
-				return new DataTypeEditPartCN(view);
+		case PrimitiveTypeEditPartCN.VISUAL_ID:
+			return new PrimitiveTypeEditPartCN(view);
 
-			case DataTypeNameEditPartCN.VISUAL_ID:
-				return new DataTypeNameEditPartCN(view);
+		case PrimitiveTypeNameEditPartCN.VISUAL_ID:
+			return new PrimitiveTypeNameEditPartCN(view);
 
-			case Property5EditPart.VISUAL_ID:
-				return new Property5EditPart(view);
+		case DataTypeEditPartCN.VISUAL_ID:
+			return new DataTypeEditPartCN(view);
 
-			case Operation4EditPart.VISUAL_ID:
-				return new Operation4EditPart(view);
+		case DataTypeNameEditPartCN.VISUAL_ID:
+			return new DataTypeNameEditPartCN(view);
 
-			case Comment2EditPart.VISUAL_ID:
-				return new Comment2EditPart(view);
+		case Property5EditPart.VISUAL_ID:
+			return new Property5EditPart(view);
 
-			case CommentBody2EditPart.VISUAL_ID:
-				return new CommentBody2EditPart(view);
+		case Operation4EditPart.VISUAL_ID:
+			return new Operation4EditPart(view);
 
-			case Constraint2EditPart.VISUAL_ID:
-				return new Constraint2EditPart(view);
+		case Comment2EditPart.VISUAL_ID:
+			return new Comment2EditPart(view);
 
-			case ConstraintName2EditPart.VISUAL_ID:
-				return new ConstraintName2EditPart(view);
+		case CommentBody2EditPart.VISUAL_ID:
+			return new CommentBody2EditPart(view);
 
-			case SlotEditPart.VISUAL_ID:
-				return new SlotEditPart(view);
+		case Constraint2EditPart.VISUAL_ID:
+			return new Constraint2EditPart(view);
 
-			case ContainmentCircleEditPart.VISUAL_ID:
-				return new ContainmentCircleEditPart(view);
+		case ConstraintName2EditPart.VISUAL_ID:
+			return new ConstraintName2EditPart(view);
 
-			case AssociationClassAttributeCompartmentEditPart.VISUAL_ID:
-				return new AssociationClassAttributeCompartmentEditPart(view);
+		case SlotEditPart.VISUAL_ID:
+			return new SlotEditPart(view);
 
-			case InstanceSpecificationSlotCompartmentEditPart.VISUAL_ID:
-				return new InstanceSpecificationSlotCompartmentEditPart(view);
+		case ContainmentCircleEditPart.VISUAL_ID:
+			return new ContainmentCircleEditPart(view);
 
-			case ComponentAttributeCompartmentEditPart.VISUAL_ID:
-				return new ComponentAttributeCompartmentEditPart(view);
+		case AssociationClassAttributeCompartmentEditPart.VISUAL_ID:
+			return new AssociationClassAttributeCompartmentEditPart(view);
 
-			case ComponentOperationCompartmentEditPart.VISUAL_ID:
-				return new ComponentOperationCompartmentEditPart(view);
+		case InstanceSpecificationSlotCompartmentEditPart.VISUAL_ID:
+			return new InstanceSpecificationSlotCompartmentEditPart(view);
 
-			case ComponentNestedClassifierCompartmentEditPart.VISUAL_ID:
-				return new ComponentNestedClassifierCompartmentEditPart(view);
+		case ComponentAttributeCompartmentEditPart.VISUAL_ID:
+			return new ComponentAttributeCompartmentEditPart(view);
 
-			case RedefinableTemplateSignatureTemplateParameterCompartmentEditPart.VISUAL_ID:
-				return new RedefinableTemplateSignatureTemplateParameterCompartmentEditPart(view);
+		case ComponentOperationCompartmentEditPart.VISUAL_ID:
+			return new ComponentOperationCompartmentEditPart(view);
 
-			case SignalAttributeCompartmentEditPart.VISUAL_ID:
-				return new SignalAttributeCompartmentEditPart(view);
+		case ComponentNestedClassifierCompartmentEditPart.VISUAL_ID:
+			return new ComponentNestedClassifierCompartmentEditPart(view);
 
-			case InterfaceAttributeCompartmentEditPart.VISUAL_ID:
-				return new InterfaceAttributeCompartmentEditPart(view);
+		case RedefinableTemplateSignatureTemplateParameterCompartmentEditPart.VISUAL_ID:
+			return new RedefinableTemplateSignatureTemplateParameterCompartmentEditPart(view);
 
-			case InterfaceOperationCompartmentEditPart.VISUAL_ID:
-				return new InterfaceOperationCompartmentEditPart(view);
+		case SignalAttributeCompartmentEditPart.VISUAL_ID:
+			return new SignalAttributeCompartmentEditPart(view);
 
-			case InterfaceNestedClassifierCompartmentEditPart.VISUAL_ID:
-				return new InterfaceNestedClassifierCompartmentEditPart(view);
+		case InterfaceAttributeCompartmentEditPart.VISUAL_ID:
+			return new InterfaceAttributeCompartmentEditPart(view);
 
-			case ModelPackageableElementCompartmentEditPart.VISUAL_ID:
-				return new ModelPackageableElementCompartmentEditPart(view);
+		case InterfaceOperationCompartmentEditPart.VISUAL_ID:
+			return new InterfaceOperationCompartmentEditPart(view);
 
-			case ComponentAttributeCompartment2EditPart.VISUAL_ID:
-				return new ComponentAttributeCompartment2EditPart(view);
+		case InterfaceNestedClassifierCompartmentEditPart.VISUAL_ID:
+			return new InterfaceNestedClassifierCompartmentEditPart(view);
 
-			case ComponentOperationCompartment2EditPart.VISUAL_ID:
-				return new ComponentOperationCompartment2EditPart(view);
+		case ModelPackageableElementCompartmentEditPart.VISUAL_ID:
+			return new ModelPackageableElementCompartmentEditPart(view);
 
-			case ComponentNestedClassifierCompartment2EditPart.VISUAL_ID:
-				return new ComponentNestedClassifierCompartment2EditPart(view);
+		case ComponentAttributeCompartment2EditPart.VISUAL_ID:
+			return new ComponentAttributeCompartment2EditPart(view);
 
-			case SignalAttributeCompartment2EditPart.VISUAL_ID:
-				return new SignalAttributeCompartment2EditPart(view);
+		case ComponentOperationCompartment2EditPart.VISUAL_ID:
+			return new ComponentOperationCompartment2EditPart(view);
 
-			case InterfaceAttributeCompartment2EditPart.VISUAL_ID:
-				return new InterfaceAttributeCompartment2EditPart(view);
+		case ComponentNestedClassifierCompartment2EditPart.VISUAL_ID:
+			return new ComponentNestedClassifierCompartment2EditPart(view);
 
-			case InterfaceOperationCompartment2EditPart.VISUAL_ID:
-				return new InterfaceOperationCompartment2EditPart(view);
+		case SignalAttributeCompartment2EditPart.VISUAL_ID:
+			return new SignalAttributeCompartment2EditPart(view);
 
-			case InterfaceNestedClassifierCompartment2EditPart.VISUAL_ID:
-				return new InterfaceNestedClassifierCompartment2EditPart(view);
+		case InterfaceAttributeCompartment2EditPart.VISUAL_ID:
+			return new InterfaceAttributeCompartment2EditPart(view);
 
-			case ModelPackageableElementCompartment2EditPart.VISUAL_ID:
-				return new ModelPackageableElementCompartment2EditPart(view);
+		case InterfaceOperationCompartment2EditPart.VISUAL_ID:
+			return new InterfaceOperationCompartment2EditPart(view);
 
-			case EnumerationEnumerationLiteralCompartment2EditPart.VISUAL_ID:
-				return new EnumerationEnumerationLiteralCompartment2EditPart(view);
+		case InterfaceNestedClassifierCompartment2EditPart.VISUAL_ID:
+			return new InterfaceNestedClassifierCompartment2EditPart(view);
 
-			case PackagePackageableElementCompartmentEditPart.VISUAL_ID:
-				return new PackagePackageableElementCompartmentEditPart(view);
+		case ModelPackageableElementCompartment2EditPart.VISUAL_ID:
+			return new ModelPackageableElementCompartment2EditPart(view);
 
-			case ClassAttributeCompartmentEditPart.VISUAL_ID:
-				return new ClassAttributeCompartmentEditPart(view);
+		case EnumerationEnumerationLiteralCompartment2EditPart.VISUAL_ID:
+			return new EnumerationEnumerationLiteralCompartment2EditPart(view);
 
-			case ClassOperationCompartmentEditPart.VISUAL_ID:
-				return new ClassOperationCompartmentEditPart(view);
+		case PackagePackageableElementCompartmentEditPart.VISUAL_ID:
+			return new PackagePackageableElementCompartmentEditPart(view);
 
-			case ClassNestedClassifierCompartmentEditPart.VISUAL_ID:
-				return new ClassNestedClassifierCompartmentEditPart(view);
+		case ClassAttributeCompartmentEditPart.VISUAL_ID:
+			return new ClassAttributeCompartmentEditPart(view);
 
-			case DataTypeAttributeCompartment2EditPart.VISUAL_ID:
-				return new DataTypeAttributeCompartment2EditPart(view);
+		case ClassOperationCompartmentEditPart.VISUAL_ID:
+			return new ClassOperationCompartmentEditPart(view);
 
-			case DataTypeOperationCompartment2EditPart.VISUAL_ID:
-				return new DataTypeOperationCompartment2EditPart(view);
+		case ClassNestedClassifierCompartmentEditPart.VISUAL_ID:
+			return new ClassNestedClassifierCompartmentEditPart(view);
 
-			case EnumerationEnumerationLiteralCompartmentEditPart.VISUAL_ID:
-				return new EnumerationEnumerationLiteralCompartmentEditPart(view);
+		case DataTypeAttributeCompartment2EditPart.VISUAL_ID:
+			return new DataTypeAttributeCompartment2EditPart(view);
 
-			case PackagePackageableElementCompartment2EditPart.VISUAL_ID:
-				return new PackagePackageableElementCompartment2EditPart(view);
+		case DataTypeOperationCompartment2EditPart.VISUAL_ID:
+			return new DataTypeOperationCompartment2EditPart(view);
 
-			case ClassAttributeCompartment2EditPart.VISUAL_ID:
-				return new ClassAttributeCompartment2EditPart(view);
+		case EnumerationEnumerationLiteralCompartmentEditPart.VISUAL_ID:
+			return new EnumerationEnumerationLiteralCompartmentEditPart(view);
 
-			case ClassOperationCompartment2EditPart.VISUAL_ID:
-				return new ClassOperationCompartment2EditPart(view);
+		case PackagePackageableElementCompartment2EditPart.VISUAL_ID:
+			return new PackagePackageableElementCompartment2EditPart(view);
 
-			case ClassNestedClassifierCompartment2EditPart.VISUAL_ID:
-				return new ClassNestedClassifierCompartment2EditPart(view);
+		case ClassAttributeCompartment2EditPart.VISUAL_ID:
+			return new ClassAttributeCompartment2EditPart(view);
 
-			case DataTypeAttributeCompartmentEditPart.VISUAL_ID:
-				return new DataTypeAttributeCompartmentEditPart(view);
+		case ClassOperationCompartment2EditPart.VISUAL_ID:
+			return new ClassOperationCompartment2EditPart(view);
 
-			case DataTypeOperationCompartmentEditPart.VISUAL_ID:
-				return new DataTypeOperationCompartmentEditPart(view);
+		case ClassNestedClassifierCompartment2EditPart.VISUAL_ID:
+			return new ClassNestedClassifierCompartment2EditPart(view);
 
-			case InstanceSpecificationSlotCompartmentEditPartCN.VISUAL_ID:
-				return new InstanceSpecificationSlotCompartmentEditPartCN(view);
+		case DataTypeAttributeCompartmentEditPart.VISUAL_ID:
+			return new DataTypeAttributeCompartmentEditPart(view);
 
-			case AssociationClassOperationCompartmentEditPart.VISUAL_ID:
-				return new AssociationClassOperationCompartmentEditPart(view);
+		case DataTypeOperationCompartmentEditPart.VISUAL_ID:
+			return new DataTypeOperationCompartmentEditPart(view);
 
-			case AssociationClassNestedClassifierCompartmentEditPart.VISUAL_ID:
-				return new AssociationClassNestedClassifierCompartmentEditPart(view);
+		case InstanceSpecificationSlotCompartmentEditPartCN.VISUAL_ID:
+			return new InstanceSpecificationSlotCompartmentEditPartCN(view);
 
-			case CommentLinkDescriptorEditPart.VISUAL_ID:
-				return new CommentLinkDescriptorEditPart(view);
+		case AssociationClassOperationCompartmentEditPart.VISUAL_ID:
+			return new AssociationClassOperationCompartmentEditPart(view);
 
-			case AssociationClass2EditPart.VISUAL_ID:
-				return new AssociationClass2EditPart(view);
+		case AssociationClassNestedClassifierCompartmentEditPart.VISUAL_ID:
+			return new AssociationClassNestedClassifierCompartmentEditPart(view);
 
-			case AssociationClassRoleSourceEditPart.VISUAL_ID:
-				return new AssociationClassRoleSourceEditPart(view);
+		case CommentLinkDescriptorEditPart.VISUAL_ID:
+			return new CommentLinkDescriptorEditPart(view);
 
-			case AssociationClassRoleTargetEditPart.VISUAL_ID:
-				return new AssociationClassRoleTargetEditPart(view);
+		case AssociationClass2EditPart.VISUAL_ID:
+			return new AssociationClass2EditPart(view);
 
-			case AssociationEditPart.VISUAL_ID:
-				return new AssociationEditPart(view);
+		case AssociationClassRoleSourceEditPart.VISUAL_ID:
+			return new AssociationClassRoleSourceEditPart(view);
 
-			case AppliedStereotypeAssociationEditPart.VISUAL_ID:
-				return new AppliedStereotypeAssociationEditPart(view);
+		case AssociationClassRoleTargetEditPart.VISUAL_ID:
+			return new AssociationClassRoleTargetEditPart(view);
 
-			case AssociationName2EditPart.VISUAL_ID:
-				return new AssociationName2EditPart(view);
+		case AssociationEditPart.VISUAL_ID:
+			return new AssociationEditPart(view);
 
-			case AssociationName3EditPart.VISUAL_ID:
-				return new AssociationName3EditPart(view);
+		case AppliedStereotypeAssociationEditPart.VISUAL_ID:
+			return new AppliedStereotypeAssociationEditPart(view);
 
-			case AssociationName5EditPart.VISUAL_ID:
-				return new AssociationName5EditPart(view);
+		case AssociationName2EditPart.VISUAL_ID:
+			return new AssociationName2EditPart(view);
 
-			case AssociationBranchEditPart.VISUAL_ID:
-				return new AssociationBranchEditPart(view);
+		case AssociationName3EditPart.VISUAL_ID:
+			return new AssociationName3EditPart(view);
 
-			case AssociationBranchRoleEditPart.VISUAL_ID:
-				return new AssociationBranchRoleEditPart(view);
+		case AssociationName5EditPart.VISUAL_ID:
+			return new AssociationName5EditPart(view);
 
-			case GeneralizationEditPart.VISUAL_ID:
-				return new GeneralizationEditPart(view);
+		case AssociationBranchEditPart.VISUAL_ID:
+			return new AssociationBranchEditPart(view);
 
-			case AppliedStereotyperGeneralizationEditPart.VISUAL_ID:
-				return new AppliedStereotyperGeneralizationEditPart(view);
+		case AssociationBranchRoleEditPart.VISUAL_ID:
+			return new AssociationBranchRoleEditPart(view);
 
-			case InterfaceRealizationEditPart.VISUAL_ID:
-				return new InterfaceRealizationEditPart(view);
+		case GeneralizationEditPart.VISUAL_ID:
+			return new GeneralizationEditPart(view);
 
-			case AppliedStereotypeInterfaceRealizationEditPart.VISUAL_ID:
-				return new AppliedStereotypeInterfaceRealizationEditPart(view);
+		case AppliedStereotyperGeneralizationEditPart.VISUAL_ID:
+			return new AppliedStereotyperGeneralizationEditPart(view);
 
-			case InterfaceRealizationName2EditPart.VISUAL_ID:
-				return new InterfaceRealizationName2EditPart(view);
+		case InterfaceRealizationEditPart.VISUAL_ID:
+			return new InterfaceRealizationEditPart(view);
 
-			case SubstitutionEditPart.VISUAL_ID:
-				return new SubstitutionEditPart(view);
+		case AppliedStereotypeInterfaceRealizationEditPart.VISUAL_ID:
+			return new AppliedStereotypeInterfaceRealizationEditPart(view);
 
-			case AppliedStereotypeSubstitutionEditPart.VISUAL_ID:
-				return new AppliedStereotypeSubstitutionEditPart(view);
+		case InterfaceRealizationName2EditPart.VISUAL_ID:
+			return new InterfaceRealizationName2EditPart(view);
 
-			case SubstitutionName2EditPart.VISUAL_ID:
-				return new SubstitutionName2EditPart(view);
+		case SubstitutionEditPart.VISUAL_ID:
+			return new SubstitutionEditPart(view);
 
-			case RealizationEditPart.VISUAL_ID:
-				return new RealizationEditPart(view);
+		case AppliedStereotypeSubstitutionEditPart.VISUAL_ID:
+			return new AppliedStereotypeSubstitutionEditPart(view);
 
-			case AppliedStereotypeRealizationEditPart.VISUAL_ID:
-				return new AppliedStereotypeRealizationEditPart(view);
+		case SubstitutionName2EditPart.VISUAL_ID:
+			return new SubstitutionName2EditPart(view);
 
-			case RealizationName2EditPart.VISUAL_ID:
-				return new RealizationName2EditPart(view);
+		case RealizationEditPart.VISUAL_ID:
+			return new RealizationEditPart(view);
 
-			case AbstractionEditPart.VISUAL_ID:
-				return new AbstractionEditPart(view);
+		case AppliedStereotypeRealizationEditPart.VISUAL_ID:
+			return new AppliedStereotypeRealizationEditPart(view);
 
-			case AbstractionNameEditPart.VISUAL_ID:
-				return new AbstractionNameEditPart(view);
+		case RealizationName2EditPart.VISUAL_ID:
+			return new RealizationName2EditPart(view);
 
-			case AppliedStereotypeAbstractionEditPart.VISUAL_ID:
-				return new AppliedStereotypeAbstractionEditPart(view);
+		case AbstractionEditPart.VISUAL_ID:
+			return new AbstractionEditPart(view);
 
-			case UsageEditPart.VISUAL_ID:
-				return new UsageEditPart(view);
+		case AbstractionNameEditPart.VISUAL_ID:
+			return new AbstractionNameEditPart(view);
 
-			case UsageNameEditPart.VISUAL_ID:
-				return new UsageNameEditPart(view);
+		case AppliedStereotypeAbstractionEditPart.VISUAL_ID:
+			return new AppliedStereotypeAbstractionEditPart(view);
 
-			case AppliedStereotypeUsageEditPart.VISUAL_ID:
-				return new AppliedStereotypeUsageEditPart(view);
+		case UsageEditPart.VISUAL_ID:
+			return new UsageEditPart(view);
 
-			case DependencyEditPart.VISUAL_ID:
-				return new DependencyEditPart(view);
+		case UsageNameEditPart.VISUAL_ID:
+			return new UsageNameEditPart(view);
 
-			case DependencyNameEditPart.VISUAL_ID:
-				return new DependencyNameEditPart(view);
+		case AppliedStereotypeUsageEditPart.VISUAL_ID:
+			return new AppliedStereotypeUsageEditPart(view);
 
-			case AppliedStereotypeDependencyEditPart.VISUAL_ID:
-				return new AppliedStereotypeDependencyEditPart(view);
+		case DependencyEditPart.VISUAL_ID:
+			return new DependencyEditPart(view);
 
-			case DependencyBranchEditPart.VISUAL_ID:
-				return new DependencyBranchEditPart(view);
+		case DependencyNameEditPart.VISUAL_ID:
+			return new DependencyNameEditPart(view);
 
-			case ElementImportEditPart.VISUAL_ID:
-				return new ElementImportEditPart(view);
+		case AppliedStereotypeDependencyEditPart.VISUAL_ID:
+			return new AppliedStereotypeDependencyEditPart(view);
 
-			case ElementImportAliasEditPart.VISUAL_ID:
-				return new ElementImportAliasEditPart(view);
+		case DependencyBranchEditPart.VISUAL_ID:
+			return new DependencyBranchEditPart(view);
 
-			case AppliedStereotypeElementImportEditPart.VISUAL_ID:
-				return new AppliedStereotypeElementImportEditPart(view);
+		case ElementImportEditPart.VISUAL_ID:
+			return new ElementImportEditPart(view);
 
-			case PackageImportEditPart.VISUAL_ID:
-				return new PackageImportEditPart(view);
+		case ElementImportAliasEditPart.VISUAL_ID:
+			return new ElementImportAliasEditPart(view);
 
-			case AppliedStereotypePackageImportEditPart.VISUAL_ID:
-				return new AppliedStereotypePackageImportEditPart(view);
+		case AppliedStereotypeElementImportEditPart.VISUAL_ID:
+			return new AppliedStereotypeElementImportEditPart(view);
 
-			case PackageMergeEditPart.VISUAL_ID:
-				return new PackageMergeEditPart(view);
+		case PackageImportEditPart.VISUAL_ID:
+			return new PackageImportEditPart(view);
 
-			case AppliedStereotypePackageMergeEditPart.VISUAL_ID:
-				return new AppliedStereotypePackageMergeEditPart(view);
+		case AppliedStereotypePackageImportEditPart.VISUAL_ID:
+			return new AppliedStereotypePackageImportEditPart(view);
 
-			case ProfileApplicationEditPart.VISUAL_ID:
-				return new ProfileApplicationEditPart(view);
+		case PackageMergeEditPart.VISUAL_ID:
+			return new PackageMergeEditPart(view);
 
-			case CommentAnnotatedElementEditPart.VISUAL_ID:
-				return new CommentAnnotatedElementEditPart(view);
+		case AppliedStereotypePackageMergeEditPart.VISUAL_ID:
+			return new AppliedStereotypePackageMergeEditPart(view);
 
-			case ConstraintConstrainedElementEditPart.VISUAL_ID:
-				return new ConstraintConstrainedElementEditPart(view);
+		case ProfileApplicationEditPart.VISUAL_ID:
+			return new ProfileApplicationEditPart(view);
 
-			case TemplateBindingEditPart.VISUAL_ID:
-				return new TemplateBindingEditPart(view);
+		case CommentAnnotatedElementEditPart.VISUAL_ID:
+			return new CommentAnnotatedElementEditPart(view);
 
-			case WrappingLabelEditPart.VISUAL_ID:
-				return new WrappingLabelEditPart(view);
+		case ConstraintConstrainedElementEditPart.VISUAL_ID:
+			return new ConstraintConstrainedElementEditPart(view);
 
-			case GeneralizationSetEditPart.VISUAL_ID:
-				return new GeneralizationSetEditPart(view);
+		case TemplateBindingEditPart.VISUAL_ID:
+			return new TemplateBindingEditPart(view);
 
-			case ConstraintLabelEditPart.VISUAL_ID:
-				return new ConstraintLabelEditPart(view);
+		case WrappingLabelEditPart.VISUAL_ID:
+			return new WrappingLabelEditPart(view);
 
-			case InstanceSpecificationLinkEditPart.VISUAL_ID:
-				return new InstanceSpecificationLinkEditPart(view);
+		case GeneralizationSetEditPart.VISUAL_ID:
+			return new GeneralizationSetEditPart(view);
 
-			case AddedLinkEditPart.VISUAL_ID:
-				return new AddedLinkEditPart(view);
+		case ConstraintLabelEditPart.VISUAL_ID:
+			return new ConstraintLabelEditPart(view);
 
-			case ContainmentLinkEditPart.VISUAL_ID:
-				return new ContainmentLinkEditPart(view);
+		case InstanceSpecificationLinkEditPart.VISUAL_ID:
+			return new InstanceSpecificationLinkEditPart(view);
 
-			case ConnectorTimeObservationEditPart.VISUAL_ID:
-				return new ConnectorTimeObservationEditPart(view);
+		case AddedLinkEditPart.VISUAL_ID:
+			return new AddedLinkEditPart(view);
 
-			case ConnectorDurationObservationEditPart.VISUAL_ID:
-				return new ConnectorDurationObservationEditPart(view);
+		case ContainmentLinkEditPart.VISUAL_ID:
+			return new ContainmentLinkEditPart(view);
 
-			}
+		case ConnectorTimeObservationEditPart.VISUAL_ID:
+			return new ConnectorTimeObservationEditPart(view);
+
+		case ConnectorDurationObservationEditPart.VISUAL_ID:
+			return new ConnectorDurationObservationEditPart(view);
+
 		}
-		return createUnrecognizedEditPart(context, model);
+		return createUnrecognizedEditPart(context, view);
 	}
 
 	/**
Index: src/org/eclipse/papyrus/diagram/clazz/providers/UMLViewProvider.java
===================================================================
--- src/org/eclipse/papyrus/diagram/clazz/providers/UMLViewProvider.java	(revision 1437)
+++ src/org/eclipse/papyrus/diagram/clazz/providers/UMLViewProvider.java	(working copy)
@@ -439,7 +439,7 @@
 	/**
 	 * @generated
 	 */
-	private Node createCompartment(View owner, String hint, boolean canCollapse, boolean hasTitle, boolean canSort, boolean canFilter) {
+	protected Node createCompartment(View owner, String hint, boolean canCollapse, boolean hasTitle, boolean canSort, boolean canFilter) {
 		//SemanticListCompartment rv = NotationFactory.eINSTANCE.createSemanticListCompartment();
 		//rv.setShowTitle(showTitle);
 		//rv.setCollapsed(isCollapsed);
@@ -781,7 +781,7 @@
 	public Diagram createDiagram(IAdaptable semanticAdapter, String diagramKind, PreferencesHint preferencesHint) {
 		Diagram diagram = NotationFactory.eINSTANCE.createDiagram();
 		diagram.getStyles().add(NotationFactory.eINSTANCE.createDiagramStyle());
-		diagram.setType(ModelEditPart.MODEL_ID);
+		diagram.setType(diagramKind);
 		diagram.setElement(getSemanticElement(semanticAdapter));
 		diagram.setMeasurementUnit(MeasurementUnit.PIXEL_LITERAL);
 		return diagram;
@@ -1394,7 +1394,7 @@
 	/**
 	 * @generated
 	 */
-	private Node createLabel(View owner, String hint) {
+	protected Node createLabel(View owner, String hint) {
 		DecorationNode rv = NotationFactory.eINSTANCE.createDecorationNode();
 		rv.setType(hint);
 		ViewUtil.insertChildView(owner, rv, ViewUtil.APPEND, true);
@@ -2135,7 +2135,7 @@
 	/**
 	 * @generated
 	 */
-	private EObject getSemanticElement(IAdaptable semanticAdapter) {
+	protected EObject getSemanticElement(IAdaptable semanticAdapter) {
 		if(semanticAdapter == null) {
 			return null;
 		}
@@ -2149,7 +2149,7 @@
 	/**
 	 * @generated
 	 */
-	private IElementType getSemanticElementType(IAdaptable semanticAdapter) {
+	protected IElementType getSemanticElementType(IAdaptable semanticAdapter) {
 		if(semanticAdapter == null) {
 			return null;
 		}
@@ -2366,11 +2366,9 @@
 	 * @generated
 	 */
 	private void stampShortcut(View containerView, Node target) {
-		if(!ModelEditPart.MODEL_ID.equals(UMLVisualIDRegistry.getModelID(containerView))) {
-			EAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE.createEAnnotation();
-			shortcutAnnotation.setSource("Shortcut"); //$NON-NLS-1$
-			shortcutAnnotation.getDetails().put("modelID", ModelEditPart.MODEL_ID); //$NON-NLS-1$
-			target.getEAnnotations().add(shortcutAnnotation);
-		}
+		EAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE.createEAnnotation();
+		shortcutAnnotation.setSource("Shortcut"); //$NON-NLS-1$
+		shortcutAnnotation.getDetails().put("modelID", containerView.getDiagram().getType()); //$NON-NLS-1$
+		target.getEAnnotations().add(shortcutAnnotation);
 	}
 }
Index: src/org/eclipse/papyrus/diagram/clazz/part/UMLVisualIDRegistry.java
===================================================================
--- src/org/eclipse/papyrus/diagram/clazz/part/UMLVisualIDRegistry.java	(revision 1437)
+++ src/org/eclipse/papyrus/diagram/clazz/part/UMLVisualIDRegistry.java	(working copy)
@@ -115,7 +115,7 @@
 		}
 		int containerVisualID;
 		if(ModelEditPart.MODEL_ID.equals(containerModelID)) {
-			containerVisualID = org.eclipse.papyrus.diagram.clazz.part.UMLVisualIDRegistry.getVisualID(containerView);
+			containerVisualID = getVisualID(containerView);
 		} else {
 			if(containerView instanceof Diagram) {
 				containerVisualID = ModelEditPart.VISUAL_ID;
