/*****************************************************************************
 * Copyright (c) 2011 CEA LIST.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *		
 *		CEA LIST - Initial API and implementation
 *
 *****************************************************************************/
package org.eclipse.papyrus.uml.diagram.common.edit.part;

import org.eclipse.draw2d.IFigure;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.papyrus.uml.tools.utils.ValueSpecificationUtil;
import org.eclipse.uml2.uml.Constraint;

/**
 * Abstract non-diagram specific edit part for node label representing {@link Constraint}.
 * This class is adapted from edit parts generated by GMF Tooling.
 */
public class ConstraintNodeLabelEditPart extends AbstractElementNodeLabelEditPart {

	protected static final String LEFT_BRACE = "{";
	protected static final String RIGHT_BRACE = "}";

	public ConstraintNodeLabelEditPart(View view) {
		super(view);
	}

	/**
	 * {@inheritDoc}
	 */
	public String getLabelRole() {
		return "Label"; //$NON-NLS-1$
	}

	/**
	 * {@inheritDoc}
	 */
	public String getIconPathRole() {
		return ""; //$NON-NLS-1$
	}
	
	@Override
	protected void refreshVisuals() {
		super.refreshVisuals();
		IFigure figure = getFigure();
		if (figure instanceof WrappingLabel) {
			EObject resolveSemanticElement = resolveSemanticElement();
			if (resolveSemanticElement instanceof Constraint) {
				String specificationValue = ValueSpecificationUtil.getSpecificationValue(((Constraint) resolveSemanticElement).getSpecification());
				specificationValue = (specificationValue == null ? "" : specificationValue);
				((WrappingLabel) figure).setText(LEFT_BRACE + specificationValue + RIGHT_BRACE);
			}
		}
	}
	
	@Override
	protected void handleNotificationEvent(Notification event) {
		// do nothing else refresh
		refresh();
	}
}
