/*
 * Copyright (c) 2008 Atos Origin
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Thibault Landre (Atos Origin) - initial API and implementation
 *	  Vincent Lorenzo (CEA-LIST) - Add templates to manage the display of the compartments in the preferences pages
 *    Vincent Lorenzo (CEA-LIST) - bug 335987: [General][Enhancement] Show/Hide Connectors Labels https://bugs.eclipse.org/bugs/show_bug.cgi?id=335987
 *    Vincent Lorenzo (CEA-LIST) - bug 342954: [Preferences] Add the possibility to define the visibility of the compartments using the GmfGen
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/papyrus/2009/papyrusgmfgenextension'»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»

«EXTENSION xpt::preferences::PrefsConstant»

«DEFINE className FOR gmfgen::GenNode-»«IF "UNDEFINED" <> elementType.displayName.toUpper()-»«elementType.displayName-»«getPreferencePageSuffix()-»«ENDIF»
«ENDDEFINE»

«DEFINE compartmentsList FOR gmfgen::GenNode-»
			«FOREACH compartments AS cpt SEPARATOR ','-»
			"«cpt.title»"
			«ENDFOREACH-»
«ENDDEFINE»

«DEFINE NodePreferencePage FOR gmfgen::GenNode-»
package «getDiagram().preferencesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» extends org.eclipse.papyrus.preferences.pages.AbstractPapyrusNodePreferencePage {

	«IF compartments->size() <> 0-»
		«EXPAND xpt::Common::generatedClassComment»
		public static final String compartments[] ={«EXPAND compartmentsList»};
	«ENDIF»

	«EXPAND xpt::Common::generatedClassComment»
	public «EXPAND className»() {
		super();
		setPreferenceKey( «getDiagram().editPartsPackageName».«getDiagram().editPartClassName».MODEL_ID+"_«elementType.displayName»");
	}
	«EXPAND xpt::Common::generatedClassComment»
	@Override
	protected String getBundleId() {
		return «getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».ID;
	}
	
	«EXPAND xpt::Common::generatedClassComment»
	public static void initDefaults(org.eclipse.jface.preference.IPreferenceStore store) {
		
		String key = «getDiagram().editPartsPackageName».«getDiagram().editPartClassName».MODEL_ID+"_«elementType.displayName»";
		store.setDefault(org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getElementConstant(key, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.WIDTH),«defaultSizeWidth(self.viewmap, 40)»);
	    store.setDefault(org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getElementConstant(key, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.HEIGHT),«defaultSizeHeight(self.viewmap, 40)»);
	 
	 	«IF compartments->size() <> 0-»
	 		java.util.Map<String, Boolean> map = getCompartmentVisibilityPreferences();
			for(String name : map.keySet()){
				String preferenceName = org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getLabelElementConstant(key, name, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.COMPARTMENT_VISIBILITY);
				store.setDefault(preferenceName, map.get(name));
			}
			
			map = getCompartmentTitleVisibilityPreferences();
			for(String name : map.keySet()){
				String preferenceName = org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getLabelElementConstant(key, name, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.COMPARTMENT_NAME_VISIBILITY);
				store.setDefault(preferenceName, map.get(name));
			}
	 	«ENDIF-»
	 
	 	 «REM» executed, only if the element has labels with defined role (using papyrusgmfgenextension::LabelVisibilityPreference)  «ENDREM»
		 «IF self.labels->exists(lbl : gmfgen::GenExternalNodeLabel | (papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl))->size()<>0))-»			
		 	for(String role : getLabelVisibilityPreferences().keySet()){
				String preferenceName = org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getLabelElementConstant(key, role, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.LABEL_VISIBILITY);
				store.setDefault(preferenceName, getLabelVisibilityPreferences().get(role));
			}
		 «ENDIF-»
	 	«REM» end of the add for papyrusgmfgenextension::LabelVisibilityPreference «ENDREM»
	 
	    //org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getElementConstant(elementName, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.COLOR_FILL), new org.eclipse.swt.graphics.RGB(255, 255, 255));
		//org.eclipse.jface.preference.PreferenceConverter.setDefault(store, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getElementConstant(elementName, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.COLOR_LINE), new org.eclipse.swt.graphics.RGB(0, 0, 0));
		
		// Set the default for the gradient
		//store.setDefault(org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getElementConstant(elementName, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.GRADIENT_POLICY),false);
		//org.eclipse.papyrus.preferences.utils.GradientPreferenceConverter gradientPreferenceConverter = new  org.eclipse.papyrus.preferences.utils.GradientPreferenceConverter(
		//		new org.eclipse.swt.graphics.RGB(255, 255, 255),
		//		new org.eclipse.swt.graphics.RGB(0, 0, 0), 0, 0);
		//store.setDefault(org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.getElementConstant(elementName, org.eclipse.papyrus.preferences.utils.PreferenceConstantHelper.COLOR_GRADIENT), gradientPreferenceConverter.getPreferenceValue());
		
	}
	
	«IF compartments->size() <> 0-»
		«EXPAND xpt::Common::generatedClassComment»
		@Override
		protected void initializeCompartmentsList() {
			for(String name : compartments) {
				this.compartmentsList.add(name);
			}
		}
	

	«EXPAND xpt::Common::generatedClassComment»
		public static java.util.TreeMap<String,Boolean> getCompartmentVisibilityPreferences(){
			java.util.TreeMap<String,Boolean> map = new java.util.TreeMap<String,Boolean>();
			«FOREACH compartments AS cpt-»
				«IF papyrusgmfgenextension::CompartmentVisibilityPreference.allInstances()->select(cptPref : papyrusgmfgenextension::CompartmentVisibilityPreference | cptPref.compartments->includes(cpt))->size()<>0-»
					«IF papyrusgmfgenextension::CompartmentVisibilityPreference.allInstances()->select(cptPref : papyrusgmfgenextension::CompartmentVisibilityPreference | cptPref.compartments->includes(cpt))->asSequence()->first().visibleByDefault=true-»
					  map.put("«cpt.title»", Boolean.TRUE);
				      «ELSE-»
				      map.put("«cpt.title»", Boolean.FALSE);
				      «ENDIF-»
				   «ELSE-»
				   		map.put("«cpt.title»",Boolean.TRUE);
				   «ENDIF-»
			«ENDFOREACH-»
			return map;
		}
		
		«EXPAND xpt::Common::generatedClassComment»
		public static java.util.TreeMap<String, Boolean> getCompartmentTitleVisibilityPreferences(){
			java.util.TreeMap<String,Boolean> map = new java.util.TreeMap<String,Boolean>();
			«FOREACH compartments AS cpt-»
				«IF papyrusgmfgenextension::CompartmentTitleVisibilityPreference.allInstances()->select(cptPref : papyrusgmfgenextension::CompartmentTitleVisibilityPreference | cptPref.compartments->includes(cpt))->size()<>0-»
					«IF papyrusgmfgenextension::CompartmentTitleVisibilityPreference.allInstances()->select(cptPref : papyrusgmfgenextension::CompartmentTitleVisibilityPreference | cptPref.compartments->includes(cpt))->asSequence()->first().visibleByDefault=true-»
					  map.put("«cpt.title»", Boolean.TRUE);
				    «ELSE-»
				      map.put("«cpt.title»", Boolean.FALSE);
				    «ENDIF-»
				«ELSE-»
				   	  map.put("«cpt.title»",Boolean.TRUE);
				«ENDIF-»
			«ENDFOREACH-»
			return map;
		}
	«ENDIF-»
	«REM» executed, only if the element has labels with defined role (using papyrusgmfgenextension::LabelVisibilityPreference)  «ENDREM»
		«IF self.labels->exists(lbl0 : gmfgen::GenExternalNodeLabel | (papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label0 : papyrusgmfgenextension::LabelVisibilityPreference | label0.externalNodeLabels->includes(lbl0))->size()<>0))-»
		«EXPAND xpt::Common::generatedClassComment»
		public static java.util.TreeMap<String,String> getStaticLabelRole(){
			java.util.TreeMap<String,String> map = new java.util.TreeMap<String, String>(new org.eclipse.papyrus.diagram.common.util.StringComparator());
			«FOREACH labels AS lbl-»
			«IF lbl.oclIsKindOf(gmfgen::GenExternalNodeLabel)-»
					«IF papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl.oclAsType(gmfgen::GenExternalNodeLabel)))->size()<>0-»
					map.put(
					"«papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl.oclAsType(gmfgen::GenExternalNodeLabel)))->asSequence()->first().role»"
					,"«papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl.oclAsType(gmfgen::GenExternalNodeLabel)))->asSequence()->first().iconPathRole»"
					);//$NON-NLS-1$
					«ENDIF-»
				«ENDIF-»
		    «ENDFOREACH-»
			return map;
		}
		
		«EXPAND xpt::Common::generatedClassComment»
			public static java.util.TreeMap<String,Boolean> getLabelVisibilityPreferences(){
				java.util.TreeMap<String,Boolean> map = new java.util.TreeMap<String,Boolean>();
				«FOREACH labels AS lbl-»
				«IF lbl.oclIsKindOf(gmfgen::GenExternalNodeLabel)-»
					«IF papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl.oclAsType(gmfgen::GenExternalNodeLabel)))->size()<>0-»
					map.put(
					"«papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl.oclAsType(gmfgen::GenExternalNodeLabel)))->asSequence()->first().role»"
					,«papyrusgmfgenextension::LabelVisibilityPreference.allInstances()->select(label : papyrusgmfgenextension::LabelVisibilityPreference | label.externalNodeLabels->includes(lbl.oclAsType(gmfgen::GenExternalNodeLabel)))->asSequence()->first().visibleByDefault»
					);//$NON-NLS-1$
					«ENDIF-»
				«ENDIF-»
				«ENDFOREACH-»
				return map;
			}
			
			«EXPAND xpt::Common::generatedClassComment»
			public java.util.TreeMap<String,String> getLabelRole(){
				return getStaticLabelRole();
			}
		«ENDIF-»
		«REM» end of the code used to managed papyrusgmfgenextension::LabelVisibilityPreference«ENDREM»
}
«ENDDEFINE»