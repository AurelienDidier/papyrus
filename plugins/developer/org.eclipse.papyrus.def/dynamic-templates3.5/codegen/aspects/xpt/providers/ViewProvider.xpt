/*
 * Copyright (c) 2009 Atos Origin
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Thibault Landre (Atos Origin) - initial API and implementation
 */
  
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»

«EXTENSION xpt::preferences::PrefsConstant»
 
«AROUND additions FOR gmfgen::GenDiagram»

	«EXPAND xpt::Common::generatedMemberComment»
	private void initFontStyleFromPrefs(View view, final IPreferenceStore store, String fontConstant, String fontColorConstant)
	{
		org.eclipse.gmf.runtime.notation.FontStyle viewFontStyle = (org.eclipse.gmf.runtime.notation.FontStyle) view.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.Literals.FONT_STYLE);
		if (viewFontStyle != null) 
		{
			org.eclipse.swt.graphics.FontData fontData = org.eclipse.jface.preference.PreferenceConverter.getFontData(store, fontConstant);
			viewFontStyle.setFontName(fontData.getName());
			viewFontStyle.setFontHeight(fontData.getHeight());
			viewFontStyle.setBold((fontData.getStyle() & org.eclipse.swt.SWT.BOLD) != 0);
			viewFontStyle.setItalic((fontData.getStyle() & org.eclipse.swt.SWT.ITALIC) != 0);
			
			org.eclipse.swt.graphics.RGB fontRGB = org.eclipse.jface.preference.PreferenceConverter.getColor(store, fontColorConstant);
				viewFontStyle.setFontColor(org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.RGBToInteger(fontRGB).intValue());
		}
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	private void initForegroundFromPrefs(View view, final IPreferenceStore store, String lineColorConstant)
	{
		org.eclipse.swt.graphics.RGB lineRGB = org.eclipse.jface.preference.PreferenceConverter.getColor(store, lineColorConstant);
		org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.setStructuralFeatureValue(view, org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLineStyle_LineColor(), org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.RGBToInteger(lineRGB));
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	private void initBackgroundFromPrefs(View view, final IPreferenceStore store, String fillColorConstant)
	{
		org.eclipse.swt.graphics.RGB fillRGB = org.eclipse.jface.preference.PreferenceConverter.getColor(store, fillColorConstant);
		org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.setStructuralFeatureValue(view, org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFillStyle_FillColor(), org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.RGBToInteger(fillRGB));
	}
	

«ENDAROUND»

«AROUND initFontFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
	«EXPAND specificInitFontFromPrefs(viewVar, prefStoreVar) FOR self-»
«ENDAROUND»

«DEFINE specificInitFontFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenNode-»
	initFontStyleFromPrefs(«viewVar», «prefStoreVar», «getPreferenceConstantFileName()».«getPreferenceFontConstant(getUniqueIdentifier().toUpper())», «getPreferenceConstantFileName()».«getPreferenceFontColorConstant(getUniqueIdentifier().toUpper())»);
«ENDDEFINE»

«DEFINE specificInitFontFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenChildNode-»
«ENDDEFINE»

«DEFINE specificInitFontFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenLink-»
	«IF "UNDEFINED" <> elementType.displayName.toUpper()»
		initFontStyleFromPrefs(«viewVar», «prefStoreVar», «getPreferenceConstantFileName()».«getPreferenceFontConstant(elementType.displayName.toUpper())», «getPreferenceConstantFileName()».«getPreferenceFontColorConstant(elementType.displayName.toUpper())»);
	«ENDIF»
«ENDDEFINE»

«DEFINE specificInitFontFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
«ENDDEFINE»



«AROUND initForegroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
	«EXPAND specificInitForegroundFromPrefs(viewVar, prefStoreVar) FOR self-»
«ENDAROUND»

«DEFINE specificInitForegroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenNode-»
	initForegroundFromPrefs(«viewVar», «prefStoreVar», «getPreferenceConstantFileName()».«getPreferenceLineColorConstant(getUniqueIdentifier().toUpper())»);
«ENDDEFINE»

«DEFINE specificInitForegroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenChildNode-»
«ENDDEFINE»

«DEFINE specificInitForegroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenLink-»
	«IF "UNDEFINED" <> elementType.displayName.toUpper()»
		initForegroundFromPrefs(«viewVar», «prefStoreVar», «getPreferenceConstantFileName()».«getPreferenceLineColorConstant(elementType.displayName.toUpper())»);
	«ENDIF»
«ENDDEFINE»

«DEFINE specificInitForegroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase»
«ENDDEFINE»





«AROUND initBackgroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
 	«EXPAND specificInitBackgroundFromPrefs(viewVar, prefStoreVar) FOR self-»
«ENDAROUND»

«DEFINE specificInitBackgroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenNode»
	initBackgroundFromPrefs(«viewVar», «prefStoreVar», «getPreferenceConstantFileName()».«getPreferenceFillColorConstant(getUniqueIdentifier().toUpper())»);
«ENDDEFINE»

«DEFINE specificInitBackgroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenChildNode»
«ENDDEFINE»

«DEFINE specificInitBackgroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenLink»
	«IF "UNDEFINED" <> elementType.displayName.toUpper()»
		initBackgroundFromPrefs(«viewVar», «prefStoreVar», «getPreferenceConstantFileName()».«getPreferenceFillColorConstant(elementType.displayName.toUpper())»);
	«ENDIF»
«ENDDEFINE»

«DEFINE specificInitBackgroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase»
«ENDDEFINE»
