/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::Utils»
«EXTENSION MetaModel»

«DEFINE CreateNodeCommand FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «createCommandClassName» extends org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand {

	«REM» Mutating canvas auxiliary «ENDREM»
	«EXPAND xpt::Common::generatedMemberComment-»
	private org.eclipse.emf.ecore.EClass eClass = null;
	«EXPAND xpt::Common::generatedMemberComment-»
	private org.eclipse.emf.ecore.EObject eObject = null;

	«REM» Mutating canvas auxiliary constructor «ENDREM»
	«EXPAND xpt::Common::generatedMemberComment-»
	public «createCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req, org.eclipse.emf.ecore.EObject eObject) {
		super(req);
		this.eObject = eObject;
		this.eClass = eObject != null ? eObject.eClass() : null;
	}

	«REM» Mutating canvas auxiliary builder «ENDREM»	
	«EXPAND xpt::Common::generatedMemberComment-»
	public static «createCommandClassName» create(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req, org.eclipse.emf.ecore.EObject eObject) {
		return new «createCommandClassName»(req, eObject);
	}

	«EXPAND constructor-»
	«IF modelFacet.isPhantomElement() || modelFacet.containmentMetaFeature != null || modelFacet.childMetaFeature != null-»
	
		«EXPAND getElementToEdit-»
		«IF modelFacet.isPhantomElement()-»

			«EXPAND canExecute_Phantom-»
			
			«EXPAND getContainmentFeature-»
			
			«EXPAND doDefaultElementCreation_Phantom(this) FOR modelFacet-»
		«ELSE-»
			«EXPAND canExecute_Normal FOR modelFacet-»
			
			«EXPAND getEClassToEdit FOR modelFacet-»			
			«EXPAND doDefaultElementCreation_Normal(this) FOR modelFacet-»
		«ENDIF-»
	«ENDIF-»
	
}
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
public «createCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
	super(req);
}
«ENDDEFINE»

«DEFINE getElementToEdit FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getElementToEdit() {
	«REM» Mutating canvas helper «ENDREM»
		org.eclipse.emf.ecore.EObject container =
				((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer();
		if (container instanceof org.eclipse.gmf.runtime.notation.View) {
			container = ((org.eclipse.gmf.runtime.notation.View) container).getElement();
		}
		if (container != null) {
			return container;
		}
		return eObject;
}
«ENDDEFINE»

«REM»
	TODO: Shouldn't this method just return true?
«ENDREM»
«DEFINE canExecute_Phantom FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean canExecute() {
	if (getEClass() != null) {
		return getEClass().isSuperTypeOf(getEClassToEdit());
	}
	return true;
}
«ENDDEFINE»

«DEFINE canExecute_Normal FOR gmfgen::TypeModelFacet-»
	«IF containmentMetaFeature.ecoreFeature.upperBound > 0 || (childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0)-»

	«EXPAND xpt::Common::generatedMemberComment»
public boolean canExecute() {
	«EXPAND MetaModel::DeclareAndAssign("container", "getElementToEdit()") FOR containmentMetaFeature.genClass-»
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0-»
			«IF containmentMetaFeature.ecoreFeature.upperBound == 1»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR containmentMetaFeature» != null) {
			«ELSE-»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR containmentMetaFeature».size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
			return false;
		}
		«ENDIF-»
		«IF childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0-»
			«IF childMetaFeature.ecoreFeature.upperBound == 1-»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR childMetaFeature» != null) {
			«ELSE-»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR childMetaFeature».size() >= «childMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
			return false;
		}
		«ENDIF-»
	return true;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContainmentFeature FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EReference getContainmentFeature() {
	return null;
}
«ENDDEFINE»

«DEFINE getEClassToEdit FOR gmfgen::TypeModelFacet-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EClass getEClassToEdit() {
	«REM» Mutating canvas helper «ENDREM»
		org.eclipse.emf.ecore.EObject eObject = getElementToEdit();
		if (eObject != null) {
			return eObject.eClass();
		}
		if (eClass != null) {
			return eClass;
		}
		return «EXPAND MetaModel::MetaClass FOR containmentMetaFeature.genClass»;
}
«ENDDEFINE»

«DEFINE doDefaultElementCreation_Phantom(gmfgen::GenNode node) FOR TypeModelFacet-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
	// Uncomment to put "phantom" objects into the diagram file.		
	// org.eclipse.emf.ecore.resource.Resource resource = 
	// 		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer().eResource();
	// if (resource == null) {
	// 	return null;
	// }
	org.eclipse.emf.ecore.resource.Resource resource = getElementToEdit().eResource();
	«EXPAND MetaModel::NewInstance("newElement") FOR metaClass»
	resource.getContents().add(«EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»);
	«EXPAND initialize(node, "newElement")-»
	return «EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»;
}
«ENDDEFINE»

«DEFINE doDefaultElementCreation_Normal(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF modelElementInitializer != null || hasExplicitChildFeature(this)-»

	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
	«EXPAND MetaModel::NewInstance("newElement") FOR metaClass»
«IF containmentMetaFeature != null-»
	«EXPAND MetaModel::DeclareAndAssign("owner", "getElementToEdit()") FOR containmentMetaFeature.genClass»
	«EXPAND xpt::diagram::commands::CreateLinkUtils::addValue("owner", containmentMetaFeature.genClass, "newElement") FOR containmentMetaFeature-»
«ENDIF»
«IF hasExplicitChildFeature(this)-»
	«EXPAND MetaModel::DeclareAndAssign("childHolder", "getElementToEdit()") FOR childMetaFeature.genClass»
	«EXPAND xpt::diagram::commands::CreateLinkUtils::addValue("childHolder", childMetaFeature.genClass, "newElement") FOR childMetaFeature»
«ENDIF-»
	«EXPAND initialize(node, "newElement")-»
	«REM»fjcano:: the Diagram may have been passed as a paremeter in the request  «ENDREM»
		//code used in MOSKitt approach in order to manage "delete from diagram"
		//org.eclipse.gmf.runtime.notation.Diagram diagram = es.cv.gvcase.mdt.common.util.MDTUtil.getDiagramFromRequest(getRequest());
		//if (diagram != null) {
		//	es.cv.gvcase.mdt.common.util.MultiDiagramUtil.AddEAnnotationReferenceToDiagram(diagram, newElement);
		//}
		//else {
		//	es.cv.gvcase.mdt.common.util.MultiDiagramUtil.
		//		addEAnnotationReferenceToDiagram(
		//		«node.getDiagram().editorGen.editor.packageName».«node.getDiagram().editorGen.plugin.activatorClassName».getInstance(), newElement);
		//}
	return «EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»;
}
«ELSE-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
		«EXPAND MetaModel::QualifiedClassName FOR metaClass» newElement = («EXPAND MetaModel::QualifiedClassName FOR metaClass») super.doDefaultElementCreation();
		//code used in MOSKitt approach in order to manage "delete from diagram"
		//if (newElement != null) {
		//	«REM»fjcano:: the Diagram may have been passed as a paremeter in the request  «ENDREM»
		//org.eclipse.gmf.runtime.notation.Diagram diagram = es.cv.gvcase.mdt.common.util.MDTUtil.getDiagramFromRequest(getRequest());
		//if (diagram != null) {
		//	es.cv.gvcase.mdt.common.util.MultiDiagramUtil.AddEAnnotationReferenceToDiagram(diagram, newElement);
		//}
		//else {
		//	es.cv.gvcase.mdt.common.util.MultiDiagramUtil.
		//		addEAnnotationReferenceToDiagram(
		//		«node.getDiagram().editorGen.editor.packageName».«node.getDiagram().editorGen.plugin.activatorClassName».getInstance(), newElement);
		//}
		//}
		return newElement;
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE initialize(gmfgen::GenNode node, String newElementVar) FOR gmfgen::TypeModelFacet»«IF modelElementInitializer != null-»
«node.getDiagram().getElementTypesQualifiedClassName()».init_«node.getUniqueIdentifier()»(«newElementVar»);
«ENDIF»«ENDDEFINE»