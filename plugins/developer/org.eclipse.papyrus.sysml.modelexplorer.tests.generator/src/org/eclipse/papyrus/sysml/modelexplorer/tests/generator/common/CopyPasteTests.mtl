[comment encoding = UTF-8 /]
[**
 * module CopyPasteTests to generate junit test files.
 */]
[module CopyPasteTests('http://www.eclipse.org/uml2/3.0.0/UML')]

[**
 * generate all the files for the given test model.
 * @param aTestModel model containing the test definitions
 * @param testedModel sysml model on which tests are performed
 */]
[template public generateCopyPasteTests(aTestModel : Model, testedModel : Model )]
	[for (elementTypeRule : Package | getAllElementTypesRules(aTestModel))]
		[generateCopyPasteElementTypeTestFile(elementTypeRule, aTestModel)/]
		[for (sourceTargetRule : Class | getAllSourceTargetRules(elementTypeRule, aTestModel))]
			[generateCopyPasteTestFile(sourceTargetRule, aTestModel)/]
		[/for]
	[/for]
[/template]

[template public generateCopyPasteElementTypeTestFile (aPackage : Package, aTestModel : Model) ]
[file ('/org/eclipse/papyrus/sysml/modelexplorer/tests/copypaste/'.concat(getFileName(aPackage)).concat('.java'), false, 'Cp1252')]
/*****************************************************************************
 * Copyright (c) 2011 CEA LIST.
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Remi Schnekenburger (CEA LIST) remi.schnekenburger@cea.fr - Initial API and implementation
 * 
 * @Generated from [aPackage.name/] - [aTestModel.name/] 
 *
 *****************************************************************************/
package org.eclipse.papyrus.sysml.modelexplorer.tests.copypaste;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.papyrus.core.utils.FilteredCollectionView;
import org.eclipse.papyrus.core.utils.IFilter;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.ui.IWorkbenchCommandConstants;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.uml2.uml.Association;
import org.eclipse.uml2.uml.Property;
import org.eclipse.uml2.uml.UMLPackage;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


/**
 * Test for Copy / Paste of a Part
 */
public abstract class [getFileName(aPackage)/] extends AbstractCopyPasteTest {

	/**
     * {@inheritDoc}
     * @generated
 	 */
	@Override
	protected void initializeTest(Map<Object, Object> additionalChecks, EObject targetContainer, EObject copiedEObject) {
		super.initializeTest(additionalChecks, targetContainer, copiedEObject);
	
		[generatePreCopyInitialization(aPackage)/]
	}

	/**
	 * {@inheritDoc}
	 * @generated	
	 */
	@Override
	protected void postCopyAdditionalChecks(Map<?, ?> originalModel, List<EObject> newValues, List<EObject> delta) throws Exception {
		super.postCopyAdditionalChecks(originalModel, newValues, delta);
		
		[generatePostCopyAdditionalChecks(aPackage)/]
	}

}


[/file]
[/template]


[template public generateCopyPasteTestFile(aClass : Class, aTestModel : Model)]
	[file ('/org/eclipse/papyrus/sysml/modelexplorer/tests/copypaste/'.concat(getFileName(aClass)).concat('.java'), false, 'Cp1252')]
/*****************************************************************************
 * Copyright (c) 2011 CEA LIST.
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Remi Schnekenburger (CEA LIST) remi.schnekenburger@cea.fr - Initial API and implementation
 * 
 * @Generated from [aClass.name/] - [aTestModel.name/] 
 *
 *****************************************************************************/
package org.eclipse.papyrus.sysml.modelexplorer.tests.copypaste;

import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.ui.IWorkbenchCommandConstants;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.commands.ICommandService;
import org.eclipse.uml2.uml.Association;
import org.eclipse.uml2.uml.Property;
import org.eclipse.uml2.uml.UMLPackage;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


/**
 * Test for Copy / Paste of a Part
 */
public class [getFileName(aClass)/] extends [getFileName(aClass.eContainer(Package))/]  {
	
	/**
	 * prepare the copy
	 * 
	 * @throws Exception
	 *         exception thrown in case of problems
	 */
	@Before
	public void testPrepare() throws Exception {
		// check editor state (should be non dirty)
		Assert.assertFalse("Editor should not be dirty at initialization", isEditorDirty());
		// retrieve elements in the model explorer
		selectAndReveal([generateElementName(getSource(aClass))/]);

		// copy Paste
		ICommandService commandService = (ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);
		commandService.refreshElements(IWorkbenchCommandConstants.EDIT_COPY, null);
		org.eclipse.core.commands.Command copyCommand = commandService.getCommand(IWorkbenchCommandConstants.EDIT_COPY);
		Assert.assertNotNull("Impossible to find copy command", copyCommand);
		Assert.assertTrue("command in not enabled", copyCommand.isEnabled());
		Assert.assertTrue("command in not defined", copyCommand.isDefined());
		copyCommand.executeWithChecks(new ExecutionEvent());

		// check editor state (should be non dirty)
		// Assert.assertFalse("Editor should not be dirty after copy", isEditorDirty());

		// NOTE: save editor. The copy command should not dirty the model, the implementation of the copy command or the editor should be modified
		Assert.assertTrue("Copy command is dirtying the model, whereas it should not. This assert is here to remember that the test code should be modified: Isdirty = false after copy...", isEditorDirty());
		PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor().doSave(new NullProgressMonitor());
		Assert.assertFalse("Save command is non-dirtying the model, whereas it should. ", isEditorDirty());
		// END NOTE
	}

	@Override
	protected void initializeTest(Map<Object, Object> additionalChecks, EObject targetContainer, EObject copiedEObject) {
		super.initializeTest(additionalChecks, targetContainer, copiedEObject);
	
		[generatePreCopyInitialization(aClass)/]
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected void postCopyAdditionalChecks(Map<?, ?> originalModel, List<EObject> newValues, List<EObject> delta) throws Exception {
		super.postCopyAdditionalChecks(originalModel, newValues, delta);
		
		[generatePostCopyAdditionalChecks(aClass)/]
	}

	[generateAllTargets(aClass)/]

}


[/file]
[/template]

[template public generatePreCopyInitialization (aPackage : Package) ]
	/* pre-copy initialization */
	[getPreCopyInitialization(aPackage)/]
	/* END OF pre-copy initialization */
[/template]

[template public generatePreCopyInitialization (aClass : Class) ]
	/* pre-copy initialization */
	[getPreCopyInitialization(aClass)/]
	/* END OF pre-copy initialization */
[/template]

[template public generatePostCopyAdditionalChecks (aPackage : Package) ]
	/* post copy checks */
	[getPostCopyAdditionalChecks(aPackage)/]
	/* END OF post copy checks */
[/template]

[template public generatePostCopyAdditionalChecks (aClass : Class) ]
	/* post copy checks */
	[getPostCopyAdditionalChecks(aClass)/]
	/* END OF post copy checks */
[/template]

[template public generateAllTargets (aClass : Class) ]
[let source : Element = getSource(aClass)]
	
	[for (target : Element | getAllTargets(aClass))]
	/**
	 * Test the copy /paste on [getName(target)/]
	 * 
	 * @throws Exception
	 *         exception thrown in case of problems
	 */
	@Test
	public void testCopyPasteIn[getName(target)/]() throws Exception {
		testExecutableCopyPaste([generateElementName(target)/], [generateElementName(source)/], "[getCopyFeature(aClass)/]", [getExpectedNumberOfElements(aClass)/]);
	}
	[/for]
[/let]
[/template]

[query public getExpectedNumberOfElements (aClass : Class) : String = aClass.getValue(aClass.getAppliedStereotype('ModelExplorerTest::SourceTargetRulesCopyPasteTest'), 'additionalElementsQuantity')/]

[query public getCopyFeature(aClass : Class) : String = aClass.getValue(aClass.getAppliedStereotype('ModelExplorerTest::SourceTargetRulesCopyPasteTest'), 'feature')/]

[query public getSource(aClass : Class) : Element =  aClass.getValue(aClass.getAppliedStereotype('ModelExplorerTest::SourceTargetRulesCopyPasteTest'), 'sourceElement')/]

[** Returns the name of the test file for the given test class *]
[query public getFileName(aClass: Class) : String = 'CopyPaste'.concat(aClass.name).concat('Test')/]

[** Returns the name of the test file for the given test package (element type) *]
[query public getFileName(aPackage: Package) : String = 'AbstractCopyPaste'.concat(aPackage.name).concat('Test')/]

[** Returns all Rules for the given test model *]
[query public getAllElementTypesRules(aTestModel : Model) : Set(Package) = aTestModel.allOwnedElements()->select(e : Element | isStereotyped(e, 'ModelExplorerTest::ElementTypeRulesCopyPasteTest'))/]

[query public getAllSourceTargetRules(elementTypeRule : Package, aTestModel :Model ) : Set(Class) = elementTypeRule.ownedElement->select(e : Element | isStereotyped(e, 'ModelExplorerTest::SourceTargetRulesCopyPasteTest')) /]

[query public isStereotyped(element : Element, stereotypeQN : String) : Boolean = not element.getAppliedStereotype(stereotypeQN).oclIsUndefined()/] 

[query public getAllTargets(aClass : Class) : Set(Element) = aClass.getValue(aClass.getAppliedStereotype('ModelExplorerTest::SourceTargetRulesCopyPasteTest'), 'targets')/]

[query public getPostCopyAdditionalChecks(aPackage : Package) : String = aPackage.getValue(aPackage.getAppliedStereotype('ModelExplorerTest::ElementTypeRulesCopyPasteTest'), 'postCopyRule')/]
[query public getPostCopyAdditionalChecks(aClass : Class) : String = aClass.getValue(aClass.getAppliedStereotype('ModelExplorerTest::SourceTargetRulesCopyPasteTest'), 'postCopyRule')/]

[query public getPreCopyInitialization(aPackage : Package) : String = aPackage.getValue(aPackage.getAppliedStereotype('ModelExplorerTest::ElementTypeRulesCopyPasteTest'), 'preCopyInitialization')/]
[query public getPreCopyInitialization(aClass : Class) : String = aClass.getValue(aClass.getAppliedStereotype('ModelExplorerTest::SourceTargetRulesCopyPasteTest'), 'preCopyInitialization')/]

[**
 * Returns the java name for an element. ex: 'p1_pb2_EObject'
 */]
[template public generateElementName(aElement : Element) post(postTreatment())]
[getName(aElement)/]_[for (element : Element | getAllContainersExceptModel(aElement))][getName(element)/]_[/for]EObject
[/template]  

[template public postTreatment(txt: String)]
	[txt.toLowerFirst().trim()/]
[/template]

[query public getName(element : Element) : String = if(element.oclIsKindOf(NamedElement)) then element.oclAsType(NamedElement).name else element.eClass().name endif/]

[query public getNames(elements: Sequence(Element)) : Sequence(String) = elements->collect(getName())/]

[query public getAllContainersExceptModel(element : Element) : Sequence(Element) = element.ancestors(Element)->reject(e| e.eContainer().oclIsUndefined())/] 


