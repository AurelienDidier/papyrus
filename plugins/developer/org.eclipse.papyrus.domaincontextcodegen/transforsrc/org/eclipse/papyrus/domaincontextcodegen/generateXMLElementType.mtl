[comment encoding = UTF-8 /]
[module generateXMLElementType('http://www.eclipse.org/papyrus/2010/domaincontextcodegen','http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::papyrus::domaincontextcodegen::ModelUtils
 /]

[template public generateXMLElementType(domain : DomainContext)]
	[comment @main /]
	[comment this template is used to generate the plugin.xml /]
	
[file (domain.typeProjectName+'/'+'xmlElementTypes.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>

[comment generation of all elementType/]
<!-- [domain.elementTypeNamePrefix/] ElementTypes declarations -->
<extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypes">

	<metamodel nsURI="[domain.metamodel.nsURI/]">
	
	<!-- Declaration of IElementTypes -->
	
[for (type : MetaClassType | domain.elementTypes.types->select(oclIsTypeOf(MetaClassType)))]
	<!-- IMetamodelType for [type.name/] -->
	<metamodelType id="[type.getElementTypeID()/]" name="[type.getSemanticHint()/]"
		eclass="[type.metaClass.name/]" 
		edithelper="[type.helper/]"
		kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType" >
			<param name="semanticHint" value="[type.getSemanticHint()/]"/>
	</metamodelType>
	
[/for]
[for (type : SpecializationType | domain.elementTypes.types->select(oclIsTypeOf(SpecializationType)))]
	<!-- ISpecializationType [type.name/] of [type.ref.getSemanticHint() /] -->
	<specializationType id="[type.getElementTypeID()/]" name="[type.getSemanticHint()/]"
		edithelperadvice="[type.helper/]"
		kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType" >
			<param name="semanticHint" value="[type.getSemanticHint()/]"/>
		<specializes id="[type.ref.getElementTypeID()/]" />
		<matcher class ="[type.matcher/]" />
	</specializationType>
	
[/for]
	</metamodel>
</extension>

[comment generation of all advicebindings/]
[if (not domain.advices->isEmpty())]
<!-- Helper advice declarations -->
<extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypes">

	<metamodel nsURI="[domain.metamodel.nsURI/]">
	
[for (advice : Advice | domain.advices)]	
	<!-- Helper advice for [advice.ref.name/] -->
	<adviceBinding id="[advice.adviceID/]"
		class="[advice.advicePath/]"
		inheritance="[advice.inheritance/]" typeId="[advice.ref.getElementTypeID()/]">
	</adviceBinding>
	
[/for]  
	</metamodel>
</extension>
[/if]

[comment generation of all bindings/]
<!-- [domain.elementTypeNamePrefix/] ElementType bindings to Papyrus shared IClientContext -->
<extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypeBindings">

	<!-- Bindings declaration -->
	<binding context="[domain.bindings.clientContextID/]">
	
[for (binding : ElementTypeBinding | domain.bindings.bindings->select(oclIsTypeOf(ElementTypeBinding)))]
		[binding.GenBinding()/]
[/for]
[for (binding : AdviceBinding | domain.bindings.bindings->select(oclIsTypeOf(AdviceBinding)))]
		[binding.GenBinding()/]
[/for]

	</binding>
	
</extension>

</plugin>

[/file]
	
[/template]

[template private GenBinding(binding : ElementTypeBinding)]
[if (not binding.ref.oclIsUndefined())]<elementType ref="[binding.ref.getElementTypeID()/]" />[/if]
[if (not binding.pattern.oclIsUndefined())]<elementType pattern="[binding.pattern/]" />[/if]
[/template]

[template private GenBinding(binding : AdviceBinding)]
[if (not binding.ref.oclIsUndefined())]<advice ref="[binding.ref.adviceID/]" />[/if]
[if (not binding.pattern.oclIsUndefined())]<advice pattern="[binding.pattern/]" />[/if]
[/template]
