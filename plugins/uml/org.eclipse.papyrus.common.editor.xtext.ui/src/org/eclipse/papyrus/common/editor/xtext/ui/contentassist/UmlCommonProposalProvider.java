/*
 * generated by Xtext
 */
package org.eclipse.papyrus.common.editor.xtext.ui.contentassist;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.CompletionProposal;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.papyrus.common.editor.xtext.umlCommon.MultiplicityRule;
import org.eclipse.papyrus.core.utils.DisplayUtils;
import org.eclipse.uml2.uml.Element;
import org.eclipse.uml2.uml.NamedElement;
import org.eclipse.uml2.uml.Namespace;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.Type;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class UmlCommonProposalProvider extends AbstractUmlCommonProposalProvider {


	/** the label provider */
	protected ILabelProvider labelProvider = DisplayUtils.getLabelProvider();

	/**
	 * 
	 * @see org.eclipse.papyrus.parameter.editor.xtext.ui.contentassist.AbstractUmlParameterProposalProvider#complete_MultiplicityRule(org.eclipse.emf.ecore.EObject,
	 *      org.eclipse.xtext.RuleCall, org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,
	 *      org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 * 
	 * @param model
	 * @param ruleCall
	 * @param context
	 * @param acceptor
	 */
	@Override
	public void complete_MultiplicityRule(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		String one = "[1]"; //$NON-NLS-1$
		String one_star = "[1..*]"; //$NON-NLS-1$
		String star = "[*]"; //$NON-NLS-1$

		String completionString = ""; //$NON-NLS-1$
		String displayString = ""; //$NON-NLS-1$
		//String displayString = c.getName() ;
		ICompletionProposal completionProposal = null;

		completionString = "" + one.substring(context.getPrefix().length()); //$NON-NLS-1$
		displayString = "" + one; //$NON-NLS-1$
		completionProposal = createCompletionProposal(completionString, displayString, context);
		acceptor.accept(completionProposal);

		completionString = "" + one_star.substring(context.getPrefix().length()); //$NON-NLS-1$
		displayString = "" + one_star + "     "; //$NON-NLS-1$ //$NON-NLS-2$
		completionProposal = createCompletionProposal(completionString, displayString, context);
		acceptor.accept(completionProposal);

		completionString = "" + star.substring(context.getPrefix().length()); //$NON-NLS-1$
		displayString = "" + star; //$NON-NLS-1$
		completionProposal = createCompletionProposal(completionString, displayString, context);
		acceptor.accept(completionProposal);
	}

	/**
	 * Private Utility method for creating a completion proposal
	 * 
	 * @param completionString
	 *        The actual completion string
	 * @param displayString
	 *        The way the completion is displayed in the completion list
	 * @param context
	 *        Some information related to the context of the completion
	 * @return
	 */
	protected ICompletionProposal createCompletionProposal(String completionString, String displayString, ContentAssistContext context) {

		ICompletionProposal completionProposal = new CompletionProposal(completionString, // String to be inserted 
		context.getOffset(), // Offset
		context.getSelectedText().length(), // Replacement length
		completionString.length(), // cursorPosition
		null, // image
		" " + displayString, // displayString //$NON-NLS-1$
		null, // contextInformation
		null // additionalProposalInfo
		);
		return completionProposal;
	}

	@Override
	public void completeMultiplicityRule_Bounds(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub

		if(!(model instanceof MultiplicityRule))
			return;

		MultiplicityRule multiplicityRule = (MultiplicityRule)model;

		if(multiplicityRule.getBounds().size() == 2) {
			String value = multiplicityRule.getBounds().get(1).getValue();
			try {
				Integer.valueOf(value);
			} catch (Exception e) {
				if(!multiplicityRule.getBounds().get(0).getValue().equals("*") && !multiplicityRule.getBounds().get(1).getValue().equals("*")) { //$NON-NLS-1$ //$NON-NLS-2$
					String completionString = "*"; //$NON-NLS-1$
					String displayString = "*"; //$NON-NLS-1$
					ICompletionProposal completionProposal = createCompletionProposal(completionString, displayString, context);
					acceptor.accept(completionProposal);
				}
			}
		}
	}

	/**
	 * Utility methods wich returns the list of classifiers that are directly or indirectly owned by a context namespace
	 * 
	 * @param context
	 *        The context namespace
	 * @return the list of classifiers that are directly or indirectly owned by the context namespace
	 */
	protected List<Type> getRecursivelyOwnedType(Namespace context) {
		List<Type> recursivelyOwnedTypes = new ArrayList<Type>();

		List<Element> allOwnedElements = context.getOwnedElements();
		for(Element e : allOwnedElements) {
			if(e instanceof Type)
				recursivelyOwnedTypes.add((Type)e);
			else if(e instanceof Package)
				recursivelyOwnedTypes.addAll(getRecursivelyOwnedType((Namespace)e));
		}

		return recursivelyOwnedTypes;
	}

	/**
	 * Utility methods which returns the list of classifiers that are directly or indirectly owned by the namespaces imported by a context namespace
	 * 
	 * @param context
	 *        The context namespace
	 * @return the list of classifiers that are directly or indirectly owned by the namespaces imported by the context namespace
	 */
	protected List<Type> getRecursivelyImportedType(Namespace context) {
		List<Type> recursivelyImportedTypes = new ArrayList<Type>();

		EList<org.eclipse.uml2.uml.Package> importedPackages = context.getImportedPackages();
		for(Package p : importedPackages) {
			recursivelyImportedTypes.addAll(getRecursivelyOwnedType(p));
		}

		return recursivelyImportedTypes;
	}

	/**
	 * Private Utility method for creating a completion proposal
	 * 
	 * @param namedElement
	 *        The named element for which completion proposal must be created
	 * @param completionString
	 *        The actual completion string
	 * @param displayString
	 *        The way the completion is displayed in the completion list
	 * @param context
	 *        Some information related to the context of the completion
	 * @return
	 */
	protected ICompletionProposal createCompletionProposal(NamedElement namedElement, String completionString, String displayString, ContentAssistContext context) {
		String additionalProposalInfo = "" + namedElement.getQualifiedName() + "\n" + '(' + namedElement.eClass().getName() + ')'; //$NON-NLS-1$ //$NON-NLS-2$

		ICompletionProposal completionProposal = new CompletionProposal(completionString, // String to be inserted 
		context.getOffset(), // Offset
		context.getSelectedText().length(), // Replacement length
		completionString.length(), // cursorPosition
		labelProvider.getImage(namedElement), // image
		" " + displayString, // displayString //$NON-NLS-1$
		null, // contextInformation
		additionalProposalInfo // additionalProposalInfo
		);
		return completionProposal;
	}

	/**
	 * 
	 * Private Utility method for creating a completion proposal with replacement of prefix
	 * 
	 * @param namedElement
	 *        The named element for which completion proposal must be created
	 * @param completionString
	 *        The actual completion string
	 * @param displayString
	 *        The way the completion is displayed in the completion list
	 * @param context
	 *        Some information related to the context of the completion
	 * @return
	 */
	protected ICompletionProposal createCompletionProposalWithReplacementOfPrefix(NamedElement namedElement, String completionString, String displayString, ContentAssistContext context) {
		String additionalProposalInfo = "" + namedElement.getQualifiedName() + "\n" + '(' + namedElement.eClass().getName() + ')'; //$NON-NLS-1$ //$NON-NLS-2$

		ICompletionProposal completionProposal = new CompletionProposal(completionString, // String to be inserted 
		context.getOffset() - context.getPrefix().length(), // Offset
		context.getPrefix().length(), // Replacement length
		completionString.length(), // cursorPosition
		labelProvider.getImage(namedElement), // image
		" " + displayString, // displayString //$NON-NLS-1$
		null, // contextInformation
		additionalProposalInfo // additionalProposalInfo
		);
		return completionProposal;
	}

}
