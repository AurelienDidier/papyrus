<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.papyrus.core" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.papyrus.core" id="papyrusDiagram" name="Papyrus Diagram Editor"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
The &lt;code&gt;org.eclipse.papyrus.core.papyrusDiagram&lt;/code&gt; extension point is used to register a new diagram editor within Papyrus. Once diagram editor is registered it can be used in Papyrus multi-page diagram editor, the editor can have its own icon and label, creation action in the toolbar and possibility to be created using new Papyrus Model wizard.
&lt;/p&gt;
&lt;p&gt;Diagram category - model level&lt;/p&gt;
&lt;p&gt;Diagram kind - diagram level&lt;/p&gt;


      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="editorDiagram" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="creationCommand" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="actionBarContributor" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="diagramCategory" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="editorDiagram">
      <annotation>
         <documentation>
            A diagram suitable for Papyrus backbone.
Such diagram is a Eclipse Editor.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="factoryClass" type="string" use="required">
            <annotation>
               <documentation>
                  The factory used to create an instance of the editor.
The factory must implements org.eclipse.papyrus.sasheditor.extension.IEditorFactory
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.papyrus.core.extension.diagrameditor.IPluggableEditorFactory"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="actionBarContributorId" type="string">
            <annotation>
               <documentation>
                  ID of the ActionBarContributor requested by the editor.
The ID must match a declared ActionBarContributor.
If no ID is set, the main ActionBarContributor is used (the one associated to the MultiEditor).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  The icon representing the diagram. (use in outline tree)
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="actionBarContributor">
      <annotation>
         <documentation>
            An ActionBarContributor that can be associated to Editors or Views.
An ActionBarContributor can be shared among several Editors or Views.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Id of the ActionBarContributor. Use to associate the ActionBarContributor to editors.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="implementingClass" type="string" use="required">
            <annotation>
               <documentation>
                  The class implementing the ActionBarContributor.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.ui.part.EditorActionBarContributor:"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="creationCommand">
      <annotation>
         <documentation>
            A creation command used to create a new diagram.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Id of the creation command.
               </documentation>
               <appInfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.ui.commands/command/@id"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>
                  Label of the creation command.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="creationCommandClass" type="string" use="required">
            <annotation>
               <documentation>
                  The class implementing the context.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.papyrus.core.extension.commands.ICreationCommand"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  The icon representing the command.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="creationCondition" type="string">
            <annotation>
               <documentation>
                  this condition is evaluated at diagram creation menu and if the method returning boolean in the interface returns false then the diagram will not be available
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.papyrus.core.extension.commands.ICreationCondition"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="language" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.papyrus.core.papyrusDiagram/@id"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="diagramCategory">
      <annotation>
         <documentation>
            The language, e.g. UML, SysML, Profile, etc... The language is used to put different kinds of diagrams into categories and to filter model templates.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The id of the diagram category. It is used to filter model templates and diagram kinds.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  A creation command class used to create a newdomain model for the given category.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.papyrus.core.extension.commands.IModelCreationCommand"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="extensionPrefix" type="string">
            <annotation>
               <documentation>
                  The file extension
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Description of the diagram category is to be displayed next ti its label in UI.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  The icon representing the diagram category.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.7
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;pre&gt;
&lt;extension point=&quot;org.eclipse.papyrus.core.papyrusDiagram&quot;&gt;
	&lt;diagramCategory
        id=&quot;sysml&quot;
    	class=&quot;org.eclipse.papyrus.sysml.diagram.common.commands.CreateSysMLModelCommand&quot;
        label=&quot;SysML&quot;
        description=&quot;SysML diagrams&quot;
        icon=&quot;icons/category_sysml.gif&quot;&gt;
	&lt;/diagramCategory&gt; 

	&lt;editorDiagram
    	actionBarContributorId=&quot;org.eclipse.papyrus.diagram.common.part.UMLDiagramActionBarContributor&quot;
        factoryClass=&quot;org.eclipse.papyrus.sysml.diagram.requirement.RequirementDiagramEditorFactory&quot;
        icon=&quot;icons/obj16/Diagram_Requirement.gif&quot;&gt;
	&lt;/editorDiagram&gt;

	&lt;creationCommand
        id=&quot;org.eclipse.papyrus.sysml.diagram.requirement.CreateCommand&quot;
    	creationCommandClass=&quot;org.eclipse.papyrus.sysml.diagram.requirement.RequirementDiagramCreateCommand&quot;
        icon=&quot;icons/obj16/Diagram_Requirement.gif&quot;
        label=&quot;SysML Requirement Diagram&quot;
		language=&quot;sysml&quot;&gt;
	&lt;/creationCommand&gt;
&lt;/extension&gt;
&lt;/pre&gt;  
In this example, a specific editor for SysML Requirement diagram is registered. 
Besides, a diagram category for SysML diagrams is defined, it has &lt;code&gt;sysml&lt;/code&gt; id. The category specifies a customized creation command &lt;code&gt;org.eclipse.papyrus.sysml.diagram.common.commands.CreateSysMLModelCommand&lt;/code&gt; which applies a profile to the newly-created model. In this example, the category &lt;code&gt;sysml&lt;/code&gt; containes only one diagram kind - Requirement diagram created with &lt;code&gt;org.eclipse.papyrus.sysml.diagram.requirement.CreateCommand&lt;/code&gt;, but it can be used by other diagrams as well.  
As Requirement diagram belongs to SysML category it will be created with a SysML profile applied to its root.  

      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;p&gt;The value of the &lt;code&gt;class&lt;/code&gt; attribute of &lt;code&gt;diagramCategory&lt;/code&gt; must represent a class that implements the &lt;code&gt;org.eclipse.papyrus.core.extension.commands.IModelCreationCommand&lt;/code&gt; interface. There are a few default implementations of &lt;code&gt;IModelCreationCommand&lt;/code&gt; that may be useful to users of this extension point: 
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.papyrus.core.extension.commands.ModelCreationCommandBase&lt;/code&gt; - an abstract implementation of a basic &lt;code&gt;IModelCreationCommand&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.papyrus.diagram.common.commands.CreateUMLModelCommand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.papyrus.diagram.profile.CreateProfileModelCommand&lt;/code&gt; - a subclass of CreateUMLModelCommand which creates Profile as a root element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.papyrus.sysml.diagram.common.commands.CreateSysMLModelCommand&lt;/code&gt; - a subclass of CreateUMLModelCommand which applies SysML profile to the root element&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;The value of the &lt;code&gt;creationCommandClass&lt;/code&gt; attribute of &lt;code&gt;creationCommand&lt;/code&gt;
 must represent a class that implements the &lt;code&gt;org.eclipse.papyrus.core.extension.commands.ICreationCommand&lt;/code&gt; interface.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.papyrus.core.adaptor.gmf.AbstractPapyrusGmfCreateDiagramCommandHandler&lt;/code&gt; - an abstract implementation of a basic &lt;code&gt;ICreationCommand&lt;/code&gt; for GMF diagrams. All CreationCommands for Papyrus diagrams extend this class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
      </documentation>
   </annotation>


   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         /*******************************************************************************
 * Copyright (c) 2008, 2010 CEA List.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     CEA List - initial API and implementation
 *******************************************************************************/
      </documentation>
   </annotation>

</schema>
